/*
   SESC: Super ESCalar simulator
   Copyright (C) 2010 University California, Santa Cruz.

   Contributed by Jose Renau

This file is part of SESC.

SESC is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software Foundation;
either version 2, or (at your option) any later version.

SESC is    distributed in the  hope that  it will  be  useful, but  WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should  have received a copy of  the GNU General  Public License along with
SESC; see the file COPYING.  If not, write to the  Free Software Foundation, 59
Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/

#include "ARMCrack.h"
#include "crack_scqemu.h"
#include <iostream>

#define OOPS(x) do { static int conta=0; if (conta<1) { printf(x); conta++; }; }while(0)

#define ARM_DATA_REG_SHFT_NOTAL \
    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0); \
    \
    if(Sbit) { \
      if(RD != PC_REG) \
        CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0); \
    } \
    else { \
      if(RD == PC_REG) { \
        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0); \
        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TTYPE, 0, LREG_TMP1, 0, 0, 0); \
        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, 0, THUMB, LREG_TMP1, 0, 0, 0); \
        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); \
        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_TTYPE, 0, LREG_TTYPE, 0, 0, 0); \
      } \
    } \
    \
    if(RD != PC_REG) \
      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0); \
    else { \
      CrackInst::setup(rinst, iBALU_RBRANCH, rbranchArray[cond], LREG_TMP2, LREG_TMP2, 0, 0, 0, 0, 0); \
    }

//Search for ARMv6T2 or ARMv6K or ARMv7 for instructions only in those versions and Higher
//The rest of the instructions are from ARMv6 and Higher

//Cracks ARMv6/v6T2/v6K/v7/VFPv3 instructions into SCOORE uOps.
void ARMCrack::expand(RAWDInst *rinst)
{
  settransType(ARM);

  // ARM instructions are not in ITBlock
  rinst->setInITBlock(false);

#if defined(DEBUG)  && defined (ENABLE_SCQEMU)
//    printf("ARM inst: 0x%x\n", rinst->getInsn());
#endif
  rinst->clearInst();

  uint32_t insn                = rinst->getInsn();
  uint8_t  cond                = (insn >> 28) & 0xF;
  uint8_t  imm                 = (insn>>25) & 1;
  uint8_t  sgroup              = (insn>>26) & 0x3;

  const uint8_t AL             = 14;
  const uint8_t UNCOND         = 15;

  //+1 to account for R0 which is a register hardcoded to 0 in SCOORE but is a general register in ARM
  uint8_t RN                   = ((insn>>16) & 0xF) + 1; 
  uint8_t RD                   = ((insn>>12) & 0xF) + 1;
  uint8_t RD1                  = RD + 1;
  uint8_t RS                   = ((insn>>8) & 0xF) + 1;
  uint8_t RM                   = (insn & 0xF) + 1;

  //Immediates
  uint32_t IMM8                = insn & 0xFF;
  uint32_t ROTATE_IMM          = (insn>>8) & 0xF;
  uint32_t SHIFT_IMM           = (insn>>7) & 0x1F;
  uint32_t OFFSET12            = insn & 0xFFF;
  uint32_t IMM16               = (((insn>>16) & 0xF)<<12) | OFFSET12;
  uint32_t OFFSET8             = (((insn>>8) & 0xF)<<4) | (insn & 0xF); //(ImmedH << 4) | (ImmedL)
  uint32_t BROFF               = int32_t(insn << 8) >> 6;  //24-bits 
  
  //+1 to account for R0 which is a register hardcoded to 0 in SCOORE but is a general register in ARM
  //this would make PC to be register 16 and the Link register to be 15
  const uint8_t  STACKPTR      = 13 + 1;
  const uint8_t  LINK          = 14 + 1;
  const uint8_t  PC_REG        = 15 + 1;
  const uint64_t PC            = rinst->getPC();

  //uint8_t b27 = (insn>>27) & 1;
  //uint8_t b26 = (insn>>26) & 1;
  uint8_t b25 = (insn>>25) & 1;
  uint8_t b24 = (insn>>24) & 1;
  uint8_t b23 = (insn>>23) & 1;
  uint8_t b22 = (insn>>22) & 1;
  uint8_t b21 = (insn>>21) & 1;
  uint8_t b20 = (insn>>20) & 1;

  uint8_t b19 = (insn>>19) & 1;
  uint8_t b18 = (insn >> 18) & 1;
  uint8_t b17 = (insn >> 17) & 1;
  uint8_t b16 = (insn>>16) & 1;

  uint8_t b12 = (insn>>11) & 1;
  uint8_t b11 = (insn>>11) & 1;
  uint8_t b10 = (insn>>10) & 1;
  uint8_t b9 = (insn>>9) & 1;
  uint8_t b8 = (insn>>8) & 1;

  uint8_t b7 = (insn>>7) & 1;
  uint8_t b6 = (insn>>6) & 1;
  uint8_t b5 = (insn>>5) & 1;
  uint8_t b4 = (insn>>4) & 1;

  uint8_t b3 = (insn>>3) & 1;
  uint8_t b2 = (insn>>2) & 1;
  uint8_t b1 = (insn>>1) & 1;
  uint8_t b0 = insn & 1;

  uint8_t Sbit = b20;

  //VFP variables
  uint8_t size = (insn >> 20) & 0x3;

  uint8_t VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
  uint8_t VN = ((b7 << 4) | ((insn >> 16) & 0xF)) + LREG_FP0;
  uint8_t VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

  uint8_t VD1 = VD + 1;
  uint8_t VN1 = VN + 1;
  uint8_t VM1 = VM + 1;

  uint8_t QN = (VN >> 1) << 1;
  uint8_t QN1 = QN + 1;

  uint8_t QM = (VM >> 1) << 1;
  uint8_t QM1 = QM + 1;

  uint8_t QD = (VD >> 1) << 1;
  uint8_t QD1 = QD + 1;

  bool copiedPC = false;
  bool complete = false;

  Scopcode cmoveArray[] = { OP_U64_CMOV_E,         OP_U64_CMOV_NE,  OP_U64_CMOV_CS, 
                            OP_U64_CMOV_CC,        OP_U64_CMOV_NEG, OP_U64_CMOV_POS, 
                            OP_U64_CMOV_VS,        OP_U64_CMOV_VC,  OP_U64_CMOV_C_AND_NOTZ, 
                            OP_U64_CMOV_NOTC_OR_Z, OP_U64_CMOV_GE,  OP_U64_CMOV_L,
                            OP_U64_CMOV_G,         OP_U64_CMOV_LE,  OP_U64_CMOV_A
                          };

  Scopcode negCmoveArray[] = { OP_U64_CMOV_NE,          OP_U64_CMOV_E,   OP_U64_CMOV_CC, 
                               OP_U64_CMOV_CS,          OP_U64_CMOV_POS, OP_U64_CMOV_NEG, 
                               OP_U64_CMOV_VC,          OP_U64_CMOV_VS,  OP_U64_CMOV_NOTC_OR_Z, 
                               OP_U64_CMOV_C_AND_NOTZ, OP_U64_CMOV_L,   OP_U64_CMOV_GE,
                               OP_U64_CMOV_LE,          OP_U64_CMOV_G,   OP_U64_CMOV_A
                             };

  Scopcode rbranchArray[] = { OP_U64_RBE,         OP_U64_RBNE,  OP_U64_RBCS, 
                              OP_U64_RBCC,        OP_U64_RBNEG, OP_U64_RBPOS, 
                              OP_U64_RBVS,        OP_U64_RBVC,  OP_U64_RBC_AND_NOTZ,
                              OP_U64_RBNOTC_OR_Z, OP_U64_RBGE,  OP_U64_RBL,
                              OP_U64_RBG,         OP_U64_RBLE
                            };

  Scopcode lbranchArray[] = { OP_U64_LBE,         OP_U64_LBNE,  OP_U64_LBCS, 
                              OP_U64_LBCC,        OP_U64_LBNEG, OP_U64_LBPOS, 
                              OP_U64_LBVS,        OP_U64_LBVC,  OP_U64_LBC_AND_NOTZ,  
                              OP_U64_LBNOTC_OR_Z, OP_U64_LBGE,  OP_U64_LBL,
                              OP_U64_LBG,         OP_U64_LBLE
                            };

  Scopcode negrbranchArray[] = { OP_U64_RBNE,        OP_U64_RBE,   OP_U64_RBCC, 
                                 OP_U64_RBCS,        OP_U64_RBPOS, OP_U64_RBNEG, 
                                 OP_U64_RBVC,        OP_U64_RBVS,  OP_U64_RBNOTC_OR_Z,
                                 OP_U64_RBC_AND_NOTZ, OP_U64_RBL,   OP_U64_RBGE,
                                 OP_U64_RBLE,        OP_U64_RBG
                               };

  Scopcode caddArray[] = { OP_U64_CADD_E,          OP_U64_CADD_NE, 
                           OP_U64_CADD_CS,         OP_U64_CADD_CC,
                           OP_U64_CADD_NEG,        OP_U64_CADD_POS, 
                           OP_U64_CADD_VS,         OP_U64_CADD_VC,
                           OP_U64_CADD_C_AND_NOTZ, OP_U64_CADD_NOTC_OR_Z, 
                           OP_U64_CADD_GE,         OP_U64_CADD_L,
                           OP_U64_CADD_G,          OP_U64_CADD_LE, 
                           OP_U64_ADD
                         };

  if(cond == UNCOND) { //Unconditional Instructions
    switch(sgroup) {
      case 0:
        if(!imm && b24 && !b23 && !b22 && !b21 && !b20 && !b5 && !b16) { //CPS
          OOPS("WARNING: CPS is NOT IMPLEMENTED.\n");
        }
        else if(!imm && b24 && !b23 && !b22 && !b21 && !b20 && !b7 && !b6 && !b5 && !b4 && b16) { //SETEND
          OOPS("WARNING: SETEND is NOT IMPLEMENTED.\n");
        }
        else if(imm) { //Advanced SIMD data-processing instructions
          if(!b23) { //3 registers of the same length //A7-12
            uint8_t a_3regsamelen = (insn >> 8) & 0xF;
            uint8_t c_3regsamelen = (insn >> 20) & 0x3;
            
            switch(a_3regsamelen) { 
              case 0:
                if(!b4) { //VHADD/VHSUB //A8-600
                  switch(size) {
                    case 0:
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U08_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                      if(b6)
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      break;
                    case 1:
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                      if(b6)
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      break;
                    case 2:
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                      if(b6)
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      break;
                  }
                }
                else { //VQADD //A8-700
                  switch(size) {
                    case 0: //8-bit
                      //First Byte
                      if(b24) { //unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Second Byte 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Third Byte
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Fourth Byte
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Fifth Byte
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Sixth Byte
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Seventh Byte
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Eighth Byte
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      break;
                    case 1: //16-bit
                      //First Halfword
                      if(b24) { //unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_SADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U16_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_SADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S16_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Second Halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Third Halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Fourth Halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      break;
                    case 2: //32-bit
                      if(b24) { //unsigned
                        CrackInst::setup(rinst, iAALU, OP_U32_SADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U32_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S32_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U32_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      break;
                    case 3: //64-bit
                      if(b24) { //unsigned
                        CrackInst::setup(rinst, iAALU, OP_U64_SADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U64_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_SADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S64_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      break;
                  }
                }
                break;
              case 1:
                if(!b4) { //VRHADD //A8-734
                  switch(size) {
                    case 0:
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U08_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      }
                      break;
                    case 1:
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      }
                      break;
                    case 2:
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      }
                      break;
                  }
                } 
                else {
                  if(!b24) {
                    switch(c_3regsamelen) {
                      case 0: //VAND (register) //A8-544
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, VM, 0, VD, 0, 0, 0);  
        
                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, VM1, 0, VD1, 0, 0, 0);  
                        break;
                      case 1: //VBIC (register) A8-548
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VN, VM, 0, VD, 0, 0, 0);  
        
                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VN1, VM1, 0, VD1, 0, 0, 0);  
                        break;
                      case 2: //VMOV/VORR (register)
                        if(VN != VM) { //VORR //A8-680
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, VN, VM, 0, VD, 0, 0, 0);  
        
                          if(b6)
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, VN1, VM1, 0, VD1, 0, 0, 0);  
                        }
                        else { //VMOV //A8-642 //Encoding A1
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, 0, VD, 0, 0, 0); //FIXME: RAT/ROB move?
        
                          if(b6)
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, 0, VD1, 0, 0, 0); //FIXME: RAT/ROB move?
                        }
                        break;
                      case 3: //VORN (register) //A8-676
                        CrackInst::setup(rinst, iAALU, OP_S64_ORN, VN, VM, 0, VD, 0, 0, 0);  
 
                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S64_ORN, VN1, VM1, 0, VD1, 0, 0, 0);  
                        break;
                    }
                  }
                  else {
                    switch(c_3regsamelen) {
                      case 0: //VEOR //A8-596
                        CrackInst::setup(rinst, iAALU, OP_S64_XOR, VN, VM, 0, VD, 0, 0, 0);  
 
                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S64_XOR, VN1, VM1, 0, VD1, 0, 0, 0);  
                        break;
                      case 1: //VBSL //A8-550
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, VD, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VM, VD, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VM1, VD1, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                        break;
                      case 2: //VBIT //A8-550
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VN, VM, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                        break;
                      case 3: //VBIF //A8-550
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, VM, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                        break;
                    }
                  }
                }
                break;
              case 2:
                if(!b4) { //VHSUB A8-600
                  switch(size) {
                    case 0:
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                      if(b6)
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      break;
                    case 1:
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                      if(b6)
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      break;
                    case 2:
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                      if(b6)
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      break;
                  }
                }
                else { //VQSUB //A8-724
                  switch(size) {
                    case 0: //8-bit
                      //First Byte
                      if(b24) { //unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Second Byte 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Third Byte
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Fourth Byte
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Fifth Byte
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Sixth Byte
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Seventh Byte
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Eighth Byte
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      break;
                    case 1: //16-bit
                      //First Halfword
                      if(b24) { //unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U16_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Second Halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Third Halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      //Fourth Halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      break;
                    case 2: //32-bit
                      if(b24) { //unsigned
                        CrackInst::setup(rinst, iAALU, OP_U32_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U32_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S32_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U32_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      break;
                    case 3: //64-bit
                      if(b24) { //unsigned
                        CrackInst::setup(rinst, iAALU, OP_U64_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U64_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_S64_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      break;
                  }
                }
                break;
              case 3:
                if(!b4) { //VCGT //A8-560 //Encoding A1
                  switch(size) { 
                    case 0: //8-bit
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      break;
                    case 1: //16-bit
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      break;
                  }
                }
                else { //VCGE //A8-556 //Encoding A1
                  switch(size) { 
                    case 0: //8-bit
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      break;
                    case 1: //16-bit
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      break;
                  }
                }
                break;
              case 4:
                if(!b4) { //VSHL (register) //A8-753
                  switch(size) {
                    case 0: //8-bit
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      } //end Unsigned
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      } //end Signed
                      break;
                    case 1: //16-bit
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      } //end Unsigned
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      } //end Signed
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      break;
                    case 3: //64-bit
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD1, 0, 0, 0);  
                        }
                      }
                      break;
                  }
                }
                else { //VQSHL (register) //A8-718
                  //OOPS("WARNING: VQSHL (register) is NOT IMPLEMENTED.\n");
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b6) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b24<<3) | (b6<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b24<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQSHL, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b6) {
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0);
                  }
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0);

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                  if(b6)
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                }
                break;
              case 5:
                if(!b4) { //VRSHL //A8-736
                  switch(size) {
                    case 0: //8-bit
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      } //end Unsigned
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      } //end Signed
                      break;
                    case 1: //16-bit
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      } //end Unsigned
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      } //end Signed
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP8, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP8, 0, 32, LREG_TMP8, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP8, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP8, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP8, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP8, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP8, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP8, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      } //end Unsigned
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP8, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP8, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP8, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP8, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP8, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP8, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      } //end Signed
                      break;
                    case 3: //64-bit
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM1, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP5, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP5, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD1, 0, 0, 0);  
                        }
                      }
                      break;
                  }
                }
                else { //VQRSHL //A8-714
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b6) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b24<<3) | (b6<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b24<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQRSHL, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b6) {
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                  }
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                  if(b6)
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                }
                break;
              case 6: //VMAX/VMIN (integer) //A8-630
                switch(size) {
                  case 0: //8-bit
                    if(b24) { //Unsigned
                      if(!b4) { //Max
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Min
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                    }
                    else { //Signed
                      if(!b4) { //Max
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Min
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                    }
                    break;
                  case 1: //16-bit
                    if(b24) { //Unsigned
                      if(!b4) { //Max
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Min
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                    }
                    else { //Signed
                      if(!b4) { //Max
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Min
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                    }
                    break;
                  case 2: //32-bit
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP5, 0, 0, 0);  

                    if(b24) { //Unsigned
                      if(!b4) { //Max
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Min
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                    }
                    else {
                      if(!b4) { //Max
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                      else { //Min
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      }
                    }
                    break;
                }
                break;
              case 7:
                if(!b4) { //VABD (integer) //A8-528 //Encoding A1
                  //OOPS("WARNING: VABD (integer) is NOT IMPLEMENTED.\n");
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b6) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b24<<3) | (b6<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b24<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VABD, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b6)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                  if(b6)
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                }
                else { //VABA (integer) //A8-526 //Encoding A1
                  //OOPS("WARNING: VABA (integer) is NOT IMPLEMENTED.\n");
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b6) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b24<<3) | (b6<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b24<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VABA, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b6)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                  if(b6)
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                }
                break;
              case 8:
                if(!b4) { 
                  if(!b24) { //VADD (integer) //A8-536
                    switch(size) {
                      case 0:
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6) 
                          CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                        break;
                      case 1:
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6) 
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                        break;
                      case 2:
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6) 
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                        break;
                      case 3:
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6) 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                        break;
                    }
                  }
                  else { //VSUB (integer) //A8-788
                    switch(size) {
                      case 0:
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6) 
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                        break;
                      case 1:
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6) 
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                        break;
                      case 2:
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6) 
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                        break;
                      case 3:
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b6) 
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                        break;
                    }
                  }
                }
                else {
                  if(!b24) { //VTST //A8-802
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                        break;
                    }
                  }
                  else { //VCEQ (integer) //A8-552 //Encoding A1
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                        break;
                    }
                  }
                }
                break;
              case 9:
                if(!b4) { //VMLA/VMLS (integer) //A8-634 //Encoding A1
                  if(b24) { //VMLS
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                        }
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                        }
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                        }
                        break;
                    }
                  }
                  else { //VMLA
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                        }
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                        }
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                        }
                        break;
                    }
                  }
                }
                else { //VMUL (integer and polynomial)  //A8-662 //Encoding A1
                  if(b24) { // VMUL polynomial
                    if(size == 0) {
                      // push r0 (it will have SYSMEM for the syscall (arg1), r7
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 12, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b6<<1) | 1), 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD1, 0, 0, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                      }
                      else {
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VMULPOLY, 8, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);

                      // pop LREG_R0, r7
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                      if(b6)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    }
                  }
                  else { //VMUL int
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                        break;
                    }
                  }
                }
                break;
              case 10: //VPMAX/VPMIN (integer) //A8-690
                if(b24) { //Unsigned
                  if(!b4) { //Max
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                    }
                  }
                  else { //Min
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                    }
                  }
                }
                else { //Signed
                  if(!b4) { //Max
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                    }
                  }
                  else { //Min
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                    }
                  }
                }
                break;
              case 11:
                if(!b4) {
                  if(!b24) { //VQDMULH //A8-704 //Encoding A1
                    //OOPS("WARNING: VQDMULH is NOT IMPLEMENTED.\n");
                    // push r0 (it will have SYSMEM for the syscall (arg1), r7
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((0<<5) | (0<<4) | (0<<3) | (b6<<2) | size), 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((0<<4) | (0<<3) | size), 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQDMULH, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                    }
                    else
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                    // pop r0, r7
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                    CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  }
                  else { //VQRDMULH //A8-712 //Encoding A1
                    //OOPS("WARNING: VQRDMULH is NOT IMPLEMENTED.\n");
                    // push r0 (it will have SYSMEM for the syscall (arg1), r7
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((0<<5) | (0<<4) | (1<<3) | (b6<<2) | size), 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((0<<5) | (0<<4) | (1<<3) | size), 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQDMULH, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                    }
                    else
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                    // pop r0, r7
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                    CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  }
                }
                else {
                  if(!b24) { //VPADD //A8-684
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                    }
                  }
                }
                break;
              case 13:
                if(!b4) {
                  if(!b24) {
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                    if(!b21) { //VADD (floating-point) //A8-538 //Encoding A1
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    }
                    else { //VSUB (floating-point) //A8-790 //FP Vector Sub
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    }
                  }
                  else {
                    if(!b21) { //VPADD (floating-point) //A8-686
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                    }
                    else { //VABD (floating-point) //A8-530
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    }
                  }
                }
                else {
                  if(!b24) { //VMLA/VMLS (floating-point) //A8-636 //Encoding A1
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                    if(!b21) { //VMLA fp
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    }
                    else { //VMLS fp
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    }
                  }
                  else {
                    if(!b21) { //VMUL (floating-point) //A8-664 //FP Vector Multiply
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    }
                  }
                }
                break;
              case 14:
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                if(!b4) {
                  if(!b24) {
                    if(!b21) { //VCEQ (register) fp //A8-552 //Encoding A2
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    }
                  }
                  else {
                    if(!b21) { //VCGE (register) fp //A8-556  //Encoding A2
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    }
                    else { //VCGT (register) fp //A8-560 //Encoding A2
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, 0, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    }
                  }
                }
                else { //VACGE/VACGT/VACLE/VACLT fp //A8-534
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  

                  if(!b21) 
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  

                  if(!b21) 
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                  if(b6) {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  

                    if(!b21) 
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);  

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  

                    if(!b21) 
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                  }
                }
                break;
              case 15:
                if(!b4) {
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                  if(!b24) { //VMAX/VMIN (floating-point) //A8-632
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  

                    if(!b21) //VMAX
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    else //VMIN
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  

                    if(!b21) //VMAX
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    else //VMIN
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  

                      if(!b21) //VMAX
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      else //VMIN
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  

                      if(!b21) //VMAX
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      else //VMIN
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                    }
                  }
                  else { //VPMAX/VPMIN (floating-point) //A8-693
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_R0, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                    if(!b21) { //VMAX
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    }
                    else { //VMIN
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                  }
                }
                else {
                  if(!b24) {
                    if(!b21) { //VRECPS //A8-730
                      //FIXME: need to do ERROR checking
                      if(!b20) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 2, LREG_TMP2, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 1);
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 1);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD, 0, 0, 0);

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD1, 0, 0, 0);
                        }
                      }
                    }
                    else { //VRSQRTS //A8-744
                      //FIXME: need to do ERROR checking
                      if(!b20) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 3, LREG_TMP2, 0, 0, 1);
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 2, LREG_TMP3, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 1);
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 1);
                        CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                        CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP5, LREG_TMP3, 0, LREG_TMP5, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD, 0, 0, 0);

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP5, LREG_TMP3, 0, LREG_TMP5, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD1, 0, 0, 0);
                        }
                      }
                    }
                  }
                }
                break;
              default:
                OOPS("WARNING: Instruction is UNDEFINED in 3reg of same length space.\n");
                break;
            }
          } //end 3 reg of the same length
          else if(!b21 && !b20 && !b19 && !b7 && b4) { //1 register and a modified immediate //A7-21
            uint8_t cmode = (insn >> 8) & 0xF;
            uint32_t VECTOR_IMM = (((insn>>24) & 0x1) << 7) | (((insn >> 16) & 0x7) << 4) | (insn & 0xF);

            switch(cmode) {
              case 0:
              case 1:
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                break;
              case 2:
              case 3:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 40, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 4:
              case 5:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 6:
              case 7:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 8:
              case 9:
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 10:
              case 11:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 12:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 13:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 14:
                if(!b5) {
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                }
                else {
                  if(b24) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);  
                  }
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0, LREG_TMP1, 0, 0, 0);  

                  if(b18) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b17) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b16) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b3) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b2) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b1) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b0) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }
                }
                break;
              case 15:
                if(!b5) {
                  if(b18) {
                    uint32_t mod_imm = (b24 << 15) | (0x1F << 13) | ((insn>>16) & 0x3) | ((insn & 0xF) << 3);
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(mod_imm), LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }
                  else {
                    uint32_t mod_imm = (b24 << 15) | (1 << 14) | ((insn>>16) & 0x3) | ((insn & 0xF) << 3);
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(mod_imm), LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }
                }
                else{
                  OOPS("WARning: Instruction is UNDEFINED in 1reg and a modified immediate space.\n");
                }
                break;
            }
            if(!b5) {
              if(b8 && (b10 && b11)) {  //VORR (immediate) //A8-678
                CrackInst::setup(rinst, iAALU, OP_S64_OR, VD, LREG_TMP1, 0, VD, 0, 0, 0);  
 
                if(b6) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, VD1, LREG_TMP1, 0, VD1, 0, 0, 0);  
                }
              }
              else { //VMOV (immediate) //A8-640 //Encoding A1
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VD, 0, 0, 0); //FIXME: RAT/ROB move?

                if(b6) {
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VD1, 0, 0, 0); //FIXME: RAT/ROB move?
                }
              }
            }
            else {
              if(!b8 || (b10 && b11)) { //VMVN (immediate) //A8-668
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                if(b6)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
              }
              else if(b8 || !(b10 && b11)) { //VBIC (immediate) //A8-546
                CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP1, 0, VD, 0, 0, 0);  
 
                if(b6)
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP1, 0, VD1, 0, 0, 0);  
              }
              else if(cmode == 14) { //VMOV (imm) //A8-640 Encoding A1
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VD, 0, 0, 0); //FIXME: RAT/ROB move?

                if(b6)
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VD1, 0, 0, 0); //FIXME: RAT/ROB move?
              }
            }
          } //end 1 reg and a modified imm
          else if(b4) { //2 registers and a shift amount //A7-17
            uint8_t a_2regshift = (insn >> 8) & 0xF;
            uint8_t IMM6 = (b7 << 7) | ((insn>>16) & 0x3F);
            uint8_t shift_amount = 0; 
            uint8_t round; 
            uint8_t size = 0xFF; //force initialization 

            switch(a_2regshift) {
              case 0: //VSHR //A8-756
                if(b7) { //64-bits
                  shift_amount = 64-IMM6;
                }
                else if (!b7 && b21) { //32-bits
                  shift_amount = 64-IMM6;
                }
                else if(!b7 && !b21 && b20) { //16-bits
                  shift_amount = 32-IMM6;
                }
                else if(!b7 && !b21 && !b20 && b19) { //8-bits
                  shift_amount = 16-IMM6;
                }

                if(b24) { //Unsigned
                  if(b7) { //64-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, shift_amount, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                  }
                  else if (!b7 && b21) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, shift_amount, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                  }
                  else if(!b7 && !b21 && b20) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM, 0, shift_amount, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                  }
                  else if(!b7 && !b21 && !b20 && b19) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM, 0, shift_amount, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                  }
                }
                else { //Signed
                  if(b7) { //64-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, shift_amount, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM1, 0, shift_amount, VD1, 0, 0, 0);
                  }
                  else if (!b7 && b21) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM, 0, shift_amount, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM1, 0, shift_amount, VD1, 0, 0, 0);
                  }
                  else if(!b7 && !b21 && b20) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_S16_SRA, VM, 0, shift_amount, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, VM1, 0, shift_amount, VD1, 0, 0, 0);
                  }
                  else if(!b7 && !b21 && !b20 && b19) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S08_SRA, VM, 0, shift_amount, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iAALU, OP_S08_SRA, VM1, 0, shift_amount, VD1, 0, 0, 0);
                  }
                }
                break;
              case 1: //VSRA //A8-764
                if(b7) //64-bits
                  shift_amount = 64-IMM6;
                else if (!b7 && b21) //32-bits
                  shift_amount = 64-IMM6;
                else if(!b7 && !b21 && b20) //16-bits
                  shift_amount = 32-IMM6;
                else if(!b7 && !b21 && !b20 && b19) //8-bits
                  shift_amount = 16-IMM6;

                if(b24) { //Unsigned
                  if(b7) { //64-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if (!b7 && b21) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && b20) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && !b20 && b19) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                  }
                }
                else { //Signed
                  if(b7) { //64-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if (!b7 && b21) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && b20) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_S16_SRA, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && !b20 && b19) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S08_SRA, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S08_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                }
                break;
              case 2: //VRSHR //A8-738
                if(b7) { //64-bits
                  shift_amount = 64-IMM6;
                }
                else if (!b7 && b21) { //32-bits
                  shift_amount = 64-IMM6;
                }
                else if(!b7 && !b21 && b20) { //16-bits
                  shift_amount = 32-IMM6;
                }
                else if(!b7 && !b21 && !b20 && b19) { //8-bits
                  shift_amount = 16-IMM6;
                }

                round = 1 << (shift_amount -1);

                if(b24) { //Unsigned
                  if(b7) { //64-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                    }
                  }
                  else if (!b7 && b21) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && b20) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_U16_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && !b20 && b19) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_U08_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                    }
                  }
                }
                else { //Signed
                  if(b7) { //64-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                    }
                  }
                  else if (!b7 && b21) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && b20) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_S16_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && !b20 && b19) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S08_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S08_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                    }
                  }
                }
                break;
              case 3: //VRSRA //A8-746
                if(b7) { //64-bits
                  shift_amount = 64-IMM6;
                }
                else if (!b7 && b21) { //32-bits
                  shift_amount = 64-IMM6;
                }
                else if(!b7 && !b21 && b20) { //16-bits
                  shift_amount = 32-IMM6;
                }
                else if(!b7 && !b21 && !b20 && b19) { //8-bits
                  shift_amount = 16-IMM6;
                }

                round = 1 << (shift_amount -1);

                if(b24) { //Unsigned
                  if(b7) { //64-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                  }
                  else if (!b7 && b21) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && b20) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_U16_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && !b20 && b19) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_U08_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                }
                else { //Signed
                  if(b7) { //64-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                  }
                  else if (!b7 && b21) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && b20) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_S16_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && !b20 && b19) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S08_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S08_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  }
                }
                break;
              case 4:
                if(b24) { //VSRI //A8-766
                  if(b7) { //64-bits
                    shift_amount = 64-IMM6;
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if (!b7 && b21) { //32-bits
                    shift_amount = 64-IMM6;
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && b20) { //16-bits
                    shift_amount = 32-IMM6;
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && !b20 && b19) { //8-bits
                    shift_amount = 16-IMM6;
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                    }
                  }
                }
                break;
              case 5:
                if(!b24) { //VSHL (immediate) //A8-A8-750
                  if(b7) { //64-bits
                    shift_amount = IMM6;
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, shift_amount, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                  }
                  else if (!b7 && b21) { //32-bits
                    shift_amount = IMM6 - 32;
                    CrackInst::setup(rinst, iAALU, OP_S32_SLL, VM, 0, shift_amount, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                  }
                  else if(!b7 && !b21 && b20) { //16-bits
                    shift_amount = IMM6 - 16;
                    CrackInst::setup(rinst, iAALU, OP_S16_SLL, VM, 0, shift_amount, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                  }
                  else if(!b7 && !b21 && !b20 && b19) { //8-bits
                    shift_amount = IMM6 - 8;
                    CrackInst::setup(rinst, iAALU, OP_S08_SLL, VM, 0, shift_amount, VD, 0, 0, 0);

                    if(b6)
                      CrackInst::setup(rinst, iAALU, OP_S08_SLL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                  }
                }
                else { //VSLI //A8-760
                  if(b7) { //64-bits
                    shift_amount = IMM6;
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if (!b7 && b21) { //32-bits
                    shift_amount = IMM6 - 32;
                    CrackInst::setup(rinst, iAALU, OP_S32_SLL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && b20) { //16-bits
                    shift_amount = IMM6 - 16;
                    CrackInst::setup(rinst, iAALU, OP_S16_SLL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                    }
                  }
                  else if(!b7 && !b21 && !b20 && b19) { //8-bits
                    shift_amount = IMM6 - 8;
                    CrackInst::setup(rinst, iAALU, OP_S08_SLL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S08_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                    }
                  }
                }
                break;
              case 6: //VQSHLU (immediate) //A8-720
                if(b7) { //64-bits
                  size = 3;
                  shift_amount = IMM6;
                }
                else if (!b7 && b21) { //32-bits
                  size = 2;
                  shift_amount = IMM6 - 32;
                }
                else if(!b7 && !b21 && b20) { //16-bits
                  size = 1;
                  shift_amount = IMM6 - 16;
                }
                else if(!b7 && !b21 && !b20 && b19) { //8-bits
                  size = 0;
                  shift_amount = IMM6 - 8;
                }

                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                if(b6) {
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<11) | (b8<<10) | (shift_amount<<4) | (0<<3) | (b6<<2) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<11) | (b8<<10) | (shift_amount<<4) | (0<<3) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                }

                CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQSHL, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                if(b6) {
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                if(b6)
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                break;
              case 7: //VQSHL (imm)
                //OOPS("WARNING: VQSHL (imm) is NOT IMPLEMENTED.\n");
                if(b7) { //64-bits
                  size = 3;
                  shift_amount = IMM6;
                }
                else if (!b7 && b21) { //32-bits
                  size = 2;
                  shift_amount = IMM6 - 32;
                }
                else if(!b7 && !b21 && b20) { //16-bits
                  size = 1;
                  shift_amount = IMM6 - 16;
                }
                else if(!b7 && !b21 && !b20 && b19) { //8-bits
                  size = 0;
                  shift_amount = IMM6 - 8;
                }

                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                if(b6) {
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<11) | (b8<<10) | (shift_amount<<4) | (b24<<3) | (b6<<2) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<11) | (b8<<10) | (shift_amount<<4) | (b24<<3) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                }

                CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQSHL, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                if(b6) {
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                if(b6)
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                break;
              case 8:
              case 9:
                if((a_2regshift == 8) && !b24) {
                  if(!b6 && !b7) { //VSHRN //A8-758
                    if(b21) { //32-bits
                      shift_amount = 64-IMM6;
                    }
                    else if (!b21 && b20) { //16-bits
                      shift_amount = 32-IMM6;
                    }
                    else if(!b21 && !b20 && b19) { //8-bits
                      shift_amount = 16-IMM6;
                    }

                    if(b21) { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                    }
                    else if(!b21 && b20) { //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, QM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, QM, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, QM1, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, QM1, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                    }
                    else if(!b21 && !b20 && b19) { //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, QM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, QM1, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    }
                  }
                  else if(b6 && !b7) { //VRSHRN //A8-740
                    if(b21) { //32-bits
                      shift_amount = 64-IMM6;
                    }
                    else if (!b21 && b20) { //16-bits
                      shift_amount = 32-IMM6;
                    }
                    else if(!b21 && !b20 && b19) { //8-bits
                      shift_amount = 16-IMM6;
                    }

                    round = 1 << (shift_amount -1);

                    if(b21) { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM, 0, round, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM1, 0, round, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                    }
                    else if(!b21 && b20) { //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, QM, 0, round, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, QM1, 0, round, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                    }
                    else if(!b21 && !b20 && b19) { //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, QM, 0, round, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP3, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, QM1, 0, round, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP3, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    }
                  }
                }
                else if(((a_2regshift == 8) && b24 && !b7 && !b6) || ((a_2regshift == 9) && !b7 && !b6)) { //VQSHRN/VQSHRUN //A8-722
                  //OOPS("WARNING: VQSHRN/VQSHRUN is NOT IMPLEMENTED.\n");
                  if(b21) { //32-bits
                    shift_amount = 64-IMM6;
                    size = 3;
                  }
                  else if (!b21 && b20) { //16-bits
                    shift_amount = 32-IMM6;
                    size = 2;
                  }
                  else if(!b21 && !b20 && b19) { //8-bits
                    shift_amount = 16-IMM6;
                    size = 1;
                  }

                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QM, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b8<<10) | (shift_amount<<4) | (b24<<3) | (b6<<2) | size), 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QM1, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQSHRN, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 20, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                }
                else if(((a_2regshift == 8) && b24 && !b7 && b6) || ((a_2regshift == 9) && !b7 && b6)) { //VQRSHRN/VQRSHRUN //A8-716
                  //OOPS("WARNING: VQRSHRN/VQRSHRUN is NOT IMPLEMENTED.\n");
                  if(b21) { //32-bits
                    shift_amount = 64-IMM6;
                    size = 3;
                  }
                  else if (!b21 && b20) { //16-bits
                    shift_amount = 32-IMM6;
                    size = 2;
                  }
                  else if(!b21 && !b20 && b19) { //8-bits
                    shift_amount = 16-IMM6;
                    size = 1;
                  }

                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QM, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b8<<10) | (shift_amount<<4) | (b24<<3) | (b6<<2) | size), 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QM1, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQSHRN, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 20, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                }
                break;
              case 10:
                if(!b6 && !b7 && (shift_amount != 0)) { //VSHLL //A8-754 //Encoding A1
                  if(b21) { //32-bits
                    shift_amount = IMM6 - 32;
                  }
                  else if (!b21 && b20) { //16-bits
                    shift_amount = IMM6 - 16;
                  }
                  else if(!b21 && !b20 && b19) { //8-bits
                    shift_amount = IMM6 - 8;
                  }

                  if(b24) { //Unsigned
                    if(b21) { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, QD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, QD1, 0, 0, 0);
                    }
                    else if(!b21 && b20) { //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                    }
                    else if(!b21 && !b20 && b19) { //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                    }
                  }
                  else { //Signed
                    if(b21) { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, QD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, QD1, 0, 0, 0);
                    }
                    else if(!b21 && b20) { //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                    }
                    else if(!b21 && !b20 && b19) { //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                    }
                  }
                }
                else if(!b6 && !b7 && (shift_amount == 0)) { //VMOVL //A8-A8-654
                  uint8_t imm3 = (insn>>19) & 0x7;

                  if(b24) { //Unsigned
                    if(imm3 == 1) { //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                    }
                    else if(imm3 == 2) { //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                    }
                    else if(imm3 == 4) { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, QD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, QD1, 0, 0, 0);
                    }
                  }
                  else { //Signed
                    if(imm3 == 1) { //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                    }
                    else if(imm3 == 2) { //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                    }
                    else if(imm3 == 4) { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, QD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, QD1, 0, 0, 0);
                    }
                  }
                }
                break;
              case 14: //VCVT (between floating-point and fixed-point, Advanced SIMD) //A8-580 //NEEDTODO
              case 15:
                OOPS("WARNING: VCVT (between fp and fixed-point, Advanced SIMD) is NOT IMPLEMENTED.\n");
                break;
              default:
                OOPS("WARNING: Instruction is UNDEFINED in 2reg and a shift amount space.\n");
                break;
            }
          } //end 2 registers and a shift amount
          else if(!b6 && !b4) { //3 registers of different lengths //A7-15
            uint8_t a_3regdifflen = (insn >> 8) & 0xF;
            uint32_t round = 1 << ((8 << size) - 1);

            switch(a_3regdifflen) {
              case 0: //VADDL/VADDW //A8-542
              case 1:
                if(b8) { //VADDW
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 24, LREG_TMP7, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN, 0, 32, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN, 0, 32, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                      }
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, QN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, QN1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                      }
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, QN, LREG_TMP1, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, QN1, LREG_TMP1, 0, QD1, 0, 0, 0);
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, QN, LREG_TMP1, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, QN1, LREG_TMP1, 0, QD1, 0, 0, 0);
                      }
                      break;
                    default: //shouldn't happen
                      break;
                  } 
                }
                else { //VADDL
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 24, LREG_TMP7, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF00, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP7, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 24, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF00, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF00, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP7, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF00, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      }
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF00, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, VN, 0, 16, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM, 0, 16, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      }
                      break;
                    case 2: //32-bits
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      }
                      break;
                    default: //shouldn't happen
                      break;
                  } 
                }
                break;
              case 2: //VSUBL/VSUBW //A8-794
              case 3:
                if(b8) { //VSUBW
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 24, LREG_TMP7, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN, 0, 32, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN, 0, 32, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                      }
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, QN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, QN1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                      }
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, QN, LREG_TMP1, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, QN1, LREG_TMP1, 0, QD1, 0, 0, 0);
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, QN, LREG_TMP1, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, QN1, LREG_TMP1, 0, QD1, 0, 0, 0);
                      }
                      break;
                    default: //shouldn't happen
                      break;
                  } 
                }
                else { //VSUBL
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 24, LREG_TMP7, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF00, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP7, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 24, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF00, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF00, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP7, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF00, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      }
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF00, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, VN, 0, 16, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM, 0, 16, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      }
                      break;
                    case 2: //32-bits
                      if(b24) { //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      }
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      }
                      break;
                    default: //shouldn't happen
                      break;
                  } 
                }
                break;
              case 4:
                if(!b24) { //VADDHN //A8-540
                  switch(size) {
                    case 0: //16-bit elements narrowed down to 8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 

                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 0

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0); //Byte 1
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 2
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 3
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 4
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF0000), LREG_TMP3, 0, 0, 0); //Byte 5
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 8, LREG_TMP3, 0, 0, 0); //Byte 6
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0); //Byte 7
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                      break;
                    case 1: //32-bit elements narrowed down to 16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 

                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 0

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0); //Halfword 1
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 2
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0); //Halfword 1
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                      break;
                    case 2: //64-bit elements narrowed down to 32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //Word 1
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                      break;
                    default: //shouldn't happen
                      break;
                  }
                }
                else { //VRADDHN //A8-726
                  switch(size) {
                    case 0: //16-bit elements narrowed down to 8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 5, 24, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, 0, round, LREG_TMP1, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP2, 0, round, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 0

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0); //Byte 1
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 2
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 3
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 4
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0); //Byte 5
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 8, LREG_TMP3, 0, 0, 0); //Byte 6
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0); //Byte 7
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                      break;
                    case 1: //32-bit elements narrowed down to 16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, 0, round, LREG_TMP1, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP2, 0, round, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 0

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0); //Halfword 1
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 2
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0); //Halfword 1
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                      break;
                    case 2: //64-bit elements narrowed down to 32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, round, LREG_TMP1, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP2, 0, round, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //Word 1
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                      break;
                    }
                }
                break;
              case 5: //VABAL //A8-526 //Encoding A2
                  //OOPS("WARNING: VABAL is NOT IMPLEMENTED.\n");
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1U<<4) | (b24<<3) | (0<<2) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD1, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VABA, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                  // pop LREG_R0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, QD, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, QD1, 0, 0, 0);
                break;
              case 6:
                if(!b24) { //VSUBHN //A8-792
                  switch(size) {
                    case 0: //16-bit elements narrowed down to 8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 

                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 0

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0); //Byte 1
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 2
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 3
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 4
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0); //Byte 5
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 8, LREG_TMP3, 0, 0, 0); //Byte 6
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0); //Byte 7
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                      break;
                    case 1: //32-bit elements narrowed down to 16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 

                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 0

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0); //Halfword 1
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 2
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0); //Halfword 1
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                      break;
                    case 2: //64-bit elements narrowed down to 32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //Word 1
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                      break;
                    default: //shouldn't happen
                      break;
                  }
                }
                else { //VRSUBHN //A8-748
                  switch(size) {
                    case 0: //16-bit elements narrowed down to 8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, 0, round, LREG_TMP1, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, round, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 0

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0); //Byte 1
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 2
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 3
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 4
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0); //Byte 5
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 8, LREG_TMP3, 0, 0, 0); //Byte 6
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0); //Byte 7
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                      break;
                    case 1: //32-bit elements narrowed down to 16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, round, LREG_TMP1, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, round, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 0

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0); //Halfword 1
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 2
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0); //Halfword 1
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                      break;
                    case 2: //64-bit elements narrowed down to 32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, round, LREG_TMP1, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP2, 0, round, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //Word 1
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                      break;
                    }
                }
                break;
              case 7: //VABDL (integer) //A8-528
                  //OOPS("WARNING: VABDL is NOT IMPLEMENTED.\n");
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1U<<4) | (b24<<3) | (0<<2) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VABD, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                  // pop LREG_R0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, QD, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, QD1, 0, 0, 0);
                break;
              case 8: //VMLAL/VMLSL (integer) //A8-634 //Encoding A2
              case 10:
                if(!b9) { //VMLAL
                  if(b24) { //Unsigned
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, QD1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                        break;
                    }
                  }
                  else { //Signed
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, QD1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                        break;
                    }
                  }
                }
                else { //VMLSL
                  if(b24) { //Unsigned
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, QD1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                        break;
                    }
                  }
                  else { //Signed
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, QD1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                        break;
                    }
                  }
                }
                break;
              case 9:
              case 11:
                if(!b24) { //VQDMLAL/VQDMLSL //A8-702
                  //OOPS("WARNING: VQDMLAL/VQDMLSL is NOT IMPLEMENTED.\n");
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((0<<5) | (0<<4) | (b9<<3) | (0<<2) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD1, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQDMLAL_SL, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, QD, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, QD1, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                }
                break;
              case 12: //VMULL (integer) //A8-662 //Encoding A2
                if(b24) { //Unsigned
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, QD1, 0, 0, 0);  
                      break;
                  }
                }
                else { //Signed
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, QD1, 0, 0, 0);  
                      break;
                  }
                }
                break;
              case 13:
                if(!b24) { //VQDMULL //A8-706 //Encoding A1
                  switch(size) {
                    case 1:
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP2, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  

                      //Q-flag
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                      //Q-flag
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP6, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP2, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  

                      //Q-flag
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP6, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                      //Q-flag
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP6, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0); //FP Q Flag
                      CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, QD1, 0, 0, 0);
                      break;
                    case 2:
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SADD, LREG_TMP2, LREG_TMP2, 0, QD, 0, 0, 0);  

                      //Q-flag
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, QD, 0, 0, LREG_TMP5, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, QD1, 0, 0, 0);  

                      //Q-flag
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, QD1, 0, 0, LREG_TMP6, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0); //FP Q Flag
                      CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      break;
                    default:
                      OOPS("VDQMULL Encoding A1 is UNDEFINED with this size.\n");
                      break;
                  }
                }
                break;
              case 14: //VMULL (polynomial) //A8-662 //Encoding A2
                if(size == 0) {
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 12, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD1, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VMULPOLY, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);

                  // pop LREG_R0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, QD, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, QD1, 0, 0, 0);
                }
                break;
              default:
                OOPS("WARNING: Instruction is UNDEFINED in 3reg of different length space.\n");
                break;
            }
          }
          else if(b6 && !b4) { //2 registers and a scalar //A7-16
            uint8_t a_2regscalar = (insn >> 8) & 0xF;
            uint8_t size = (insn>>20) & 0x3;
            uint8_t index = 0xFF; //force initialization
            
            switch(a_2regscalar) {
              case 0: //VMLA/VMLS (by scalar) //A8-638 //Encoding A1
              case 1:
              case 4:
              case 5:
                VM = (insn & 0x7) + LREG_FP0;
                index = (b5<<1) | b3;

                if(!b10) { //VMLA
                  if(b8) { //fp
                    if(size == 1) { //16-bits
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                      if(b24) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD1, 0, 0, 0);  
                      }
                    }
                    else { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      if(!b5)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b24) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    }
                  }
                  else {
                    if(size == 1) { //16-bits
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                      if(b24) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                      }
                    }
                    else { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(!b5)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                      if(b24) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                      }
                    }
                  }
                }
                else { //VMLS
                  if(b8) { //fp
                    if(size == 1) { //16-bits
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                      if(b24) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD1, 0, 0, 0);  
                      }
                    }
                    else { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      if(!b5)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b24) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    }
                  }
                  else {
                    if(size == 1) { //16-bits
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                      if(b24) { 
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                      }
                    }
                    else { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(!b5)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                      if(b24) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0,  LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                      }
                    }
                  }
                }
                break;
              case 2: //Vector Multiply Accumulate or Sub VMLAL/VMLSL (by scalar) //A8-638 //Encoding A2
              case 6:
                VM = (insn & 0x7) + LREG_FP0;
                index = (b5<<1) | b3;

                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                if(b24) { //Unsigned
                  if(!b10) { //VMLA
                    if(size == 1) { //16-bits
                      index = (b5<<1) | b3;
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                    }
                    else { //32-bits
                      if(!b5)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                    }
                  }
                  else { //VMLS
                    if(size == 1) { //16-bits
                      index = (b5<<1) | b3;
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                    }
                    else { //32-bits
                      if(!b5)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                    }
                  }
                }
                else { //Signed
                  if(!b10) { //VMLA
                    if(size == 1) { //16-bits
                      index = (b5<<1) | b3;
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                    }
                    else { //32-bits
                      if(!b5)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                    }
                  }
                  else { //VMLS
                    if(size == 1) { //16-bits
                      index = (b5<<1) | b3;
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                    }
                    else { //32-bits
                      if(!b5)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                    }
                  }
                }
                break;
              case 3:
              case 7:
                if(!b24) { //VQDMLAL/VQDMLSL //A8-702 //Encoding A2
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  if(size == 1) {
                    VM     = (insn & 0x7) + LREG_FP0;
                    index  = (b5 << 1) | b3;
                  }
                  else if(size == 2)
                    index  = b5;

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((index<<5) | (1<<4) | (b10<<3) | (0<<2) | size), 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD1, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQDMLAL_SL, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, QD, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, QD1, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                }
                break;
              case 8: //VMUL (by scalar) //A8-666
              case 9:
                VM = (insn & 0x7) + LREG_FP0;
                index = (b5<<1) | b3;

                if(b8) { //fp
                  if(size == 1) { //16-bits
                    switch(index) {
                      case 0: //1st halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1: //2nd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2: //3rd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3: //4th halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                    if(b24) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD1, 0, 0, 0);  
                    }
                  }
                  else { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                    if(!b5)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                    if(b24) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                    }
                  }
                }
                else {
                  if(size == 1) { //16-bits
                    switch(index) {
                      case 0: //1st halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1: //2nd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2: //3rd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3: //4th halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                    if(b24) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD1, 0, 0, 0);  
                    }
                  }
                  else { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                    if(!b5)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                    if(b24) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                    }
                  }
                }
                break;
              case 10: //VMULL (by scalar) //A8-666
                VM = (insn & 0x7) + LREG_FP0;
                index = (b5<<1) | b3;

                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                if(b24) { //Unsigned
                  if(size == 1) { //16-bits
                    switch(index) {
                      case 0: //1st halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1: //2nd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2: //3rd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3: //4th halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);  
                  }
                  else { //32-bits
                    if(!b5)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, QD1, 0, 0, 0);  
                  }
                }
                else { //Signed
                  if(size == 1) { //16-bits
                    switch(index) {
                      case 0: //1st halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1: //2nd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2: //3rd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3: //4th halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);  
                  }
                  else { //32-bits
                    if(!b5)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, QD1, 0, 0, 0);  
                  }
                }
                break;
              case 11: //VQDMULL //A8-706 //Encoding A2
                switch(size) {
                  case 1:
                    VM = VM & 0x7;
                    index = (b5 << 1) | b3;

                    switch(index) {
                      case 0:
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                    //Q-flag
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP5, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP4, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                    //Q-flag
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, QD, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                    //Q-flag
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP4, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                    //Q-flag
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0); //FP Q Flag
                    CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, QD1, 0, 0, 0);
                    break;
                  case 2:
                    VM = VM & 0xF;

                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                    if(!b5)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SADD, LREG_TMP3, LREG_TMP3, 0, QD, 0, 0, 0);  

                    //Q-flag
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, QD, 0, 0, LREG_TMP5, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, QD1, 0, 0, 0);  

                    //Q-flag
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, QD1, 0, 0, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0); //FP Q Flag
                    CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                    break;
                  default:
                    OOPS("VDQMULL Encoding A2 is UNDEFINED with this size.\n");
                    break;
                }
                break;
              case 12: //VQDMULH //A8-704 //Encoding A2
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  if(size == 1) {
                    VM     = (insn & 0x7) + LREG_FP0;
                    index  = (b5 << 1) | b3;
                  }
                  else if(size == 2)
                    index  = b5;

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b24) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((index<<5) | (1<<4) | (0<<3) | (b24<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((index<<5) | (1<<4) | (0<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQDMULH, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b24) {
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                  }
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                  if(b24)
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                break;
              case 13: //VQRDMULH //A8-712 //Encoding A2
                  //OOPS("WARNING: VQRDMULH is NOT IMPLEMENTED.\n");
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  if(size == 1) {
                    VM     = (insn & 0x7) + LREG_FP0;
                    index  = (b5 << 1) | b3;
                  }
                  else if(size == 2)
                    index  = b5;

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b24) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((index<<5) | (1<<4) | (1<<3) | (b24<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((index<<5) | (1<<4) | (1<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQDMULH, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b24) {
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                  }
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                  if(b24)
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                break;
              default:
                OOPS("WARNING: Instruction is UNDEFINED in 2reg and a scalar space.\n");
                break;
            }
          }
          else if(!b24 && b23 && b21 && b20 && !b4) { //VEXT A8-598
            uint32_t IMM4 = (insn>>8) & 0xF;

            //IF IMM4 > 7 && b6==0, UNDEFINED
            //IF b6 && ((VD | VN | VM) & 1), UNDEFINED

            if(IMM4 == 0) {
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, VN, 0, 0, VD, 0, 0, 0);   //FIXME: RAT/ROB move?
              
              if(b6)
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN1, 0, 0, QD1, 0, 0, 0); //FIXME: RAT/ROB move?
            }
            else if((IMM4 == 8) && b6) { //if (IMM4 > 7) && !b6, UNDEFINED
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN1, 0, 0, QD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM, 0, 0, QD1, 0, 0, 0);
            }
            else if(b6) {
              if(IMM4 < 8) {
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN, 0, (IMM4&7)*8, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 64-((IMM4&7)*8), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, QM, 0, 64-(IMM4*8), LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN1, 0, IMM4*8, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN1, 0, (IMM4&7)*8, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, QM, 0, 64-((IMM4&7)*8), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, QM1, 0, 64-((IMM4-8)*8), LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, (IMM4-8)*8, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
              }
            }
            else { // 0 < IMM4 < 8
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, (IMM4*8), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 64-(IMM4*8), LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
            }
          }
          else if(b24 && b23 && b21 && b20 && !b4) {
            if(!b11) { //Two registers, miscellaneous //A7-19
              uint8_t a_2regmisc = (insn >> 16) & 0x3;
              uint8_t b_2regmisc = (insn >> 6) & 0x1F;
              uint8_t size = (insn>>18) & 0x3;
              uint8_t op = (insn>>7) & 0x3;

              switch(a_2regmisc) {
                case 0:
                  switch(b_2regmisc) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                      //VREV16/32/64 in halfwords/words/doublewords //A8-732
                      switch(op) {
                        case 0: //by doubleword
                          switch(size) { 
                            case 0: //8-bits
                              CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM, 0, 8, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_ROTR, LREG_TMP1, 0, 32, QD, 0, 0, 0);  

                              if(b6) {
                                CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM1, 0, 8, LREG_TMP1, 0, 0, 0);  
                                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  
                                CrackInst::setup(rinst, iAALU, OP_S64_ROTR, LREG_TMP1, 0, 32, QD1, 0, 0, 0);  
                              }
                              break;
                            case 1: //16-bits
                              CrackInst::setup(rinst, iAALU, OP_S32_ROTR, VM, 0, 16, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_ROTR, LREG_TMP1, 0, 32, QD, 0, 0, 0);  

                              if(b6) {
                                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, VM1, 0, 16, LREG_TMP1, 0, 0, 0);  
                                CrackInst::setup(rinst, iAALU, OP_S64_ROTR, LREG_TMP1, 0, 32, QD1, 0, 0, 0);  
                              }
                              break;
                            case 2: //32-bits
                              CrackInst::setup(rinst, iAALU, OP_S64_ROTR, VM, 0, 32, QD, 0, 0, 0);  

                              if(b6)
                                CrackInst::setup(rinst, iAALU, OP_S64_ROTR, VM1, 0, 32, QD1, 0, 0, 0);  
                              break;
                          }
                          break;
                        case 1: //by word
                          switch(size) { 
                            case 0: //8-bits
                              CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM, 0, 8, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, QD, 0, 0, 0);  

                              if(b6) {
                                CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM1, 0, 8, LREG_TMP1, 0, 0, 0);  
                                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, QD1, 0, 0, 0);  
                              }
                              break;
                            case 1: //16-bits
                              CrackInst::setup(rinst, iAALU, OP_S32_ROTR, VM, 0, 16, QD, 0, 0, 0);  

                              if(b6)
                                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, VM1, 0, 16, QD1, 0, 0, 0);  
                              break;
                          }
                          break;
                        case 2: //by halfword
                          CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM, 0, 8, QD, 0, 0, 0);  

                          if(b6)
                            CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM1, 0, 8, QD1, 0, 0, 0);  
                          break;
                      }
                      break;
                    case 8: //VPADDL //A8-688
                    case 9:
                    case 10:
                    case 11:
                      switch(size) {
                        case 0: //8-bits
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                          }
                          break;
                        case 1: //16-bits
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 2: //32-bits
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                      }
                      break;
                    case 16: //VCLS //A8-566
                    case 17:
                      // push r0 (it will have SYSMEM for the syscall (arg1), r7
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b6<<2) | size), 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                      }
                      else 
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, size, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VCLS, 8, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                      if(b6)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                      // pop r0, r7
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                      if(b6)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                      break;
                    case 18: //VCLZ //A8-570
                    case 19:
                      //OOPS("WARNING: VCLZ is NOT IMPLEMENTED.\n");
                      // push r0 (it will have SYSMEM for the syscall (arg1), r7
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b6<<2) | size), 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                      }
                      else 
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, size, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VCLZ, 8, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                      if(b6)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                      // pop r0, r7
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                      if(b6)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                      break;
                    case 20: //VCNT //A8-574
                    case 21:
                      // push r0 (it will have SYSMEM for the syscall (arg1), r7
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b6<<2) | size), 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                      }
                      else 
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, size, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VCNT, 8, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                      if(b6)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                      // pop r0, r7
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                      if(b6)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                      break;
                    case 22: //VMVN (register) //A8-670
                    case 23:
                      //Size of the elements does not matter
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, VM, LREG_TMP1, 0, VD, 0, 0, 0);  

                      if(b6)
                        CrackInst::setup(rinst, iAALU, OP_S64_XOR, VM1, LREG_TMP1, 0, VD1, 0, 0, 0);  
                      break;
                    case 24: //VPADAL //A8-682
                    case 25:
                    case 26:
                    case 27:
                      switch(size) {
                        case 0: //8-bits
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 1: //16-bits
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 2: //32-bits
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                          }
                          break;
                      }
                      break;
                    case 28: //VQABS //A8-698
                    case 29:
                      // push r0 (it will have SYSMEM for the syscall (arg1), r7
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<3) | (b6<<2) | size), 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                      }
                      else 
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<3) | size), 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VABS, 8, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                      }
                      else 
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                      // pop r0, r7
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                      if(b6)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                      CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      break;
                    case 30: //VQNEG //A8-710
                    case 31:
                      switch(size) {
                        case 0: //8-bits
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          if(!b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          }
                          break;
                        case 1: //16-bits
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          if(!b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          }
                          break;
                        case 2: //32-bits
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          if(!b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          }
                          break;
                      }
                      break;
                    default:
                        OOPS("Warning: Instruction is UNDEFINED in 2reg,miscellaneous case 0 space.\n");
                      break;
                  }
                  break;
                case 1:
                  switch(b_2regmisc) {
                    case 0: //VCGT (immediate #0) //A8-562
                    case 1:
                    case 16:
                    case 17:
                      switch(size) { 
                        case 0: //8-bit
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 1: //16-bit
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 2: //32-bit
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                          if(b10) { //fp
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b6) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b6) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          }
                          break;
                      }
                      break;
                    case 2: //VCGE (immediate #0) //A8-558
                    case 3:
                    case 18:
                    case 19:
                      switch(size) { 
                        case 0: //8-bit
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 1: //16-bit
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 2: //32-bit
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                          if(b10) { //fp
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b6) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b6) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          }
                          break;
                      }
                      break;
                    case 4: //VCEQ (immediate #0) //A8-554
                    case 5:
                    case 20:
                    case 21:
                      switch(size) { 
                        case 0: //8-bit
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 1: //16-bit
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 2: //32-bit
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                          if(b10) { //fp
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b6) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b6) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          }
                          break;
                      }
                      break;
                    case 6: //VCLE (immediate #0) //A8-564
                    case 7:
                    case 22:
                    case 23:
                      switch(size) { 
                        case 0: //8-bit
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 1: //16-bit
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 2: //32-bit
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                          if(b10) { //fp
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP1, 0, LREG_R0, 0, 0, 1);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b6) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP1, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b6) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          }
                          break;
                      }
                      break;
                    case 8:  //VCLT (immediate #0) //A8-568
                    case 9:
                    case 24:
                    case 25:
                      switch(size) { 
                        case 0: //8-bit
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 1: //16-bit
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                          break;
                        case 2: //32-bit
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                          if(b10) { //fp
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP1, 0, LREG_R0, 0, 0, 1);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b6) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP1, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b6) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          }
                          break;
                      }
                      break;
                    case 12: //VABS //A8-532  //Encoding A1
                    case 13:
                    case 28:
                    case 29:
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      if(b10) { //fp
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                        }
                      }
                      else {
                        // push r0 (it will have SYSMEM for the syscall (arg1), r7
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                        if(b6) {
                          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b6<<2) | size), 0, 0, 0, 0);
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                        }
                        else 
                          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, size, 0, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VABS, 8, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                        if(b6)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                        // pop r0, r7
                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                        if(b6)
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                      }
                      break;
                    case 14: //VNEG //A8-672 //Encoding A1
                    case 15:
                    case 30:
                    case 31:
                      switch(size) { 
                        case 0: //8-bits
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM, 0, 0, VD, 0, 0, 0);  

                          if(b6) 
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, VD1, 0, 0, 0);  
                          break;
                        case 1: //16-bits
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, VD, 0, 0, 0);  

                          if(b6) 
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, VD1, 0, 0, 0);  
                          break;
                        case 2: //32-bits
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                          if(b10) { //fp
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b6) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, VD, 0, 0, 0);  

                            if(b6) 
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, VD1, 0, 0, 0);  
                          }
                          break;
                      }
                      break;
                    default:
                      OOPS("WARNING: Instruction is UNDEFINED in 2reg,miscellaneous case 1 space.\n");
                      break;
                  }
                  break;
                case 2:
                  switch(b_2regmisc) {
                    case 0: //VSWP //A8-796
                    case 1:
                      //If VD == VM, then UNKNOWN
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, 0, VD, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VM, 0, 0, 0);  

                      if(b6) {
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, VD1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, 0, VD1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VM1, 0, 0, 0);  
                      }
                      break;
                    case 2: //VTRN //A8-800
                    case 3:
                      switch(size) {
                        case 0: //8-bit
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0x00FF00FF), LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF00FF00), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 8, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VM, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VM1, 0, 0, 0);  
                          }
                          break;
                        case 1: //16-bit
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VM, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VM1, 0, 0, 0);  
                          }
                          break;
                        case 2: //32-bit
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VM, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP1, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VM1, 0, 0, 0);  
                          }
                          break;
                      }
                      break;
                    case 4: //VUZP //A8-804
                    case 5:
                      switch(size) {
                        case 0: //8-bit
                          if(!b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VM, 0, 0, 0);  
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM, 0, 0xFF, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QD1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, QM, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, QM1, 0, 0, 0);  
                          }
                          break;
                        case 1: //16-bit
                          if(!b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VM, 0, 0, 0);  
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM, 0, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QD1, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, QM, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, QM1, 0, 0, 0);  
                          }
                          break;
                        case 2: //32-bit
                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QD1, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, QM, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, QM1, 0, 0, 0);  
                          }
                          break;
                      }
                      break;
                    case 6: //VZIP //A8-806
                    case 7:
                      switch(size) {
                        case 0: //8-bit
                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, VD, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VM, 0, 0, 0);  
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 16, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 48, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, QD1, 0, 0, LREG_TMP5, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QM, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QM1, 0, 0, 0);  
                          }
                          break;
                        case 1: //16-bit
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 16, LREG_TMP7, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VM, 0, 0, 0);  
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, QD1, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QD1, 0, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QM, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, LREG_TMP7, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QM1, 0, 0, 0);  
                          }
                          break;
                        case 2: //32-bit
                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP7, 0, 32, LREG_TMP7, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QD1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QM, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, QD1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, QM1, 0, 0, 0);  
                          }
                          break;
                      }
                      break;
                    case 8: //VMOVN //A8-656
                      switch(size) {
                        case 0: //8-bits
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                          break;
                        case 1: //16-bits
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                          break;
                        case 2: //32-bits
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                          break;

                      }
                      break;
                    case 9: //VQMOVUN //A8-708
                    case 10: //VQMOVN //A8-708
                    case 11:
                      // push r0 (it will have SYSMEM for the syscall (arg1), r7
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QM, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b6<<3) | (b7<<2) | size), 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QM1, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VQMOVN, 8, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 20, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag

                      // pop r0, r7
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                      CrackInst::setup(rinst, iLALU_LD, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      break;
                    case 12: //VSHLL //A8-754 //Encoding A2
                      switch(size) {
                        case 0: //8-bits
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF0000, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 40, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                          break;
                        case 1: //16-bits
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                          break;
                        case 2: //32-bits
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF;
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, QD, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, QD1, 0, 0, 0);
                          break;
                      }
                      break;
                    case 24: //VCVT (between half-precision and single-precision, Advanced SIMD) //A8-586 //NEEDTODO
                    case 28:
                      OOPS("WARNING: VCVT (between 1/2-precision and single-precision, Advanced SIMD)  is NOT IMPLEMENTED.\n");
                      break;
                    default:
                        OOPS("WARNING: Instruction is UNDEFINED in 2reg,miscellaneous case 2 space.\n");
                      break;
                  }
                  break;
                case 3:
                  switch(b_2regmisc) {
                    case 16: //VRECPE //A8-728
                    case 17:
                    case 20:
                    case 21:
                      //FIXME: need to do ERROR checking

                      if(size == 2) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                        if(!b8) { //int
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                          //f64
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          //reciprocal estimate algorithm from QEMU and ARM Architecture Reference Manual
                          //q = (int)(a * 512.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                          //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                          //0.5
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                          //s = (int)(256.0 * r + 0.5)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          //0.5
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                          //return double(s) / 256.0
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 21, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFFFF, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 28, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP7, 0, LREG_TMP8, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP8, 0, LREG_TMP8, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                          //f64
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          //reciprocal estimate algorithm from QEMU and ARM Architecture Reference Manual
                          //q = (int)(a * 512.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                          //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                          //0.5
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                          //s = (int)(256.0 * r + 0.5)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          //0.5
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                          //return double(s) / 256.0
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 21, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFFFF, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 28, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP8, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            //reciprocal estimate algorithm from QEMU and ARM Architecture Reference Manual
                            //q = (int)(a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //s = (int)(256.0 * r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 21, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFFFF, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 28, LREG_TMP7, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP7, 0, LREG_TMP8, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP8, 0, LREG_TMP8, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            //reciprocal estimate algorithm from QEMU and ARM Architecture Reference Manual
                            //q = (int)(a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //s = (int)(256.0 * r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 21, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFFFF, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 28, LREG_TMP7, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP8, 0, VD1, 0, 0, 0);  
                          }
                        } //end int
                        else { //fp
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                          //f64
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 29, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          //a-exp
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);  

                          //result exp
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 253, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  

                          //reciprocal estimate algorithm from QEMU and ARM ARM
                          //q = (int)(a * 512.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                          //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                          //0.5
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                          //s = (int)(256.0 * r + 0.5)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          //0.5
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                          //return double(s) / 256.0
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                          //sign
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 31, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 23, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 29, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFF, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP8, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                          //f64
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 29, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          //a-exp
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);  

                          //result exp
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 253, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  

                          //reciprocal estimate algorithm from QEMU and ARM ARM
                          //q = (int)(a * 512.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                          //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                          //0.5
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                          //s = (int)(256.0 * r + 0.5)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          //0.5
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                          //return double(s) / 256.0
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                          //sign
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 31, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 23, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 29, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFF, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 32, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP7, LREG_TMP8, 0, VD, 0, 0, 0);  

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 29, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            //a-exp
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);  

                            //result exp
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 253, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  

                            //reciprocal estimate algorithm from QEMU and ARM ARM
                            //q = (int)(a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //s = (int)(256.0 * r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                            //sign
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 31, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 23, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 29, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFF, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP8, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 29, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            //a-exp
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);  

                            //result exp
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 253, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  

                            //reciprocal estimate algorithm from QEMU and ARM ARM
                            //q = (int)(a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //s = (int)(256.0 * r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                            //sign
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 31, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 23, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 29, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFF, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 32, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP7, LREG_TMP8, 0, VD1, 0, 0, 0);  
                          }
                        } //end fp
                      }
                      break;
                    case 18: //VRSQRTE //A8-742
                    case 19:
                    case 22:
                    case 23:
                      //FIXME: need to do ERROR checking

                      if(size == 2) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                        //reciprocal square root estimate algorithm taken from QEMU and ARM Architecture Reference Manual
                        if(!b8) { //int
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x3FFFFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 52, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 28, LREG_TMP5, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                          //0.5
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                          //if(0.25 <= val < 0.5)
                          //q = (int) (a * 512.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                          //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                          //else
                          //q = (int) (a * 256.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                          //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                          //s= (int)(256.0*r + 0.5)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                          //return double(s) / 256.0
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0x8, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0xC, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x3FFFFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 52, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 28, LREG_TMP5, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                          //if(0.25 <= val < 0.5)
                          //q = (int) (a * 512.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                          //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                          //else
                          //q = (int) (a * 256.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                          //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                          //s= (int)(256.0*r + 0.5)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                          //return double(s) / 256.0
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0x8, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP5, 0, 0, 0); //FIXME: RAT/ROB move?
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0xC, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP3, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP2, 0, VD, 0, 0, 0);  
                          
                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x3FFFFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 52, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 28, LREG_TMP5, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                            //if(0.25 <= val < 0.5)
                            //q = (int) (a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            //else
                            //q = (int) (a * 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                            //s= (int)(256.0*r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0x8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0xC, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x3FFFFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 52, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 28, LREG_TMP5, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            //if(0.25 <= val < 0.5)
                            //q = (int) (a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            //else
                            //q = (int) (a * 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                            //s= (int)(256.0*r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0x8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP5, 0, 0, 0); //FIXME: RAT/ROB move?
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0xC, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP3, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end int
                        else { //fp
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                          //f64
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 60, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 29, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 28, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  

                          //result exp
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 380, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_DIV, OP_C_UDIV, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);

                          //0.5
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                          //if(0.25 <= val < 0.5)
                          //q = (int) (a * 512.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                          //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                          //else
                          //q = (int) (a * 256.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                          //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                          //s= (int)(256.0*r + 0.5)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                          //return double(s) / 256.0
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 29, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFF, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP7, 0, 0, 0);
                          
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                          //f64
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 60, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 29, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 28, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  

                          //result exp
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 380, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_DIV, OP_C_UDIV, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);

                          //0.5
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0); //FIXME:RAT/ROB move?

                          //if(0.25 <= val < 0.5)
                          //q = (int) (a * 512.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                          //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                          //else
                          //q = (int) (a * 256.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                          //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                          //s= (int)(256.0*r + 0.5)
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                          //return double(s) / 256.0
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 29, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFF, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                          
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD, 0, 0, 0);

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 60, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 29, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 28, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  

                            //result exp
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 380, LREG_TMP5, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iCALU_DIV, OP_C_UDIV, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);

                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                            //if(0.25 <= val < 0.5)
                            //q = (int) (a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            //else
                            //q = (int) (a * 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                            //s= (int)(256.0*r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 29, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFF, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP7, 0, 0, 0);
                            
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 60, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 29, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 28, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  

                            //result exp
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 380, LREG_TMP5, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iCALU_DIV, OP_C_UDIV, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);

                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0); //FIXME:RAT/ROB move?

                            //if(0.25 <= val < 0.5)
                            //q = (int) (a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            //else
                            //q = (int) (a * 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                            //s= (int)(256.0*r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 29, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFF, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                            
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD1, 0, 0, 0);
                          }
                        } //end fp
                      }
                      break;
                    case 24: //VCVT (between floating-point and integer, Advanced SIMD) //A8-576
                    case 25:
                    case 26:
                    case 27:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                      //OOPS("WARNING: VCVT (between FP and INT, Advanced SIMD)  is NOT IMPLEMENTED.\n");
                      //FIXME: un/signed conversions
                      //FIXME: round to zero vs round to nearest;
                      //FIXME: exceptions

                      VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;
                      VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;

                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF;

                      if(b8) { //to int
                        //round to zero
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                        if(b7) //unsigned
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                        else //signed
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);

                        if(b7) //unsigned
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                        else //signed
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD, 0, 0, 0);

                        if(b6) {
                          //round to zero
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                          if(b7) //unsigned
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                          else //signed
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);

                          if(b7) //unsigned
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                          else //signed
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD1, 0, 0, 0);
                        }
                      }
                      else { //to FP
                        //round to nearest
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                        if(b7) //unsigned
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                        else //signed
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);

                        if(b7) //unsigned
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                        else //signed
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD, 0, 0, 0);

                        if(b6) {
                          //round to zero
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                          if(b7) //unsigned
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                          else //signed
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);

                          if(b7) //unsigned
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                          else //signed
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD1, 0, 0, 0);
                        }
                      }
                      break;
                    default:
                        OOPS("WARNING: Instruction is UNDEFINED in 2reg,miscellaneous case 3 space.\n");
                      break;
                  }
                  break;
              }
            }
            else if(!b10) { //VTBL/VTBX //A8-798
              uint8_t len = (insn>>8) & 0x3;
              uint8_t VN2 = VN1+1;
              uint8_t VN3 = VN2+1;

              switch(len) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);

                  if(!b6) //VTBL zeroes out by if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                  else { //VTBLX leaves byte in VD unchanged if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 3, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);

                  for(int i = 1; i < 7; i++) {
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, i*8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);

                    if(!b6) //VTBL zeroes out by if out of range
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    else { //VTBLX leaves byte in VD unchanged if out of range
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, i, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 3, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, i*8, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);

                  if(!b6) //VTBL zeroes out by if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                  else { //VTBLX leaves byte in VD unchanged if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 7, LREG_TMP1, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 3, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, VD, 0, 0, 0);
                  break;
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                  if(!b6) //VTBL zeroes out by if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                  else { //VTBLX leaves byte in VD unchanged if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);

                  for(int i = 1; i < 7; i++) {
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, i*8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    if(!b6) //VTBL zeroes out by if out of range
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    else { //VTBLX leaves byte in VD unchanged if out of range
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, i, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, i*8, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                  if(!b6) //VTBL zeroes out by if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                  else { //VTBLX leaves byte in VD unchanged if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 7, LREG_TMP1, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP5, 0, VD, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN2, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                  if(!b6) //VTBL zeroes out by if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                  else { //VTBLX leaves byte in VD unchanged if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);

                  for(int i = 1; i < 7; i++) {
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, i*8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN2, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    if(!b6) //VTBL zeroes out by if out of range
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    else { //VTBLX leaves byte in VD unchanged if out of range
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, 0, i, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, i*8, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN2, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                  if(!b6) //VTBL zeroes out by if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                  else { //VTBLX leaves byte in VD unchanged if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 7, LREG_TMP1, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, VD, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN2, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN3, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 32, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                  if(!b6) //VTBL zeroes out by if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                  else { //VTBLX leaves byte in VD unchanged if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);

                  for(int i = 1; i < 7; i++) {
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, i*8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN2, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN3, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 32, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    if(!b6) //VTBL zeroes out by if out of range
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    else { //VTBLX leaves byte in VD unchanged if out of range
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, i, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, i*8, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN2, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN3, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 32, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                  if(!b6) //VTBL zeroes out by if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                  else { //VTBLX leaves byte in VD unchanged if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 7, LREG_TMP1, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, VD, 0, 0, 0);
                  break;
              }
            }
            else if(!b9 && !b8 && !b7) { //VDUP(scalar) //A8-592
              uint8_t index;

              if(b16) { //8-bits
                index = (insn>>1) & 0x7;

                switch(index) {
                  case 0:
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                    break;
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                    break;
                  case 4:
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                    break;
                  case 5:
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                    break;
                  case 6:
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                    break;
                  case 7:
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);  
                    break;
                }

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                if(b6) {
                  switch(index) {
                    case 0:
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      break;
                    case 1:
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      break;
                    case 2:
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      break;
                    case 3:
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      break;
                    case 4:
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      break;
                    case 5:
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      break;
                    case 6:
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      break;
                    case 7:
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP1, 0, 0, 0);  
                      break;
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                }
              }
              else if(b17) { //16-bits
                index = (insn>>2) & 0x3;

                switch(index) {
                  case 0:
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    break;
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP1, 0, 0, 0);  
                    break;
                }

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                if(b6) {
                  switch(index) {
                    case 0:
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      break;
                    case 1:
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      break;
                    case 2:
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      break;
                    case 3:
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP1, 0, 0, 0);  
                      break;
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                }
              }
              else if(b18) { //32-bits
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                if(!b19)
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                else 
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                if(b6) {
                  if(!b19)
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                }
              }
            } //end VDUP (scalar)
          }
        }
        break;
      case 1:
        if(!imm && !b24 && !b20) { //Advanced SIMD data-processing instructions //A7-27
          //OOPS("WARNING: Unconditional Advanced SIMD data-processing instructions are ignored for now.\n");
          uint8_t b_vector_ldst = (insn >> 8) & 0x1F;

          if(!b21) { //vector stores
            uint8_t size;
            uint8_t type;
            uint8_t index;
            uint8_t index_align;
            uint8_t writeback;
            uint8_t reg_index;
            uint8_t inc = 0xFF; //force initialization;
            uint8_t regs = 0xFF; //force initialization
            uint8_t i, j, k = 0xFF; //force initializaiton

            uint8_t VD2, VD3, VD4;

            if(!b23) {
              switch(b_vector_ldst) {
                case 0: //VST4 (multiple 4-element structures) //A8-768
                case 1:
                case 10:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>6) & 0x3;
                  type = (insn>>8) & 0xF;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;
                    
                  switch(type) {
                    case 4:
                      inc = 1;
                      break;
                    case 5:
                      inc = 2;
                      break;
                  }

                  VD2 = VD + inc;
                  VD3 = VD2 + inc;
                  VD4 = VD3 + inc;

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                  switch(size) {
                    case 0: //8-bits
                      for(i = 0; i < 8; i++) {
                        j = i;

                        if(!i) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                          if(i != 7)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                          if(i != 7)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                          if(i != 7)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD4+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                          if(i != 7)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                          if(++k < 8)
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        }
                      }
                      break;
                    case 1: //16-bits
                      for(i = 0; i < 4; i++) {
                        j = i;
                        if(!i) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  
                          
                          if(i != 3)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  

                          if(i != 3)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  

                          if(i != 3)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD4+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  

                          if(i != 3)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                          if(++j < 4) {
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          }
                        }
                      }
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      for(i = 0; i < 2; i++) {
                        if(!i) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD4+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        }
                      }
                      break;
                  }

                  if(writeback) {
                    if(reg_index)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 32, RN, 0, 0, 0);  
                  }
                  break;
                case 2: //VST1 (multiple single elements) //A8-772
                case 6:
                case 7:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>6) & 0x3;
                  type = (insn>>8) & 0xF;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;
                    
                  switch(type) {
                    case 2:
                      regs = 4;
                      break;
                    case 6:
                      regs = 3;
                      break;
                    case 7:
                      regs = 1;
                      break;
                    case 10:
                      regs = 2;
                      break;
                  }

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                  switch(size) {
                    case 0: //8-bits
                      for(i = 0; i < regs; i++) {
                        for(j = 0; j < 8; j++) {
                          k = i;

                          if(!j) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 8*j, LREG_TMP2, 0, 0, 0);  

                            if(i != 7)
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                            if(++k < regs)
                              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          }
                        }
                      }
                      break;
                    case 1: //16-bits
                      for(i = 0; i < regs; i++) {
                        for(j = 0; j < 4; j++) {
                          k = i;

                          if(!j) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 16*j, LREG_TMP2, 0, 0, 0);  

                            if(i != 3)
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                            if(++k < regs)
                              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          }
                        }
                      }
                      break;
                    case 2: //32-bits
                      bool first_use = true;

                      for(i = 0; i < regs; i++) {
                        for(j = 0; j < 2; j++) {
                          k = i;
                          if(!j) {
                            if(first_use) {
                              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                              first_use = false;
                            }

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                            if(++k < regs)
                              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          }
                        }
                      }
                      break;
                  }

                  if(writeback) {
                    if(reg_index)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (8*regs), RN, 0, 0, 0);  
                  }
                  break;
                case 3: //VST2 (multiple 2-element structures) //A8-776
                case 8:
                case 9:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>6) & 0x3;
                  type = (insn>>8) & 0xF;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;
                    
                  switch(type) {
                    case 3:
                      regs = 2;
                      inc = 2;
                      break;
                    case 8:
                      regs = 1;
                      inc = 1;
                      break;
                    case 9:
                      regs = 1;
                      inc = 2;
                      break;
                  }

                  VD2 = VD + inc;
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                  switch(size) {
                    case 0: //8-bits
                      for(i = 0; i < regs; i++) {
                        for(j = 0; j < 8; j++) {
                          k = i;

                          if(!j) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 8*j, LREG_TMP2, 0, 0, 0);  

                            if(i != 7)
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 8*j, LREG_TMP2, 0, 0, 0);  

                            if(i != 7)
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                            if(++k < regs)
                              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          }
                        }
                      }
                      break;
                    case 1: //16-bits
                      for(i = 0; i < regs; i++) {
                        for(j = 0; j < 4; j++) {
                          k = i;

                          if(!j) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 16*j, LREG_TMP2, 0, 0, 0);  
                            
                            if(i != 3)
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 16*j, LREG_TMP2, 0, 0, 0);  

                            if(i != 3)
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                            if(++k < regs)
                              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          }
                        }
                      }
                      break;
                    case 2: //32-bits
                      bool first_use = true;
                      for(i = 0; i < regs; i++) {
                        for(j = 0; j < 2; j++) {
                          k = i;
                          if(!j) {
                            if(first_use) {
                              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                              first_use = false;
                            }

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          }
                          else {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                            if(++k < regs)
                              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          }
                        }
                      }
                      break;
                  }

                  if(writeback) {
                    if(reg_index)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (16*regs), RN, 0, 0, 0);  
                  }
                  break;
                case 4: //VST3 (multiple 3-element structures) //A8-780
                case 5:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>6) & 0x3;
                  type = (insn>>8) & 0xF;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;
                    
                  switch(type) {
                    case 4:
                      inc = 1;
                      break;
                    case 5:
                      inc = 2;
                      break;
                  }

                  VD2 = VD + inc;
                  VD3 = VD2 + inc;

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                  switch(size) {
                    case 0: //8-bits
                      for(i = 0; i < 8; i++) {
                        j = i;

                        if(!i) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                          if(i != 7)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                          if(i != 7)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                          if(i != 7)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                          if(++k < 8)
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        }
                      }
                      break;
                    case 1: //16-bits
                      for(i = 0; i < 4; i++) {
                        j = i;
                        if(!i) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  
                          
                          if(i != 3)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  

                          if(i != 3)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  

                          if(i != 3)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                          if(++j < 4) {
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          }
                        }
                      }
                      break;
                    case 2: //32-bits
                      bool first_use = false; 

                      for(i = 0; i < 2; i++) {
                        if(!i) {
                          if(first_use) {
                            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            first_use = false;
                          }
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        }
                      }
                      break;
                  }

                  if(writeback) {
                    if(reg_index)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 24, RN, 0, 0, 0);  
                  }
                  break;
                default:
                    OOPS("WARning: Instruction is UNDEFINED in vector store multiple (x-)element structure space.\n");
                  break;
              }
            }
            else {
              switch(b_vector_ldst) {
                case 0: //VST1 (single element from 1 lane) //A8-770
                case 4:
                case 8:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>10) & 0x3;
                  index_align = (insn>>4) & 0xF;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                  switch(size) {
                    case 0: //8-bits
                      index = (index_align>>1) & 0x7;

                      if(index == 0)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 8*index, LREG_TMP2, 0, 0, 0);
                        if(index != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, RN, 0, 0, 0);
                      }
                      break;
                    case 1: //16-bits
                      index = (index_align>>2) & 0x3;

                      if(index == 0)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16*index, LREG_TMP2, 0, 0, 0);
                        if(index != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, RN, 0, 0, 0);

                      }
                      break;
                    case 2: //32-bits
                      index = (index_align>>3) & 0x1;

                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      if(!index)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);
                      }
                      break;
                  }
                  break;
                case 1: //VST2 (single 2-element structure from 1 lane) //A8-774
                case 5:
                case 9:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>10) & 0x3;
                  index_align = (insn>>4) & 0xF;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                  switch(size) {
                    case 0: //8-bits
                      index = (index_align>>1) & 0x7;

                      if(index == 0) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 8*index, LREG_TMP2, 0, 0, 0);

                        if(index != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 8*index, LREG_TMP2, 0, 0, 0);

                        if(index != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, RN, 0, 0, 0);
                      }
                      break;
                    case 1: //16-bits
                      index = (index_align>>2) & 0x3;
                      i = (index_align>>1) & 0x1;

                      if(!i)
                        inc = 1;
                      else
                        inc = 2;

                      VD2 = VD + inc;

                      if(index == 0) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16*index, LREG_TMP2, 0, 0, 0);

                        if(index != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2, 0, 16*index, LREG_TMP2, 0, 0, 0);

                        if(index != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);
                      }
                      break;
                    case 2: //32-bits
                      index = (index_align>>3) & 0x1;
                      i = (index_align>>2) & 0x1;

                      if(!i)
                        inc = 1;
                      else
                        inc = 2;

                      VD2 = VD + inc;

                      if(!index) {
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8, RN, 0, 0, 0);
                      }
                      break;
                  }
                  break;
                case 2: //VST3 (single 3-element structure from 1 lane) //A8-778
                case 6:
                case 10:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>10) & 0x3;
                  index_align = (insn>>4) & 0xF;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                  switch(size) {
                    case 0: //8-bits
                      index = (index_align>>1) & 0x7;

                      VD3 = VD1 + 1;

                      if(index == 0) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 8*index, LREG_TMP2, 0, 0, 0);

                        if(index != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 8*index, LREG_TMP2, 0, 0, 0);

                        if(index != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3, 0, 8*index, LREG_TMP2, 0, 0, 0);

                        if(index != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 3, RN, 0, 0, 0);
                      }
                      break;
                    case 1: //16-bits
                      index = (index_align>>2) & 0x3;
                      i = (index_align>>1) & 0x1;

                      if(!i)
                        inc = 1;
                      else
                        inc = 2;

                      VD2 = VD + inc;
                      VD3 = VD2 + inc;

                      if(index == 0) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16*index, LREG_TMP2, 0, 0, 0);

                        if(index != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2, 0, 16*index, LREG_TMP2, 0, 0, 0);

                        if(index != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3, 0, 16*index, LREG_TMP2, 0, 0, 0);

                        if(index != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 6, RN, 0, 0, 0);
                      }
                      break;
                    case 2: //32-bits
                      index = (index_align>>3) & 0x1;
                      i = (index_align>>2) & 0x1;

                      if(!i)
                        inc = 1;
                      else
                        inc = 2;

                      VD2 = VD + inc;
                      VD3 = VD2 + inc;

                      if(!index) {
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 12, RN, 0, 0, 0);
                      }
                      break;
                  }
                  break;
                case 3: //VST4 (single 4-element structure from 1 lane) //A8-782
                case 7:
                case 11:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>10) & 0x3;
                  index_align = (insn>>4) & 0xF;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                  switch(size) {
                    case 0: //8-bits
                      index = (index_align>>1) & 0x7;

                      VD3 = VD1 + 1;
                      VD4 = VD3 + 1;

                      if(index == 0) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 8*index, LREG_TMP2, 0, 0, 0);

                        if(index != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 8*index, LREG_TMP2, 0, 0, 0);

                        if(index != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3, 0, 8*index, LREG_TMP2, 0, 0, 0);

                        if(index != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD4, 0, 8*index, LREG_TMP2, 0, 0, 0);

                        if(index != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);
                      }
                      break;
                    case 1: //16-bits
                      index = (index_align>>2) & 0x3;
                      i = (index_align>>1) & 0x1;

                      if(!i)
                        inc = 1;
                      else
                        inc = 2;

                      VD2 = VD + inc;
                      VD3 = VD2 + inc;
                      VD4 = VD3 + inc;

                      if(index == 0) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16*index, LREG_TMP2, 0, 0, 0);

                        if(index != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2, 0, 16*index, LREG_TMP2, 0, 0, 0);

                        if(index != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3, 0, 16*index, LREG_TMP2, 0, 0, 0);

                        if(index != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD4, 0, 16*index, LREG_TMP2, 0, 0, 0);

                        if(index != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8, RN, 0, 0, 0);
                      }
                      break;
                    case 2: //32-bits
                      index = (index_align>>3) & 0x1;
                      i = (index_align>>2) & 0x1;

                      if(!i)
                        inc = 1;
                      else
                        inc = 2;

                      VD2 = VD + inc;
                      VD3 = VD2 + inc;
                      VD4 = VD3 + inc;

                      if(!index) {
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD4, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 16, RN, 0, 0, 0);
                      }
                      break;
                  }
                  break;
                default:
                    OOPS("WARning: Instruction is UNDEFINED in vector store single (x-)element from 1-lane space.\n");
                  break;
              }
            }
          } //end vector stores
          else { //vector loads
            if(!b23) {
              uint8_t VD2, VD3, VD4;
              uint8_t size;
              uint8_t type;
              uint8_t writeback;
              uint8_t reg_index;
              uint8_t inc = 0xFF; //force initialization
              uint8_t regs= 0xFF; //force initialization
              uint8_t i, j;
              bool first_use;

              switch(b_vector_ldst) {
                case 0: //VLD4 (multiple 4-element structures) //A8-602
                case 1:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>6) & 0x3;
                  type = (insn>>8) & 0xf;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;
                    
                  switch(type) {
                    case 0:
                      inc = 1;
                      break;
                    case 1:
                      inc = 2;
                      break;
                  }

                  VD2 = VD + inc;
                  VD3 = VD2 + inc;
                  VD4 = VD3 + inc;

                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 40, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 40, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 40, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 40, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, VD, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, VD2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, VD4, 0, 0, 0);  
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                      
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                      
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, VD, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, VD2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                      
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, VD4, 0, 0, 0);  
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, VD4, 0, 0, 0);  
                      break;
                  }

                  if(writeback) {
                    if(reg_index)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 32, RN, 0, 0, 0);  
                  }
                  break;
                case 2: //VLD1 (multiple single elements) //A8-608
                case 6:
                case 7:
                case 10:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>6) & 0x3;
                  type = (insn>>8) & 0xf;
                  first_use = true;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;
                    
                  switch(type) {
                    case 2:
                      regs = 4;
                      break;
                    case 6:
                      regs = 3;
                      break;
                    case 7:
                      regs = 1;
                      break;
                    case 10:
                      regs = 2;
                      break;
                  }

                  switch(size) {
                    case 0: //8-bits
                      for(i = 0; i < regs; i++) {
                        j = i;

                        if(first_use) { 
                          CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP1, 0, 0, 0);  
                          first_use = false;
                        }
                        else {
                          CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD+i, 0, 0, 0);  

                        if(++j < regs)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                      }
                      break;
                    case 1: //16-bits
                      for(i = 0; i < regs; i++) {
                        j = i;

                        if(first_use) { 
                          CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP1, 0, 0, 0);  
                          first_use = false;
                        }
                        else {
                          CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD+i, 0, 0, 0);  

                        if(++j < regs)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  
                      }
                      break;
                    case 2: //32-bits
                      for(i = 0; i < regs; i++) {
                        j = i;

                        if(first_use) { 
                          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP1, 0, 0, 0);  
                          first_use = false;
                        }
                        else {
                          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD+i, 0, 0, 0);  

                        if(++j < regs)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);  
                      }
                      break;
                  }

                  if(writeback) {
                    if(reg_index)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8*regs, RN, 0, 0, 0);  
                  }
                  break;
                case 3: //VLD2 (multiple 2-element structures) //A8-614
                case 8:
                case 9:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>6) & 0x3;
                  type = (insn>>8) & 0xf;
                  first_use = true;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;
                    
                  switch(type) {
                    case 3:
                      regs = 2;
                      inc = 2;
                      break;
                    case 8:
                      regs = 1;
                      inc = 1;
                      break;
                    case 9:
                      regs = 1;
                      inc = 2;
                      break;
                  }

                  VD2 = VD + inc;

                  switch(size) {
                    case 0: //8-bits
                      for(i = 0; i < regs; i++) {
                        j = i;

                        if(first_use) {
                          CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP1, 0, 0, 0);  
                          first_use = false;
                        }
                        else {
                          CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 24, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 24, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 40, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 40, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 56, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, VD+i, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD2+i, 0, 0, 0);  

                        if(++j < regs)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                      }
                      break;
                    case 1: //16-bits
                      for(i = 0; i < regs; i++) {
                        j = i;

                        if(first_use) {
                          CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP1, 0, 0, 0);  
                          first_use = false;
                        }
                        else {
                          CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, VD+i, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 48, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD2+i, 0, 0, 0);  

                        if(++j < regs)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  
                      }
                      break;
                    case 2: //32-bits
                      for(i = 0; i < regs; i++) {
                        j = i;

                        if(first_use) {
                          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP1, 0, 0, 0);  
                          first_use = false;
                        }
                        else {
                          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, VD+i, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD+i, 0, 0, 0);  

                        if(++j < regs)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);  
                      }
                      break;
                  }

                  if(writeback) {
                    if(reg_index)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 16*regs, RN, 0, 0, 0);  
                  }
                  break;
                case 4: //VLD3 (multiple 3-element structures) //A8-620
                case 5:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>6) & 0x3;
                  type = (insn>>8) & 0xf;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;
                    
                  switch(type) {
                    case 4:
                      inc = 1;
                      break;
                    case 5:
                      inc = 2;
                      break;
                  }

                  VD2 = VD + inc;
                  VD3 = VD2 + inc;

                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 40, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 40, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 40, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 56, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 56, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 4, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 4, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 4, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 4, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  
                      break;
                  }

                  if(writeback) {
                    if(reg_index)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 24, RN, 0, 0, 0);  
                  }
                  break;
                default:
                    OOPS("WARning: Instruction is UNDEFINED in vector load multiple (x-)element structure space.\n");
                  break;
              }
            }
            else {
              uint8_t VD2, VD3, VD4;
              uint8_t size;
              uint8_t writeback;
              uint8_t reg_index;
              uint8_t index, index_align;
              uint8_t inc;
              uint8_t i;

              switch(b_vector_ldst) {
                case 0: //VLD1 (single element from 1 lane) //A8-604
                case 4:
                case 8:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>10) & 0x3;
                  index_align = (insn>>4) & 0xf;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;
                    
                  switch(size) {
                    case 0: //8-bits
                      index = (index_align>>1) & 0x7;
                      
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8*index, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xff), LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8*index, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, RN, 0, 0, 0);  
                      }
                      break;
                    case 1: //16-bits
                      index = (index_align>>2) & 0x3;
                      
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16*index, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xffff), LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16*index, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, RN, 0, 0, 0);  
                      }
                      break;
                    case 2: //32-bits
                      index = (index_align>>3) & 0x1;
                      
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      if(!index) {
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);  
                      }
                      break;
                  }
                  break;
                case 1: //VLD2 (single 2-element structure from 1 lane) //A8-606
                case 5:
                case 9:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>10) & 0x3;
                  index_align = (insn>>4) & 0xf;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;
                    
                  switch(size) {
                    case 0: //8-bits
                      index = (index_align>>1) & 0x7;

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8*index, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 8*index, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xff), LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8*index, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD1, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, RN, 0, 0, 0);  
                      }
                      break;
                    case 1: //16-bits
                      index = (index_align>>2) & 0x3;
                      i = (index_align>>1) & 0x1;
                      
                      if(i)
                        inc = 2;
                      else
                        inc = 1;
                      
                      VD2 = VD + inc;

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16*index, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16*index, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xffff), LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16*index, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);  
                      }
                      break;
                    case 2: //32-bits
                      index = (index_align>>3) & 0x1;
                      i = (index_align>>2) & 0x1;
                      
                      if(i)
                        inc = 2;
                      else
                        inc = 1;
                      
                      VD2 = VD + inc;

                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                      if(!index) {
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD2, 0, 0, 0);  
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD2, 0, 0, 0);  
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8, RN, 0, 0, 0);  
                      }
                      break;
                  }
                  break;
                case 2: //VLD3 (single 3-element structure from 1 lane) //A8-610
                case 6:
                case 10:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>10) & 0x3;
                  index_align = (insn>>4) & 0xf;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;
                    
                  switch(size) {
                    case 0: //8-bits
                      index = (index_align>>1) & 0x7;
                      VD2 = VD + 1;
                      VD3 = VD2 + 1;

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8*index, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8*index, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8*index, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xff), LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8*index, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 3, RN, 0, 0, 0);  
                      }
                      break;
                    case 1: //16-bits
                      index = (index_align>>2) & 0x3;
                      i = (index_align>>1) & 0x1;
                      
                      if(!i)
                        inc = 1;
                      else
                        inc = 2;
                      
                      VD2 = VD + inc;
                      VD3 = VD2 + inc;

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16*index, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16*index, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16*index, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xffff), LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16*index, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 6, RN, 0, 0, 0);  
                      }
                      break;
                    case 2: //32-bits
                      index = (index_align>>3) & 0x1;
                      i = (index_align>>2) & 0x1;
                      
                      if(!i)
                        inc = 1;
                      else
                        inc = 2;
                      
                      VD2 = VD + inc;
                      VD3 = VD2 + inc;

                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 4, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP7, 0, 32, LREG_TMP7, 0, 0, 0);  

                      if(!index) {
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP7, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP7, 0, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 12, RN, 0, 0, 0);  
                      }
                      break;
                  }
                  break;
                case 3: //VLD4 (single 4-element structure from 1 lane) //A8-612
                case 7:
                case 11:
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>10) & 0x3;
                  index_align = (insn>>4) & 0xf;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;
                    
                  switch(size) {
                    case 0: //8-bits
                      index = (index_align>>1) & 0x7;
                      VD2 = VD + 1;
                      VD3 = VD2 + 1;
                      VD4 = VD3 + 1;

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8*index, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8*index, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8*index, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8*index, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xff), LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 8*index, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, VD4, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);  
                      }
                      break;
                    case 1: //16-bits
                      index = (index_align>>2) & 0x3;
                      i = (index_align>>1) & 0x1;
                      
                      if(!i)
                        inc = 1;
                      else
                        inc = 2;
                      
                      VD2 = VD + inc;
                      VD3 = VD2 + inc;
                      VD4 = VD3 + inc;

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16*index, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16*index, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16*index, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16*index, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xffff), LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16*index, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, VD4, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8, RN, 0, 0, 0);  
                      }
                      break;
                    case 2: //32-bits
                      index = (index_align>>3) & 0x1;
                      i = (index_align>>2) & 0x1;
                      
                      if(!i)
                        inc = 1;
                      else
                        inc = 2;
                      
                      VD2 = VD + inc;
                      VD3 = VD2 + inc;
                      VD4 = VD3 + inc;

                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP8, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP8, 0, 32, LREG_TMP8, 0, 0, 0);  

                      if(!index) {
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, LREG_TMP8, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, VD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, VD2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, VD3, 0, 0, 0);  
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP8, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP8, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP8, 0, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, LREG_TMP8, 0, LREG_TMP7, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP7, 0, VD4, 0, 0, 0);  
                      }

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 16, RN, 0, 0, 0);  
                      }
                      break;
                  }
                  break;
                case 12: //VLD1 (single-element to all lanes) //A8-616
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>6) & 0x3;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;

                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b5)
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, RN, 0, 0, 0);  
                      }
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b5)
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, RN, 0, 0, 0);  
                      }
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b5)
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);  
                      }
                      break;
                  }
                  break;
                case 13: //VLD2 (single 2-element structure to all lanes) //A8-618
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>6) & 0x3;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;

                  if(b5)
                    inc = 2;
                  else
                    inc = 1;

                  VD2 = VD + inc;

                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, RN, 0, 0, 0);  
                      }
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);  
                      }
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8, RN, 0, 0, 0);  
                      }
                      break;
                  }
                  break;
                case 14: //VLD3 (single 3-element structure to all lanes) //A8-622
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>6) & 0x3;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;

                  if(b5)
                    inc = 2;
                  else
                    inc = 1;

                  VD2 = VD + inc;
                  VD3 = VD2 + inc;

                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD3, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 3, RN, 0, 0, 0);  
                      }
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD3, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 6, RN, 0, 0, 0);  
                      }
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 4, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD3, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 12, RN, 0, 0, 0);  
                      }
                      break;
                  }
                  break;
                case 15: //VLD4 (single 4-element structure to all lanes) //A8-624
                  //If RN == PC_REG, UNPREDICTABLE
                  size = (insn>>6) & 0x3;

                  if(RM != PC_REG)
                    writeback = 1;

                  if((RM != PC_REG) && (RM != STACKPTR))
                    reg_index = 1;

                  if(b5)
                    inc = 2;
                  else
                    inc = 1;

                  VD2 = VD + inc;
                  VD3 = VD2 + inc;
                  VD4 = VD3 + inc;

                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD4, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);  
                      }
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD4, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8, RN, 0, 0, 0);  
                      }
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD4, 0, 0, 0);  

                      if(writeback) {
                        if(reg_index)
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 16, RN, 0, 0, 0);  
                      }
                      break;
                  }
                  break;
                default:
                    OOPS("WARning: Instruction is UNDEFINED in vector store single (x-)element from 1-lane space.\n");
                  break;
              }
            }
          } //end vector loads
        }
        else if(!imm && !b24 && !b22 && !b21 && b20) { //Unallocated Memory Hint //MultiProcessing Extensions //NEEDTODO
          //NOP
        }
        else if(!imm && !b24 && b22 && !b21 && b20) { //PLI //ARMv7 //NEEDTODO
          OOPS("WARNING: PLI is NOT IMPLEMENTED.\n");
        }
        else if(!imm && b24 && !b21 && b20) { //PLD/PLDW //ARMv7 //NEEDTODO
          OOPS("WARNING: PLD/PLDW is NOT IMPLEMENTED.\n");
          if(RN != PC_REG) {
          }
          else {
          }
        }
        else if(!imm && b24 && !b23 && b22 && b21 && b20) { 
          if(!b7 && !b6 && !b5 && b4) { //CLREX //ARMv6K
            CrackInst::setup(rinst, iAALU, OP_U64_CLR_ADDR, 0, 0, 0, 0, 0, 0, 0); //NOTE: CLR_ADDR with 0 == clear everything
          }
          else if(!b7 && b6 && !b5 && !b4) { //DSB //ARMv6T2 //NEEDTODO
            OOPS("WARNING: DSB is NOT IMPLEMENTED.\n");
          }
          else if(!b7 && b6 && !b5 && b4) { //DMB //ARMv7 //NEEDTODO
            CrackInst::setup(rinst, iRALU, OP_iRALU_move, 0, 0, 0, 0, 0, 0, 0);
          }
          else if(!b7 && b6 && b5 && !b4) { //ISB //ARMv6T2 //NEEDTODO
            OOPS("WARNING: ISB is NOT IMPLEMENTED.\n");
          }
        }
        else if(imm && !b24 && !b22 && !b21 && b20 && !b4) { //Unallocated Memory Hint //MultiProcessing Extensions //NEEDTODO
          //NOP
        }
        else if(imm && !b24 && b22 && !b21 && b20 && !b4) { //PLI (register) //ARMv7 //NEEDTODO
          OOPS("WARNING: PLI is NOT IMPLEMENTED.\n");
        }
        else if(imm && b24 && !b21 && b20 && !b4) { //PLD/PLDW (register) //MultiProcessing Extensions //NEEDTODO
          OOPS("WARNING: PLD/PLDW is NOT IMPLEMENTED.\n");
        }
        break;
      case 2:
        if(!imm && b22 && !b20) { //SRS Save Return State //NEEDTODO
          OOPS("WARNING: SRS is NOT IMPLEMENTED.\n");
        }
        else if(!imm && !b22 && b20) { //RFE Return from Exception //NEEDTODO
          OOPS("WARNING: RFE is NOT IMPLEMENTED.\n");
        }
        else if(imm) { //BLX Branch with Link and Change to Thumb 
          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LINK, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, THUMB, LREG_TTYPE, 0, 0, 0);
          CrackInst::setup(rinst, iBALU_LCALL, OP_U64_JMP_IMM, 0, 0, static_cast<uint32_t>(PC+8 + (BROFF + (b24 << 1))), 0, 0, 0, 0);
        }
        break;
      case 3:
        if(!imm && !b24) { //STC2/LDC2 Additional Coprocessor double register transfer //NEEDTODO
          if(b20) { //LDC2
            OOPS("WARNING: LDC2 is NOT IMPLEMENTED.\n");
          }
          else { //STC2
            OOPS("WARNING: STC2 is NOT IMPLEMENTED.\n");
          }
       
        }
        else if(!imm && !b24 && !b23 && b22 && !b21 && !b20) { //MCRR/MCRR2 //NEEDTODO
          OOPS("WARNING: MCRR/MCRR2 is NOT IMPLEMENTED.\n");
        }
        else if(imm && !b24 && !b23 && b22 && !b21 && b20) { //MRRC2 //Encoding A2 //NEEDTODO
          //If RD == PC_REG or RN == PC_REG or RN == RT, UNPREDICTABLE
          OOPS("WARNING: MRRC2 is NOT IMPLEMENTED.\n");
        } //end MRRC2
        else if(imm && !b24 && !b4) { //CDP/CDP2 //NEEDTODO
          OOPS("WARNING: CPD/CDP2 is NOT IMPLEMENTED.\n");
        }
        else if(imm && !b24 && !b20 && b4) { //MCR/MCR2 //NEEDTODO
          OOPS("WARNING: MCR/MCR2 is NOT IMPLEMENTED.\n");
        }
        else if(imm && !b24 && b20 && b4) { //MRC2 //Encoding A2 //A8-202
          uint8_t CRN = (insn>>16) & 0xF;
          uint8_t CRM = insn & 0xF;
          uint8_t opc1 = (insn>>21) & 0x7;
          uint8_t opc2 = (insn>>5) & 0x7;

          //push r0 (it will have SYSMEM for the syscall (arg1), r7
          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);
    
          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
    
          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, CRN, 0, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, CRM, 0, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((opc1 << 3) | opc2), LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_MRC, 8, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
    
          //pop r0, r7
          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0);
        }
        break;
      default:
        static int notified = 0;
        if (notified<10) {
          //OOPS("Error: Unconditional Instructions being decoded wrong\n");
          printf("ARMExpand: Currently Not Implemented [0x%x]\n", insn);
          notified++;
        }
        break;
    }
    return;
  }

  if(sgroup == 0x0) { 
    uint8_t opcode = (insn >> 21) & 0xF;
    uint8_t shift = (b6 << 1) | b5;
    
    if(imm) { 
      if(!(b24 && !b23 && !b20)) { //Data Processing Immediate
        if((opcode != 13) || (cond != AL)) { //optimization for moves
          if(ROTATE_IMM != 0) {
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, IMM8, LREG_TMP2, 0, 0, 0);       
            CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP2, 0, (ROTATE_IMM*2), LREG_TMP2, 0, 0, 0); 
          }
        }

        if(cond != AL) { //not always executed
          switch(opcode) {
            case 0: //AND
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {             
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                }
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 1: //EOR
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                }
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
            case 2: //SUB
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 3: //RSB
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, RN, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }  
                else{
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 4: //ADD
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, PC_REG, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                }
              }
                
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 5: //ADC
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                }
  
                CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                }
  
                CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, 0, IMM8, LREG_TMP1, 0, 0, 0);
              }
                
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 6: //SBC
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
  
                CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
  
                CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              }
                
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 7: //RSC
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, RN, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else{
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }
                
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 8: //TST
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                }
              }
                
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
              break;
            case 9: //TEQ
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                }
              }
                
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
              break;
            case 10: //CMP
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }
                
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
              break;
            case 11: //CMN
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                }
              }
                
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
              break;
            case 12: //ORR
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, PC_REG, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, PC_REG, 0, IMM8, LREG_TMP1, 0, 0, 0);
                }
              }
                
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 13: //MOV
              if(ROTATE_IMM == 0)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, IMM8, LREG_TMP3, 0, 0, 0);
                
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              if(Sbit) 
                if(RD != PC_REG) 
                  CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP2, 0, LREG_ICC, 1, 0, 0);
                
              if(RD != PC_REG)
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
              else
                CrackInst::setup(rinst, iBALU_RBRANCH, rbranchArray[cond], LREG_TMP2, LREG_TMP2, 0, 0, 0, 0, 0);
              break;
            case 14: //BIC
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                }
              }
                
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 15: //MVN
              //Rd = ~(shifter_operand)
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              if(ROTATE_IMM == 0)
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;            
          }
        } //end not always executed
        else { //always executed
          switch(opcode) {
            case 0: //AND
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, IMM8, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, IMM8, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
  
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 1: //EOR
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, 0, IMM8, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);

                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, 0, IMM8, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
  
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 2: //SUB
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                   if(!Sbit) {
                     CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                     CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                     CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
  
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 3: //RSB
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);

                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);

                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
  
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 4: //ADD
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM8, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, 0, IMM8, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
  
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 5: //ADC
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                }
  
                if(RD != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, LREG_TMP2, 0, RD, Sbit, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                  if(!Sbit) {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                }
  
                if(RD != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, 0, IMM8, RD, Sbit, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, 0, IMM8, LREG_TMP1, 0, 0, 0);

                  if(!Sbit) {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                  }
                }
              }
  
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 6: //SBC
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }

                CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
  
                if(RD != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                  if(!Sbit) {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);

                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);

                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, RD, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
  
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 7: //RSC
              if(ROTATE_IMM != 0) {
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);

                if(RN != PC_REG) {
                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);

                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, IMM8, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, RN, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);

                if(RN != PC_REG) {
                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);

                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
  
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 8: //TST
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, 0, 1, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP2, 0, 0, 1, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, IMM8, 0, 1, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, IMM8, 0, 1, 0, 0);
                }
              }
              break;
            case 9: //TEQ
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, 0, 1, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP2, 0, 0, 1, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, 0, IMM8, 0, 1, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, 0, IMM8, 0, 1, 0, 0);
                }
              }
              break;
            case 10: //CMP
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
                }
              }
              break;
            case 11: //CMN
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, 0, 1, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP2, 0, 0, 1, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM8, 0, 1, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, 0, IMM8, 0, 1, 0, 0);
                }
              }
              break;
            case 12: //ORR
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, 0, IMM8, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, 0, IMM8, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
  
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 13: //MOV
              if(ROTATE_IMM != 0) {
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, IMM8, LREG_TMP2, 0, 0, 0); 
                if(RD != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP2, 0, (ROTATE_IMM*2), RD, Sbit, 0, 0); 
                else {
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP2, 0, (ROTATE_IMM*2), LREG_TMP1, 0, 0, 0); 

                  if(!Sbit) {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                  }
                }
              }
              else {
                if(RD != PC_REG) {
                  if (IMM8) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, IMM8, RD, Sbit, 0, 0);
                  }else{
                    CrackInst::setup(rinst, iRALU, OP_iRALU_move, 0, 0, 0, RD, Sbit, 0, 0); 
                  }
                }else{
                  if(IMM8 & 1) {
                    if(!Sbit)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iBALU_LJUMP, OP_U64_JMP_IMM, 0, 0, IMM8, 0, 0, 0, 0);
                }
              }
              
              if(!complete) {
                if(RD == PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                  CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
                }
              }
              break;
            case 14: //BIC
              if(ROTATE_IMM != 0) {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, 0, IMM8, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, 0, IMM8, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
  
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 15: //MVN
              //Rd = ~(shifter_operand)
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              if(ROTATE_IMM == 0) {
                if(RD != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, 0, IMM8, RD, Sbit, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, 0, IMM8, LREG_TMP1, 0, 0, 0);

                  if(!Sbit && !(IMM8 & 1)) {
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, THUMB, LREG_TTYPE, 0, 0, 0); //FIXME: RAT/ROB move?
                  }
                }
              }
              else {
                if(RD != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, RD, Sbit, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  if(!Sbit) {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                  }
                }
              } 

              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;            
          }
        } //end always executed
      } //end Data Processing Immediate
      else if(b24 && !b23 && !b22 && !b21 && !b20) { //MOVW //ARMv6T2
         CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, IMM16, LREG_TMP1, 0, 0, 0);

         if(cond != AL) {
           CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
           CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
           CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
         }
         else {
           CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, RD, 0, 0, 0);
         }
      }
      else if(b24 && !b23 && b22 && !b21 && !b20) { //MOVT //ARMv6T2
        //If RD == PC_REG then UNPREDICTABLE
        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, IMM16, LREG_TMP1, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, 0, 0, LREG_TMP2, 0, 0, 0);
        
        if(cond != AL) {
          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
        }
        else {
          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
        }
      }
      else if(b24 && !b23 && b21 && !b20) { //MSR immediate and hints
        if(!b22) {
          if(!b19 && !b18 && !b17 && !b16) {
            if(IMM8 == 0) { //NOP //ARMv6T2, ARMv6K
              //OOPS("WARNING: Don't know what to do with NOP\n");
              //Does nothing;
            }
            else if(IMM8 == 1) { //YIELD //ARMv6K //NEEDTODO
              OOPS("WARNING: Don't know what to do with YIELD\n");
            }
            else if(IMM8 == 2) { //WFE //ARMv6K //NEEDTODO
              OOPS("WARNING: Don't know what to do with WFE (Wait for Event)\n");
            }
            else if(IMM8 == 3) { //WFI //ARMv6K //NEEDTODO
              OOPS("WARNING: Don't know what to do with WFI (Wait for Interrupt)\n");
            }
            else if(IMM8 == 4) { //SEV //ARMv6K //NEEDTODO
              OOPS("WARNING: Don't know what to do with SEV (Send Event)\n");
            }
            else if(IMM8 >= 240) { //DBG //AMRv7 //NEEDTODO
              OOPS("WARNING: Don't know what to do with DBG (Debug Hint)\n");
            }
          }
          else { //MSR immediate
            //UNPREDICTABLE if PC_REG==RD
            uint8_t nzcvqg_mask = (insn >> 18) & 3;
    
            if(nzcvqg_mask != 0) {
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, IMM8, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, (2*ROTATE_IMM), LREG_TMP1, 0, 0, 0);
            }
    
            switch(nzcvqg_mask) {
              case 0:
                //Nothing is supposed to happen in this case
                break;
              case 1: //only ge is modified
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_CPSR, 0, static_cast<uint32_t>(0xFFF0FFFF), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0xF0000), LREG_TMP1, 0, 0, 0);
    
                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); //get GE

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_CPSR, 0, LREG_CPSR, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_CPSR, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_GE_FLAG, 0, 0, 0);
                }
                break;
              case 2: //only nzcvq is modified
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xF8, LREG_TMP5, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_CPSR, 0, static_cast<uint32_t>(0x7FFFFFF), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
    
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 28, LREG_TMP3, 0, 0, 0); //get ICC
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 27, LREG_TMP4, 0, 0, 0); //get Q

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
    
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                  CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP3, 0, LREG_ICC, 1, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_CPSR, 0, LREG_CPSR, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                  CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP3, 0, 0, LREG_ICC, 1, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_CPSR, 0, 0, 0);
                }
                break;
              case 3: //both nzcvq and g are modified
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xF80F, LREG_TMP6, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_CPSR, 0, static_cast<uint32_t>(0x7F0FFFF), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
    
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 28, LREG_TMP3, 0, 0, 0); //get ICC
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 27, LREG_TMP4, 0, 0, 0); //get Q
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP5, 0, 0, 0); //get GE

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 15, LREG_TMP5, 0, 0, 0);
    
                  CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP3, 0, LREG_ICC, 1, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_CPSR, 0, LREG_CPSR, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 15, LREG_GE_FLAG, 0, 0, 0);
    
                  CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP3, 0, 0, LREG_ICC, 1, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_CPSR, 0, 0, 0);
                }
                break;
            }
          }
        }
        else { //MSR immediate, system level //NEEDTODO
          OOPS("WARNING: Don't know what to do with MSR immediate, system level\n");
        }
      } //end MSR immediate and hints
    } //end imm
    else {
      if(!(b24 && !b23 && !b20) && !b4) { //Data Processing Immediate Shift
        if((opcode != 13) || (cond != AL)) { //optimization for moves
          switch(shift) {
            case 0: //sll
              if(SHIFT_IMM != 0) {
                if(RM != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
                }
              }
              break;
            case 1: //srl
              if(SHIFT_IMM != 0) {
                if(RM != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
                }
              }
              else {
                if(RM != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 32, LREG_TMP2, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                }
              }
              break;
            case 2: //sra
              if(SHIFT_IMM != 0) {
                if(RM != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, PC_REG, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
                }
              }
              else {
                if(RM != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 32, LREG_TMP2, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                }
              }
              break;
            case 3:
              if(SHIFT_IMM != 0) { //rotr
                if(RM != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP3, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
                }
              }
              else { //rotrxx
                if(RM != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RM, 0, LREG_TMP2, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S32_ROTRXX, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
              }
              break;
          }
        }

        if(cond != AL) { //not always executed
          switch(opcode) {
            case 0: //AND
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
                else {
                  if(RM != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 1: //EOR
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
                else {
                  if(RM != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 2: //SUB
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }

                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 3: //RSB
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }

                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 4: //ADD
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 5: //ADC
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                }

                if(RM != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, RM, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);
                else { 
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 6: //SBC
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RM != PC_REG) {
                  if(RN != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }

                  if(RN != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }

                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 7: //RSC
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN == PC_REG) {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                }

                if(RM != PC_REG) {
                  if(RN != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }

                  if(RN != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }

                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }

              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 8: //TST
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
              break;
            case 9: //TEQ
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
              break;
            case 10: //CMP
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }

                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                }
              }
              
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
              break;
            case 11: //CMN
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
              break;
            case 12: //ORR
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 13: //MOV
              if(Sbit) {
                if(RD != PC_REG) {
                  if((SHIFT_IMM == 0) && (shift == 0)) {
                    if(RM != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RM, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, RM, 0, LREG_ICC, 1, 0, 0);
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
                    }
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
                  }
                }
                else {
                  if((SHIFT_IMM == 0) && (shift == 0)) {
                    if(RM != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RM, 0, LREG_TMP2, 0, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                    }
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  }
                }
              }
              else {
                if((SHIFT_IMM == 0) && (shift == 0)) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RM, 0, LREG_TMP2, 0, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                }
              }
              
              if(RD != PC_REG)
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
              else
                CrackInst::setup(rinst, iBALU_RBRANCH, rbranchArray[cond], LREG_TMP2, LREG_TMP2, 0, 0, 0, 0, 0);
              break;
            case 14: //BIC
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 15: //MVN
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RM != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, RM, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                }
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              }
              
              ARM_DATA_REG_SHFT_NOTAL;
              break;              
          }
        } //end not always executed
        else { //always executed   
          switch(opcode) {
            case 0: //AND
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG) {
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, RM, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, RM, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP3, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, RM, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP3, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 1: //EOR
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG) {
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, RM, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, RM, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP3, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, RM, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP3, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, Sbit, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
 
                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 2: //SUB
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG) {
                    if(RD != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 3: //RSB
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RN, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RN, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    if(RD != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  if(RD != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 4: //ADD
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG) {
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, RM, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP3, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, RM, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP3, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 5: //ADC
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                }

                if(RM != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, RM, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, RM, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, LREG_TMP3, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                }

                if(RD != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, LREG_TMP2, 0, RD, Sbit, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                  if(!Sbit) {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                  }
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 6: //SBC
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RM != PC_REG) {
                  if(RD != PC_REG) {
                    if(RN != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                  }
                  else {
                    if(RN != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    }

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  if(RD != PC_REG) {
                    if(RN != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                  }
                  else {
                    if(RN != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    }

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              else {
                if(RD != PC_REG) {
                  if(RN != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
 
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                }
                else {
                  if(RN != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, Sbit, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
 
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, Sbit, 0, 0); //invert carry
                  }

                  if(!Sbit) {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                  }
                }
              }
 
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 7: //RSC
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RM != PC_REG) {
                  if(RD != PC_REG) {
                    if(RN != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, RN, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                  }
                  else {
                    if(RN != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, RN, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    }

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  if(RD != PC_REG) {
                    if(RN != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RN, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, 0, 0, 0); //invert carry
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                    }
                  }
                  else {
                    if(RN != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RN, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, Sbit, 0, 0); //invert carry
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                      CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, Sbit, 0, 0); //invert carry
                    }

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              else {
                if(RD != PC_REG) {
                  if(RN != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
 
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
                  }
                }
                else {
                  if(RN != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, Sbit, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
 
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, Sbit, 0, 0); //invert carry
                  }

                  if(!Sbit) {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                  }
                }
              }

              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 8: //TST
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, RM, 0, 0, 1, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP3, 0, 0, 1, 0, 0);
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, RM, 0, 0, 1, 0, 0);
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP3, 0, 0, 1, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, 0, 1, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP2, 0, 0, 1, 0, 0);
                }
              }
              break;
            case 9: //TEQ
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, RM, 0, 0, 1, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, PC_REG, 0, 0, 1, 0, 0);
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, RM, 0, 0, 1, 0, 0);
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP3, 0, 0, 1, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, 0, 1, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP2, 0, 0, 1, 0, 0);
                }
              }
              break;
            case 10: //CMP
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG) {
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }

                  CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
                }
              }
              break;
            case 11: //CMN
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, RM, 0, 0, 1, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP3, 0, 0, 1, 0, 0);
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, RM, 0, 0, 1, 0, 0);
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP3, 0, 0, 1, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, 0, 1, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP2, 0, 0, 1, 0, 0);
                }
              }
              break;
            case 12: //ORR
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, RM, 0, RD, Sbit, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP3, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, RM, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP3, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 13: //MOV
              switch(shift) {
                case 0: //sll
                  if(SHIFT_IMM != 0) {
                    if(RM != PC_REG) {
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, SHIFT_IMM, RD, Sbit, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);

                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }
                      }
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, SHIFT_IMM, RD, Sbit, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);

                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }
                      }
                    }
                  }
                  else {
                    if(RM != PC_REG) {
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, RM, 0, 0, RD, Sbit, 0, 0); //FIXME: RAT/ROB MOVE?
                      else {
                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }

                        if(RM == LINK)
                          CrackInst::setup(rinst, iBALU_RET, OP_U64_JMP_REG, RM, 0, 0, 0, 0, 0, 0);
                        else
                          CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, RM, 0, 0, 0, 0, 0, 0);

                        complete = true;
                      }
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, 0, 0, RD, Sbit, 0, 0); //FIXME: RAT/ROB move?
                      else {
                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFFFFFE, LREG_TMP3, 0, 0, 0); // clear bit 0
                        CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP3, 0, 0, 0, 0, 0, 0);
                        complete = true;
                      }
                    }
                  }
                  break;
                case 1: //srl
                  if(SHIFT_IMM != 0) {
                    if(RM != PC_REG) {
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, SHIFT_IMM, RD, Sbit, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);

                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }
                      }
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, SHIFT_IMM, RD, Sbit, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);

                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }
                      }
                    }
                  }
                  else {
                    if(RM != PC_REG) {
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 32, RD, Sbit, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 32, LREG_TMP1, 0, 0, 0);

                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }
                      }
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 32, RD, Sbit, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 32, LREG_TMP1, 0, 0, 0);

                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }
                      }
                    }
                  }
                  break;
                case 2: //sra
                  if(SHIFT_IMM != 0) {
                    if(RM != PC_REG) {
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, SHIFT_IMM, RD, Sbit, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);

                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }
                      }
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, SHIFT_IMM, RD, Sbit, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);

                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }
                      }
                    }
                  }
                  else {
                    if(RM != PC_REG) {
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 32, RD, Sbit, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 32, LREG_TMP1, 0, 0, 0);

                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }
                      }
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 32, RD, Sbit, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 32, LREG_TMP1, 0, 0, 0);

                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }
                      }
                    }
                  }
                  break;
                case 3:
                  if(SHIFT_IMM != 0) { //rotr
                    if(RM != PC_REG) {
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, SHIFT_IMM, RD, Sbit, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);

                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }
                      }
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      if(RD != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP3, 0, SHIFT_IMM, RD, Sbit, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP3, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);

                        if(!Sbit) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                        }
                      }
                    }
                  }
                  else { //rotrxx
                    if(RM != PC_REG) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, RM, 0, 0, LREG_TMP1, 0, 0, 0);
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 0);
                    }

                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S32_ROTRXX, LREG_TMP1, 0, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_ROTRXX, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  break;
              }
              
              if(!complete)
                if(RD == PC_REG) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                  CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
                }
              break;
            case 14: //BIC
              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RN != PC_REG) {
                  if(RM != PC_REG) {
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, RM, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, RM, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP3, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
                else {
                  if(RM != PC_REG) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, RM, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    if(RD != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, LREG_TMP3, 0, RD, Sbit, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                      if(!Sbit) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                      }
                    }
                  }
                }
              }
              else {
                if(RN != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, LREG_TMP2, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 15: //MVN
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              if((SHIFT_IMM == 0) && (shift == 0)) {
                if(RM != PC_REG) {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RM, LREG_TMP3, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, RM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP3, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                }
              }
              else {
                if(RD != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, RD, Sbit, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  if(!Sbit) {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                  }
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;              
          }
        } //end always executed        
      } //end Data Processing Immediate Shifts
      else if(!(b24 && !b23 && !b20) && !b7 && b4) { //Data Processing Register Shift
        //Specifying PC_REG as Rd, Rm, Rn, Rs has UNPREDICTABLE RESULTS       
        if((opcode != 13) || (cond != AL)) { //optimization for moves
          switch(shift) {
            case 0: //sll
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, RS, 0, LREG_TMP2, 0, 0, 0);
              break;
            case 1: //srl
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, RS, 0, LREG_TMP2, 0, 0, 0);
              break;
            case 2: //sra
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, RS, 0, LREG_TMP2, 0, 0, 0);
              break;
            case 3:
              CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, RS, 0, LREG_TMP2, 0, 0, 0);
              break;
          }
        }

        if(cond != AL) { //not always executed
          switch(opcode) {
            case 0: //AND
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 1: //EOR
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 2: //SUB
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 3: //RSB
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 4: //ADD
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 5: //ADC
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 6: //SBC
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 7: //RSC
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 8: //TST
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
              break;
            case 9: //TEQ
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
              break;
            case 10: //CMP
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
              break;
            case 11: //CMN
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
              break;
            case 12: //ORR
              CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 13: //MOV
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              if(Sbit)
                if(RD != PC_REG)
                  CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP2, 0, LREG_ICC, 1, 0, 0);
              
              if(RD != PC_REG)
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
              else 
                CrackInst::setup(rinst, iBALU_RBRANCH, rbranchArray[cond], LREG_TMP1, LREG_TMP1, 0, 0, 0, 0, 0);
              break;
            case 14: //BIC
              CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              ARM_DATA_REG_SHFT_NOTAL;
              break;
            case 15: //MVN
              //Rd = ~(shifter_operand)
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              ARM_DATA_REG_SHFT_NOTAL;
              break;            
          }
        } //end not always executed
        else { //always executed
          switch(opcode) {
            case 0: //AND
              if(RD != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                if(!Sbit) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 1: //EOR
              if(RD != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                if(!Sbit) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 2: //SUB
              if(RD != PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                if(!Sbit) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 3: //RSB
              if(RD != PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                if(!Sbit) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 4: //ADD
              if(RD != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                if(!Sbit) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 5: //ADC
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);
              if(RD != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, LREG_TMP2, 0, RD, Sbit, 0, 0);
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_ADDXX, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                if(!Sbit) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 6: //SBC
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);

              if(RD != PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                if(!Sbit) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 7: //RSC
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);

              if(RD != PC_REG) { 
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

                if(!Sbit) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 8: //TST
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, 0, 1, 0, 0);
              break;
            case 9: //TEQ
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, 0, 1, 0, 0);
              break;
            case 10: //CMP
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
              break;
            case 11: //CMN
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, 0, 1, 0, 0);
              break;
            case 12: //ORR
              if(RD != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                if(!Sbit) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                }
              }
              
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 13: //MOV
              switch(shift) {
                case 0: //sll
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, RS, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, RS, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                  break;
                case 1: //srl
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, RS, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, RS, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                  break;
                case 2: //sra
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, RS, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, RS, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                  break;
                case 3:
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, RS, 0, RD, Sbit, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, RS, 0, LREG_TMP1, 0, 0, 0);

                    if(!Sbit) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                    }
                  }
                  break;
              }
            
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;
            case 14: //BIC
              if(RD != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                if(!Sbit) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                }
              }
              
              if(RD == PC_REG)
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, RD, 0, 0, 0, 0, 0, 0);
              break;
            case 15: //MVN
              //Rd = ~(shifter_operand)
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              if(RD != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, RD, Sbit, 0, 0);
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                if(!Sbit) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
                }
              }
            
              if(RD == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
              break;            
          }
        } //end always executed
      } //end Data Processing Register Shifts
      else if(b24 && !b23 && !b20 && !b7) { //Miscellaneous Instructions
        if(!b6 && !b5 && !b4) {
          if(!b21) { //MRS
            //Specifying PC_REG == RD has UNPREDICTABLE results
            if(!b22) { //Rd = APSR (aka LREG_CPSR with only USER mode flags)
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_ICC, 1, 15, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 28, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_Q_FLAG, 0, 1, LREG_TMP2, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 27, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_GE_FLAG, 0, 15, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);

              if(cond != AL) {
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
              }
              else 
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
            }
            else { //Rd = LREG_CPSR (Full LREG_CPSR)
              OOPS("What should I do for MRS with SYSTEM level changes?\n");
            }
          }
          else { //MSR (register)
            //Specifying PC_REG == RM has UNPREDICTABLE results
            uint8_t nzcvqg_mask = (insn >> 18) & 3;

            if(!b22) { //Only APSR (aka LREG_CPSR with USER level flags) can be changed
              switch(nzcvqg_mask) {
                case 0:
                  //UNPREDICTABLE
                  break;
                case 1: //only ge is modified
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_CPSR, 0, static_cast<uint32_t>(0xFFF0FFFF), LREG_TMP2, 0, 0, 0); //immediate is intended to work as such
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xF0000), LREG_TMP1, 0, 0, 0);
      
                  if(cond != AL) {
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); //get GE

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_CPSR, 0, LREG_CPSR, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_CPSR, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_GE_FLAG, 0, 0, 0); //get GE
                  }
                  break;
                case 2: //only nzcvq is modified
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xF8, LREG_TMP5, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_CPSR, 0, static_cast<uint32_t>(0x7FFFFFF), LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
      
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 28, LREG_TMP3, 0, 0, 0); //get ICC
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 27, LREG_TMP4, 0, 0, 0); //get Q

                  if(cond != AL) {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
      
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                    CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP3, 0, LREG_ICC, 1, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_CPSR, 0, LREG_CPSR, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                    CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP3, 0, 0, LREG_ICC, 1, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_CPSR, 0, 0, 0);
                  }
                  break;
                case 3: //both nzcvq and g are modified
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xF80F, LREG_TMP5, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP5, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_CPSR, 0, static_cast<uint32_t>(0x7F0FFFF), LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
      
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 28, LREG_TMP3, 0, 0, 0); //get ICC
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 27, LREG_TMP4, 0, 0, 0); //get Q
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP5, 0, 0, 0); //get GE

                  if(cond != AL) {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 15, LREG_TMP5, 0, 0, 0);
      
                    CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
      
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
      
                    CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP3, 0, LREG_ICC, 1, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_CPSR, 0, LREG_CPSR, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 15, LREG_GE_FLAG, 0, 0, 0);
      
                    CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP3, 0, 0, LREG_ICC, 1, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_CPSR, 0, 0, 0);
                  }
                  break;
              }
            }
          }
        }
        else if(!b6 && !b5 && b4) {
          if(!b22 && b21) { //BX 
            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

            if(cond != AL) {
              if(RM != PC_REG)
                //CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0); //why to clear pc(0)?
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); //why to clear pc(0)?
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              }

              CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_TTYPE, 0, LREG_TTYPE, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              if(RM == LINK)
                CrackInst::setup(rinst, iBALU_RET, rbranchArray[cond], LREG_TMP1, LREG_TMP1, 0, 0, 0, 0, 0);
              else
                CrackInst::setup(rinst, iBALU_RBRANCH, rbranchArray[cond], LREG_TMP1, LREG_TMP1, 0, 0, 0, 0, 0);
            }
            else {
              if(RM != PC_REG) 
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              }

              CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
              
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
              if(RM == LINK)
                CrackInst::setup(rinst, iBALU_RET, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              else
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
            }
          }
          else if(b22 && b21) { //CLZ
            //if R15 is specified for Rd or Rm, result is UNPREDICTABLE
            //reverse bit patten
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
            }

            // push r0 (it will have SYSMEM for the syscall (arg1), r7
            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

            CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);

            CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, RM, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_CLZ, 8, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

            // pop r0, r7
            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);

            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0);
          }
        }
        else if(!b6 && b5 && !b4) {
          if(!b22 && b21) { //BXJ  //NEEDTODO
            OOPS("WARNING: BXJ is NOT IMPLEMENTED.\n");
          }
        }
        else if(!b6 && b5 && b4) {
          if(!b22 && b21) { //BLX 
            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 2, LREG_TMP4, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, LINK, 0, LINK, 0, 0, 0);

              if(RM != PC) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 1, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
              }
              else { //UNPREDICTABLE
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              }


              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iBALU_RBRANCH, rbranchArray[cond], LREG_TMP1, LREG_TMP1, 0, 0, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LINK, 0, 0, 0);
              if(RM != PC) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 1, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0);
              }
              else { //UNPREDICTABLE
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              }
   
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
              CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
            }
          }
        }
        else if(b6 && !b5 && !b4) {
          if(!b22 && !b21) { //Saturating Add (QADD)
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S32_SADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              
              //Get carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);            
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);            
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);            
                
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_SADD, RN, RM, 0, RD, 0, 0, 0);  
              
              //Get carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, RD, 0, 0, LREG_TMP2, 0, 0, 0);            
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);            
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            }
          }
          else if(!b22 && b21) { //Saturating Subtract (QSUB)
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S32_SSUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              
              //Get carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);            
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);            
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);            
                
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_SSUB, RN, RM, 0, RD, 0, 0, 0);  
              
              //Get carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, RD, 0, 0, LREG_TMP2, 0, 0, 0);            
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);            
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            }
          }
          else if(b22 && !b21) { //Saturating Double and Add (QDADD)
            CrackInst::setup(rinst, iAALU, OP_S32_SADD, RN, RN, 0, LREG_TMP1, 0, 0, 0);
  
            //Get carry
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);            
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
            
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S32_SADD, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
  
              //Get carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);            
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
              
              //if either operation overflowed
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_SADD, RM, LREG_TMP1, 0, RD, 0, 0, 0);
  
              //Get carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, RD, 0, 0, LREG_TMP1, 0, 0, 0);            
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);
             
              //if either operation overflowed
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP1, 0, LREG_Q_FLAG, 0, 0, 0); //Q Flag
            }
          }
          else if(b22 && b21) { //Saturating Double and Subtract (QDSUB)
            CrackInst::setup(rinst, iAALU, OP_S32_SADD, RN, RN, 0, LREG_TMP1, 0, 0, 0);
  
            //Get carry
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);            
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
            
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S32_SSUB, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
  
              //Get carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);            
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
              
              //if either operation overflowed
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_SSUB, RM, LREG_TMP1, 0, RD, 0, 0, 0);
  
              //Get carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, RD, 0, 0, LREG_TMP1, 0, 0, 0);            
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);
             
              //if either operation overflowed
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP1, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            }
          }
        }
        else if(b6 && b5 && b4) {
          if(!b22 && b21) { //BKPT //NEEDTODO
            OOPS("WARNING: BKPT is ignored for now.\n");
          }
          else if(b22 && b21) { //SMC //NEEDTODO
            OOPS("WARNING: SMC is ignored for now.\n");
          }
        }
      }
      else if(b24 && !b23 && !b20 && !b7 && b4) { //Halfword Multiply and Multiply-Accumulate
        switch((b22<<1)|b21) {
          case 0: //SMLA <x> <y> 
            if(!b5) {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
            }
            else 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP1, 0, 0, 0);
            
            if(!b6) {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RS, 0, 16, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
            }
            else 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RS, 0, 16, LREG_TMP2, 0, 0, 0);
            
            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              
            if(cond != AL) { 
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  //get carry
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
              
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, LREG_TMP1, 0, RN, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  //get carry
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            }
            break;
          case 1:
            if(!b5) { //SMLAW <y> 
              if(!b6) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RS, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RS, 0, 16, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
              
              if(cond != AL) {
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0); //get carry
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
              
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, LREG_TMP1, 0, RN, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //get carry
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              }
            } //END SMLAW <y>
            else { //SMULW <y>
              if(!b6) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RS, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RS, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              
              if(cond != AL) {
                CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 16, RN, 0, 0, 0);
              }
            } //END SMULW <y>
            break;
          case 2: //SMLAL <x> <y>
            if(!b5) {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
            }
            else
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP1, 0, 0, 0);
            
            if(!b6) {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RS, 0, 16, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
            }
            else
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RS, 0, 16, LREG_TMP2, 0, 0, 0);
            
            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
            
            //Construct 64-bit accumulate
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, RN, 0, 32, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, RD, 0, LREG_TMP2, 0, 0, 0);
  
            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
            
            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

            if(cond != AL) {  
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, RN, 0, 0, 0);
            }
            break;
          case 3: //SMUL <x> <y> 
            if(!b5) {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
            }
            else 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP1, 0, 0, 0);

            if(!b6) {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RS, 0, 16, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
            }
            else 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RS, 0, 16, LREG_TMP2, 0, 0, 0);
              
            if(cond != AL) {
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
            }
            else 
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, RN, 0, 0, 0);
            break;
          default: //shouldn't happen
            break;
        }
      }
      else if(!b24 && b7 && !b6 && !b5 && b4) { //Mulitply and Multiply-Accumulate
        if(!b23 && !b22 && !b21) {  // MUL
          //Specifying R15 for Register RD, Rm, or Rs has UNPREDICTABLE results.
          //signed or unsigned doesn't matter since it only uses the least significant 32-bits
          if(cond != AL) {
            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RM, RS, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            
            if(Sbit)
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP2, 0, LREG_ICC, 1, 0, 0);

            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
          } 
          else {
            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RM, RS, 0, RN, Sbit, 0, 0);
          }
        } 
        else if(!b23 && !b22 && b21) { // MLA
          //Specifying R15 for Register RD, Rm, Rs, RN has UNPREDICTABLE results.
          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RM, RS, 0, LREG_TMP1, 0, 0, 0); 

          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
  
            if(Sbit)
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP2, 0, LREG_ICC, 1, 0, 0);

            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, LREG_TMP1, 0, RN, Sbit, 0, 0);
          }
        }//end MLA 
        else if(!b23 && b22 && !b21 && !b20) { //UMAAL
          //Specifying R15 for register RDHi, RDLo, Rm, or Rs has UNPREDICTABLE results
          //If RDLo and RDHi are the same register the results are UNPREDICTABLE
          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RM, RS, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, RN, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, RD, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
            
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RN, 0, 0, 0);
          }
        } //end UMAAL
        else if(!b23 && b22 && !b21 && b20) { //UNDEFINED
          OOPS("Error: Undefined Instruction in Multiply Instruction Extension Space\n");
        }
        else if(!b23 && b22 && b21 && !b20) { //MLS //ARMv6T2
          //Specifying R15 for Register RD, Rm, Rs, RN has UNPREDICTABLE results.
          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RM, RS, 0, LREG_TMP1, 0, 0, 0); 

          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
  
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP1, 0, RD, 0, 0, 0);
          }
        }
        else if(!b23 && b22 && b21 && b20) { //UNDEFINED
          OOPS("Error: Undefined Instruction in Multiply Instruction Extension Space\n");
        }
        else if(b23 && !b22 && !b21) { // UMULL
          //Specifying R15 for register RDHi, RDLo, Rm, or Rs has UNPREDICTABLE results
          //RDHi and RDLo must be distinct registers or the results are UNPREDICTABLE
          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RM, RS, 0, LREG_TMP1, 0, 0, 0);
          
          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
          
          if(cond != AL) { 
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

            if(Sbit)
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP3, 0, LREG_ICC, 1, 0, 0);

            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
          }
          else {
            if(Sbit)
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_ICC, 1, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, RD, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RN, 0, 0, 0);
          }
        } //end UMULL
        else if(b23 && !b22  && b21) {  // UMLAL
          //RDHi and RDLo must be distinct registers, or the result is UNPREDICTABLE
          //Specifying R15 for register RDHi, RDLo, Rm, or Rs has UNPREDICTABLE results
          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RM, RS, 0, LREG_TMP1, 0, 0, 0); 
          CrackInst::setup(rinst, iAALU, OP_S64_SLL, RN, 0, 32, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, RD, 0, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

            if(Sbit)
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP3, 0, LREG_ICC, 1, 0, 0);

            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
          }
          else {
            if(Sbit)
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_ICC, 1, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, RD, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RN, 0, 0, 0);
          }
        } //end UMLAL
        else if(b23 && b22 && !b21) {  //SMULL
          //Specifying R15 for register RDHi, RDLo, Rm, or Rs has UNPREDICTABLE results
          //RDHi and RDLo must be distinct registers or the results are UNPREDICTABLE
          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RM, RS, 0, LREG_TMP1, 0, 0, 0);
          
          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

          if(cond != AL) { 
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

            if(Sbit)
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP3, 0, LREG_ICC, 1, 0, 0);

            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
          }
          else {
            if(Sbit)
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_ICC, 1, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, RD, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RN, 0, 0, 0);
          }
        } //end SMULL
        else if(b23 && b22 && b21) { //SMLAL
          //RDHi and RDLo must be distinct registers, or the result is UNPREDICTABLE
          //Specifying R15 for register RDHi, RDLo, Rm, or Rs has UNPREDICTABLE results
          CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RM, RS, 0, LREG_TMP1, 0, 0, 0); 
          CrackInst::setup(rinst, iAALU, OP_S64_SLL, RN, 0, 32, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, RD, 0, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

            if(Sbit)
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP3, 0, LREG_ICC, 1, 0, 0);

            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
          }
          else {
            if(Sbit)
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_ICC, 1, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, RD, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RN, 0, 0, 0);
          }
        }  //end SMLAL      
        else {
          I(0);
          std::cout << "ERROR: Multiply Extension Space ERROR [0x" << insn << "] pc = 0x" << rinst->getPC() << "\n";
        }
        return;
      }
      else if(b24 && b7 && !b6 && !b5 && b4) { //Synchronization Primitives
        if(cond != AL) { //not always
          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
        } //end not always

        if(!b23 && !b21 && !b20) { //SWP/SWPB //Deprecated in ARMv6
          if(b22) { //SWPB 
            CrackInst::setup(rinst, iAALU, OP_U64_MARK_EX, RN, 0, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, RN, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U08_ST_COND, RN, RM, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_CHECK_EX, RN, 0, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_LBRANCH, OP_U64_LBNE, LREG_TMP2, 0, static_cast<uint32_t>(PC-4), 0, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 0, RD, 0, 0, 0);
          }
          else { //SWP
            CrackInst::setup(rinst, iAALU, OP_U64_MARK_EX, RN, 0, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, RN, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_COND, RN, RM, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_CHECK_EX, RN, 0, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_LBRANCH, OP_U64_LBNE, LREG_TMP2 , 0, static_cast<uint32_t>(PC-4), 0, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 0, RD, 0, 0, 0);
          }
        }
        else if(b23 && !b22 && !b21 && !b20) { //STREX
          //If RD or RN or RM == PC_REG then UNPREDICTABLE
          //If RD == RN or RD == RM then UNPREDICTABLE
          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, RN, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_COND, RN, RM, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_CHECK_EX, RN, 0, 0, 0, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, RD, 0, 0, RD, 0, 0, 0); //SUCCESS
          // CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, RD, 0, 1, RD, 0, 0, 0); //FAILURE
        }
        else if(b23 && !b22 && !b21 && b20) { //LDREX
          //If RD or RN is PC_REG then UNPREDICTABLE
          CrackInst::setup(rinst, iAALU, OP_U64_MARK_EX, RN, 0, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, RD, 0, 0, 0);
        }
        else if(b23 && !b22 && b21 && !b20) { //STREXD
          bool big_endian = false; //FIXME: How do we check for big endian?

          //If RD is ODD, or RD==R14 or RD==PC_REG then UNPREDICTABLE
          //If RD == RN or RD == RM then UNPREDICTABLE

          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, RN, 0, 0, 0);

          if(big_endian) {
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, RM, 0, 32, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, RM+1, 0, LREG_TMP1, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, RM+1, 0, 32, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, RM, 0, LREG_TMP1, 0, 0, 0);
          }

          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_COND, RN, LREG_TMP1, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_CHECK_EX, RN, 0, 0, 0, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, RD, 0, 0, RD, 0, 0, 0); //SUCCESS
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, RD, 0, 1, RD, 0, 0, 0); //FAILURE
        }
        else if(b23 && !b22 && b21 && b20) { //LDREXD
          bool big_endian = false; //FIXME: How do we check for big endian?

          //If RD is ODD, or RD==R14 or RD==PC_REG then UNPREDICTABLE
 
          CrackInst::setup(rinst, iAALU, OP_U64_MARK_EX, RN, 0, 0, 0, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

          if(big_endian) {
            CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_B, RN, 0, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RD+1, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, RD+1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RD, 0, 0, 0);
          }
        }
        else if(b23 && b22 && !b21 && !b20) { //STREXB
          //If RD or RN or RM == PC_REG then UNPREDICTABLE
          //If RD == RN or RD == RM then UNPREDICTABLE

          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, RN, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST_COND, RN, RM, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_CHECK_EX, RN, 0, 0, 0, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, RD, 0, 0, RD, 0, 0, 0); //SUCCESS
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, RD, 0, 1, RD, 0, 0, 0); //FAILURE
        }
        else if(b23 && b22 && !b21 && b20) { //LDREXB
          //If RD or RN is PC_REG then UNPREDICTABLE
          CrackInst::setup(rinst, iAALU, OP_U64_MARK_EX, RN, 0, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, RD, 0, 0, 0);
        }
        else if(b23 && b22 && b21 && !b20) { //STREXH
          //If RD or RN or RM == PC_REG then UNPREDICTABLE
          //If RD == RN or RD == RM then UNPREDICTABLE
          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, RN, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_COND, RN, RM, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_CHECK_EX, RN, 0, 0, 0, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, RD, 0, 0, RD, 0, 0, 0); //SUCCESS
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, RD, 0, 1, RD, 0, 0, 0); //FAILURE
        }
        else if(b23 && b22 && b21 && b20) { //LDREXH
          //If RD or RN is PC_REG then UNPREDICTABLE
          CrackInst::setup(rinst, iAALU, OP_U64_MARK_EX, RN, 0, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, RD, 0, 0, 0);
        }
      }
      else if(!(!b24 && b21)) { //Extra Load/Store
        uint8_t P = b24;
        uint8_t U = b23;
        uint8_t W = b21;
        uint8_t L = b20;

        uint8_t S = b6;
        uint8_t H = b5;
 
        bool copiedPC = false;

        if(cond != AL) {
          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
        }
      
        //LDRH, LDRSH, LDRD, LDRSB, STRH, STRD
        if(b22) { //immediate addressing
          if(L) { //loads
            if(!P) { //immediate post-indexed
                //UNPREDICTABLE if RD == PC_REG
                if(RN != PC_REG) {
                  switch((S<<1) | H) {
                    case 1:
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, RD, 0, 0, 0); //LDRH imm post-indexed
                      break;
                    case 2:
                      CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, RN, 0, 0, RD, 0, 0, 0); //LDRSB imm post-indexed
                      break;
                    case 3:
                      CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, RN, 0, 0, RD, 0, 0, 0); //LDRSH imm post-indexed
                      break;
                    default: OOPS("Misc Load/Store Type being decoded wrong\n");
                  }
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                  switch((S<<1) | H) {
                    case 1:
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRH imm post-indexed
                      break;
                    case 2:
                      CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRSB imm post-indexed
                      break;
                    case 3:
                      CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRSH imm post-indexed
                      break;
                    default: OOPS("Misc Load/Store Type being decoded wrong\n");
                  }
                }

                if(OFFSET8 != 0) {
                  if(U) {
                    if(RN != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, OFFSET8, RN, 0, 0, 0);
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, OFFSET8, PC_REG, 0, 0, 0);
                    }
                  }
                  else {
                    if(RN != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, OFFSET8, RN, 0, 0, 0);
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, 0, OFFSET8, PC_REG, 0, 0, 0);
                    }
                  }
                }
            } //end immediate post-indexed 
            else { //immediate offset/pre-indexed
                if(OFFSET8 != 0) {
                  if(U) {
                    if(RN != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, OFFSET8, LREG_TMP2, 0, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, OFFSET8, LREG_TMP2, 0, 0, 0);
                    }
                  }
                  else {
                    if(RN != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, OFFSET8, LREG_TMP2, 0, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, 0, OFFSET8, LREG_TMP2, 0, 0, 0);
                    }
                  }

                  switch((S<<1) | H) {
                    case 1:
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0); //LDRH imm post-indexed
                      break;
                    case 2:
                      CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, LREG_TMP2, 0, 0, RD, 0, 0, 0); //LDRSB imm post-indexed
                      break;
                    case 3:
                      CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0); //LDRSH imm post-indexed
                      break;
                    default: OOPS("Misc Load/Store Type being decoded wrong\n");
                  }
                }
                else {
                  if(RN != PC_REG) {
                    switch((S<<1) | H) {
                      case 1:
                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, RD, 0, 0, 0); //LDRH imm post-indexed
                        break;
                      case 2:
                        CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, RN, 0, 0, RD, 0, 0, 0); //LDRSB imm post-indexed
                        break;
                      case 3:
                        CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, RN, 0, 0, RD, 0, 0, 0); //LDRSH imm post-indexed
                        break;
                      default: OOPS("Misc Load/Store Type being decoded wrong\n");
                    }
                  }
                  else {
                    if(!copiedPC) 
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    switch((S<<1) | H) {
                      case 1:
                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRH imm post-indexed
                        break;
                      case 2:
                        CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRSB imm post-indexed
                        break;
                      case 3:
                        CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRSH imm post-indexed
                        break;
                      default: OOPS("Misc Load/Store Type being decoded wrong\n");
                    }
                  }
                }

                if(OFFSET8 != 0) {
                  if(W) { //writeback
                    if(RN != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 0, RN, 0, 0, 0);
                    else
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 0, PC_REG, 0, 0, 0);
                  }
                }
            } //end immediate offset/pre-indexed
          } //end loads
          else { //stores
            if(!P) { //immediate post-indexed
                if(((S<<1) | H) != 2) { //not needed for load double
                  if(RN != PC_REG)
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, RN, 0, 0, LREG_TMP2, 0, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP3, 0, 0, LREG_TMP2, 0, 0, 0);
                  }
                }

                switch((S<<1) | H) {
                  case 1:
                    CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP2, RD, 0, 0, 0, 0, 0); //STRH imm post-indexed
                    break;
                  case 2:
                    if(RN != PC_REG) {
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, RD, 0, 0, 0); //LDRD imm post-indexed
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0); 
                    }
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRD imm post-indexed
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, 4, LREG_TMP2, 0, 0, 0); 
                    }

                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RD1, 0, 0, 0); //LDRD imm post-indexed
                    break;
                  case 3:
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, RD, 0, 0, 0, 0, 0); //STRD imm post-indexed
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, RD1, 0, 0, 0, 0, 0); //STRD imm post-indexed
                    break;
                  default: OOPS("Misc Load/Store Type being decoded wrong\n");
                }

                if(OFFSET8 != 0) {
                  if(U) {
                    if(RN != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, OFFSET8, RN, 0, 0, 0);
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, OFFSET8, PC_REG, 0, 0, 0);
                    }
                  }
                  else {
                    if(RN != PC_REG)
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, OFFSET8, RN, 0, 0, 0);
                    else {
                      if(!copiedPC) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                      }
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, 0, OFFSET8, PC_REG, 0, 0, 0);
                    }
                  }
                }
            } //end immediate post-indexed
            else { //immediate offset/pre-indexed
                if(((S<<1) | H) == 2) { //for load doubles
                  if(OFFSET8 != 0) {
                    if(U) {
                      if(RN != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, OFFSET8, LREG_TMP2, 0, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, OFFSET8, LREG_TMP2, 0, 0, 0);
                      }
                    }
                    else {
                      if(RN != PC_REG)
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, OFFSET8, LREG_TMP2, 0, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, 0, OFFSET8, LREG_TMP2, 0, 0, 0);
                      }
                    }
                  }
                }
                else {
                  if(OFFSET8 != 0) {
                    if(U) {
                      if(RN != PC_REG)
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, RN, 0, OFFSET8, LREG_TMP2, 0, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP3, 0, OFFSET8, LREG_TMP2, 0, 0, 0);
                      }
                    }
                    else {
                      if(RN != PC_REG)
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, RN, 0, OFFSET8, LREG_TMP2, 0, 0, 0);
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                        copiedPC = true;
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, PC_REG, 0, OFFSET8, LREG_TMP2, 0, 0, 0);
                      }
                    }
                  }
                  else {
                    if(RN != PC_REG) {
                      CrackInst::setup(rinst, iRALU, OP_iRALU_move, RN, 0, 0, LREG_TMP2, 0, 0, 0);
                    }else {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, PC_REG, 0, 0, LREG_TMP2, 0, 0, 0);
                    }
                  }
                }

                switch((S<<1) | H) {
                  case 1:
                    CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP2, RD, 0, 0, 0, 0, 0); //STRH imm offset/pre-indexed
                    break;
                  case 2:
                    if(OFFSET8 != 0) {
                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0); //LDRD imm offset/pre-indexed
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP3, 0, 0, 0); 
                    }
                    else {
                      if(RN != PC_REG) {
                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, RD, 0, 0, 0); //LDRD imm offset/pre-indexed
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP3, 0, 0, 0); 
                      }
                      else {
                        if(!copiedPC) {
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                          copiedPC = true;
                        }
                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRD imm offset/pre-indexed
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, 4, LREG_TMP3, 0, 0, 0); 
                      }
                    }

                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, RD1, 0, 0, 0); //LDRD imm offset/pre-indexed
                    break;
                  case 3:
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, RD, 0, 0, 0, 0, 0); //STRD imm offset/pre-indexed
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP3, 0, 0, 0); 
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP3, RD1, 0, 0, 0, 0, 0); //STRD imm offset/pre-indexed
                    break;
                  default: OOPS("Misc Load/Store Type being decoded wrong\n");
                }

                if(OFFSET8 != 0) {
                  if(W) { //writeback
                    if(RN != PC_REG)
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, 0, 0, RN, 0, 0, 0);
                    else
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, 0, 0, PC_REG, 0, 0, 0);
                  }
                }
            } //end immediate offset/pre-indexed
          } //end stores
        } //end immediate addressing
        else { //register addressing
          if(L) { //loads
            if(!P) { //register post-indexed
                //UNPREDICTABLE if RD == PC_REG
                if(RN != PC_REG) {
                  switch((S<<1) | H) {
                    case 1:
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, RD, 0, 0, 0); //LDRH imm post-indexed
                      break;
                    case 2:
                      CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, RN, 0, 0, RD, 0, 0, 0); //LDRSB imm post-indexed
                      break;
                    case 3:
                      CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, RN, 0, 0, RD, 0, 0, 0); //LDRSH imm post-indexed
                      break;
                    default: OOPS("Misc Load/Store Type being decoded wrong\n");
                  }
                }
                else {
                  switch((S<<1) | H) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                    case 1:
                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRH imm post-indexed
                      break;
                    case 2:
                      CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRSB imm post-indexed
                      break;
                    case 3:
                      CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRSH imm post-indexed
                      break;
                    default: OOPS("Misc Load/Store Type being decoded wrong\n");
                  }
                }

                if(U) {
                  if(RN != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, RM, 0, PC_REG, 0, 0, 0);
                  }
                }
                else {
                  if(RN != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, RM, 0, RN, 0, 0, 0);
                  else {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, RM, 0, PC_REG, 0, 0, 0);
                  }
                }
            } //end register post-indexed
            else { //register offset/pre-indexed
                if(U) {
                  if(RN != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, LREG_TMP2, 0, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, PC_REG, RM, 0, LREG_TMP2, 0, 0, 0);
                  }
                }
                else {
                  if(RN != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, RM, 0, LREG_TMP2, 0, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                    CrackInst::setup(rinst, iAALU, OP_U32_SUB, PC_REG, RM, 0, LREG_TMP2, 0, 0, 0);
                  }
                }
  
                switch((S<<1) | H) {
                  case 1:
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0); //LDRH register offset/pre-indexed
                    break;
                  case 2:
                    CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, LREG_TMP2, 0, 0, RD, 0, 0, 0); //LDRSB register offset/pre-indexed
                    break;
                  case 3:
                    CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0); //LDRSH register offset/pre-indexed
                    break;
                  default: OOPS("Misc Load/Store Type being decoded wrong\n");
                }
  
                if(W) { //writeback
                  if(RN != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 0, RN, 0, 0, 0);
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 0, PC_REG, 0, 0, 0);
                }
            } //end regiseter offset/pre-indexed
          } //end loads
          else { //stores
            if(!P) { //register post-indexed
              if(((S<<1) | H) != 2) { //not needed for load double
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, RN, 0, 0, LREG_TMP2, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP3, 0, 0, LREG_TMP2, 0, 0, 0);
                }
              }

              switch((S<<1) | H) {
                case 1:
                  CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP2, RD, 0, 0, 0, 0, 0); //STRH imm post-indexed
                  break;
                case 2:
                  if(RN != PC_REG) {
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, RD, 0, 0, 0); //LDRD imm post-indexed
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0); 
                  }
                  else {
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, PC_REG, 0, 0, RD, 0, 0, 0); //LDRD imm post-indexed
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, PC_REG, 0, 4, LREG_TMP2, 0, 0, 0); 
                  }

                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RD1, 0, 0, 0); //LDRD imm post-indexed
                  break;
                case 3:
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, RD, 0, 0, 0, 0, 0); //STRD imm post-indexed
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, RD1, 0, 0, 0, 0, 0); //STRD imm post-indexed
                  break;
                default: OOPS("Misc Load/Store Type being decoded wrong\n");
              }

              if(U) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, RM, 0, PC_REG, 0, 0, 0);
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, RM, 0, RN, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, RM, 0, PC_REG, 0, 0, 0);
                }
              }
            } //end register post-indexed
            else { //register offset/pre-indexed
              if(((S<<1) | H) == 2) { //for load doubles
                if(U) {
                  if(RN != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, LREG_TMP2, 0, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, RM, 0, LREG_TMP2, 0, 0, 0);
                  }
                }
                else {
                  if(RN != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, RM, 0, LREG_TMP2, 0, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                    CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, RM, 0, LREG_TMP2, 0, 0, 0);
                  }
                }
              }
              else {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP2, 0, 0, 0);
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                }
  
                if(U)
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP2, RM, 0, LREG_TMP2, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, LREG_TMP2, RM, 0, LREG_TMP2, 0, 0, 0);
              }
              switch((S<<1) | H) {
                case 1:
                  CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP2, RD, 0, 0, 0, 0, 0); //STRH register offset/pre-indexed
                  break;
                case 2:
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0); //LDRD register offset/pre-indexed
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP3, 0, 0, 0); 
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, RD1, 0, 0, 0); //LDRD register offset/pre-indexed
                  break;
                case 3:
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, RD, 0, 0, 0, 0, 0); //STRD register offset/pre-indexed
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP3, 0, 0, 0); 
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP3, RD1, 0, 0, 0, 0, 0); //STRD register offset/pre-indexed
                  break;
                default: OOPS("Misc Load/Store Type being decoded wrong\n");
              }

              if(W) { //writeback
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 0, RN, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 0, PC_REG, 0, 0, 0);
              }
            } //end regiseter offset/pre-indexed
          } //end stores
        } //end register addressing
      }
      else if(!b24 && b21) { //Extra Load/Store (unpriviledged)
        //IGNORED

        if(!b6 && b5) {
          if(b20) { //LDRHT //NEEDTODO
            OOPS("WARNING: LDRHT is NOT IMPLEMENTED.\n");
          }
          else { //STRHT //NEEDTODO
            OOPS("WARNING: STRHT is NOT IMPLEMENTED.\n");
          }
        }
        else if(b6 && !b20 && !b12) { //UNPREDICTABLE
        }
        else if(b6 && !b20 && b12) { //UNDEFINED
          OOPS("Error: Undefined Instruction in Extra Load/Store (unpriviledged)\n");
        }
        else if(b6 && !b5 && b20) { //LDRSBT //NEEDTODO
           OOPS("WARNING: LDRSBT is NOT IMPLEMENTED.\n");
        }
        else if(b6 && b5 && b20) { //LDRSHT //NEEDTODO
           OOPS("WARNING: LDRSHT is NOT IMPLEMENTED.\n");
        }
      }
    }
    return;
  } 
  else if(sgroup == 0x1) { 
    if(imm && b4) { //media instructions
      if(!b24 && !b23 && !b22) { //Signed Parallel Addition and Subtraction
        if(!b21 && b20) {
          if(!b7 && !b6 && !b5) { //SADD16
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //bottom 16-bit ICC

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0); //bottom 16-bit ICC

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);

            if(cond != AL) { //not always executed
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end not always executed
            else { //always executed
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
            } //end always executed
          }
          else if(!b7 && !b6 && b5) { //SADDSUBX //SASX
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 3, LREG_TMP5, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

            if(cond != AL) { 
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
            }
          }
          else if(!b7 && b6 && !b5) { //SSUBADDX //SSAX
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 3, LREG_TMP5, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

            if(cond != AL) {                
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
            }
          }
          else if(!b7 && b6 && b5) { //SSUB16
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //bottom 16-bit ICC

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0); //bottom 16-bit ICC

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);

            if(cond != AL) { //not always executed
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end not always executed
            else { //always executed
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
            }
          }           
          else if(b7 && !b6 && !b5) { //SADD8
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
            }
          }
          else if(b7 && b6 && b5) { //SSUB8
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
            }
          }
        }
        else if(b21 && !b20) { //Saturating Instructions
          if(!b7 && !b6 && !b5) { //QADD16
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S16_SADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S16_SADD, RN, RM, 0, RD, 0, 0, 0);  
            }
          }
          else if(!b7 && !b6 && b5) { //QADDSUBX //QASX
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

            CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S16_SADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
            }
          }
          else if(!b7 && b6 && !b5) { //QSUBADDX //QSAX
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

            CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S16_SADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
            }
          }
          else if(!b7 && b6 && b5) { //QSUB16
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S16_SSUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S16_SSUB, RN, RM, 0, RD, 0, 0, 0);  
            }
          }
          else if(b7 && !b6 && !b5) { //QADD8
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S08_SADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S08_SADD, RN, RM, 0, RD, 0, 0, 0);  
            }
          }
          else if(b7 && b6 && b5) { //QSUB8
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, RN, RM, 0, RD, 0, 0, 0);  
            }
          }
        }
        else if(b21 && b20) { //Halving Instructions
          if(!b7 && !b6 && !b5) { //SHADD16
            //Specifying R15 for register RD, Rm, RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
            }
          } 
          else if(!b7 && !b6 && b5) { //SHADDSUBX //SHASX
            //Specifying R15 for register RD, Rm, RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

            CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S16_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
            }
          } 
          else if(!b7 && b6 && !b5) { //SHSUBADDX //SHSAX
            //Specifying R15 for register RD, Rm, RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

            CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S16_SUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
            }
          } 
          else if(!b7 && b6 && b5) { //SHSUB16
            //Specifying R15 for register RD, Rm, RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S16_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
            }
          } 
          else if(b7 && !b6 && !b5) { //SHADD8
            //Specifying R15 for register RD, Rm, RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S08_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
            }
          } 
          else if(b7 && b6 && b5) { //SHSUB8
            //Specifying R15 for register RD, Rm, RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S08_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
            }
          }
        }
        else { //UNDEFINED
          OOPS("Error: UNDEFINED Instruction in Parallel Add/Subtract Space\n");
        }
      }
      else if(!b24 && !b23 && b22) { //Unsigned Parallel Addition and Subtraction
        if(!b21 && b20) {
          if(!b7 && !b6 && !b5) { //UADD16
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //bottom 16-bit ICC

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0); //bottom 16-bit ICC

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);

            if(cond != AL) { //not always executed
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end not always executed
            else { //always executed
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
            }
          }
          else if(!b7 && !b6 && b5) { //UADDSUBX //UASX
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

            if(cond != AL) {                
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
            }
          }
          else if(!b7 && b6 && !b5) { //USUBADDX //USAX
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

            if(cond != AL) {                
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
            }
          }
          else if(!b7 && b6 && b5) { //USUB16
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //bottom 16-bit ICC

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0); //bottom 16-bit ICC

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);

            if(cond != AL) { //not always executed
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end not always executed
            else { //always executed
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
            }
          }
          else if(b7 && !b6 && !b5) { //UADD8
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_GE_FLAG, 0, 0, 0);
            }
          }
          else if(b7 && b6 && b5) { //USUB8
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
            }
          }
        }
        else if(b21 && !b20) { //Saturating Instructions
          if(!b7 && !b6 && !b5) { //UQADD16
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_U16_SADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_U16_SADD, RN, RM, 0, RD, 0, 0, 0);  
            }
          }
          else if(!b7 && !b6 && b5) { //UQADDSUBX //UQASX
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

            CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_U16_SADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_U16_SSUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
            }
          }
          else if(!b7 && b6 && !b5) { //UQSUBADDX //UQSAX
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

            CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_U16_SSUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_U16_SADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
            }
          }            
          else if(!b7 && b6 && b5) { //UQSUB16
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_U16_SSUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_U16_SSUB, RN, RM, 0, RD, 0, 0, 0);  
            }
          }
          else if(b7 && b6 && b5) { //UQADD8
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_U08_SADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_U08_SADD, RN, RM, 0, RD, 0, 0, 0);  
            }
          }
          else if(b7 && b6 && b5) { //UQSUB8
            //Specifying R15 for register RD, Rm, or RN has UNPREDICTABLE results
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_U08_SSUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_U08_SSUB, RN, RM, 0, RD, 0, 0, 0);  
            }
          }
        }
        else if(b21 && b20) { //Halving Instructions
          if(!b7 && !b6 && !b5) { //UHADD16
            //Specifying R15 for register RD, Rm, RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_U16_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
            }
          }
          else if(!b7 && !b6 && b5) { //UHADDSUBX //UHASX
            //Specifying R15 for register RD, Rm, RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

            CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_U16_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_U16_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
            }
          } 
          else if(!b7 && b6 && !b5) { //UHSUBADDX //UHSAX
            //Specifying R15 for register RD, Rm, RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

            CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_U16_SUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_U16_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
            }
          } 
          else if(!b7 && b6 && b5) { //UHSUB16
            //Specifying R15 for register RD, Rm, RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_U16_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
            }
          }
          else if(b7 && !b6 && !b5) { //UHADD8
            //Specifying R15 for register RD, Rm, RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_U08_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
            }
          }
          else if(b7 && b6 && b5) { //UHSUB8
            //Specifying R15 for register RD, Rm, RN has UNPREDICTABLE results
            CrackInst::setup(rinst, iAALU, OP_U08_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
            }
          }
        }
        else {
          OOPS("Error: UNDEFINED Instruction in Parallel Add/Subtract Space\n");
        }
      }
      else if(!b24 && b23) { //Packing, unpacking, saturation, and reversal
        uint8_t rotate = (insn>>10) & 0x3;

        if(!b22 && !b21 && !b20 && !b5) { //PKH
          //Specifying R15 for register Rd, Rm, or Rn has UNPREDICTABLE results
          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

          if(!b6) { //PKHBT
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

            if(SHIFT_IMM != 0) {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, SHIFT_IMM, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
            }
            else 
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0); 
            }
            else
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0); 
          } //end PKHBT
          else { //PKHTB
            if(SHIFT_IMM == 0) {
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 31, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            }

            CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0); 
            }
            else
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0); 
          } //end PKHTB
        }
        else if(!b22 && !b21 && !b20 && !b7 && b6 && b5) { //SXTAB16/SXTB16
          //Specifying R15 for RD or Rm has UNPREDICTABLE results;
          if(cond != AL) {
            switch(rotate) {
              case 0:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                break;
              case 1:
                CrackInst::setup(rinst, iAALU, OP_S16_SRA, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                break;
              case 2:
                CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                break;
              case 3:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                break;
            }

            if(RN != PC_REG) { //SXTAB16
              CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            }

            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            if(RN != PC_REG) { //SXTAB16
              switch(rotate) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
              }

              CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP1, 0, RD, 0, 0, 0);
            }
            else { //SXTB16
              switch(rotate) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, RD, 0, 0, 0);
                  break;
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, RM, 0, 8, RD, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, RD, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, RD, 0, 0, 0);
                  break;
              }
            }
          }
        }
        else if(!b22 && !b21 && !b20 && b7 && !b6 && b5) { //SEL
          //Specifying PC_REG for RD, RM, or RN has UNPREDICTABLE results
          CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP3, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_GE_FLAG, 0, 1, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, static_cast<uint32_t>(0xFF00), LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF00), LREG_TMP3, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_GE_FLAG, 0, 1, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, static_cast<uint32_t>(0xFF0000), LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF0000), LREG_TMP3, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_GE_FLAG, 0, 2, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

          CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_GE_FLAG, 0, 1, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
 
          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, RD, 0, 0, 0);
          }
        }
        else if(!b22 && b21 && !b5) { //SSAT
          uint8_t sat_imm = (insn >> 16) & 0x1F;

          if(b6) {
            if(SHIFT_IMM != 0) 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 31, LREG_TMP1, 0, 0, 0);
          }
          else {
            if(SHIFT_IMM != 0) 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
          }

          if((SHIFT_IMM != 0) || (b6))
            CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, sat_imm, LREG_TMP2, 0, 0, 0);
          else
            CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, sat_imm, LREG_TMP2, 0, 0, 0);

          //form mask
          CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, sat_imm, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
 
          //top>0
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP4, 0, 0, 0);

          if((SHIFT_IMM != 0) || (b6))
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
          else
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, RM, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP4, LREG_Q_FLAG, 0, LREG_TMP4, 0, 0, 0); //Int Q Flag

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

          CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  //invert mask
          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
 
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);

          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP1, 0, RD, 0, 0, 0);
          }
        }
        else if(!b22 && b21 && !b20 && !b7 && !b6 && b5) { //SSAT16
          uint8_t sat_imm = (insn >> 16) & 0x1F;

          CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP5, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, sat_imm, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP5, 0, sat_imm, LREG_TMP2, 0, 0, 0);

          //form mask
          CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, sat_imm, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
 
          //top>0 //bottom half
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

          //top>0 //top half
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP6, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);

          //Q Flag bottom half
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP4, LREG_Q_FLAG, 0, LREG_TMP4, 0, 0, 0); //Int Q Flag

          //Q Flag top half
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP6, 0, 1, LREG_TMP7, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP7, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP8, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP8, 0, 32, LREG_TMP8, 0, 0, 0);  

          CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP8, 0, LREG_TMP4, 0, 0, 0);  //invert mask
          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
 
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP6, LREG_TMP3, 0, LREG_TMP6, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP6, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);

          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP6, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP6, LREG_TMP4, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, RD, 0, 0, 0);
          }
        }
        else if(!b22 && b21 && !b20 && !b7 && b6 && b5) { //SXTAB/SXTB
          //Specifying R15 for RD or Rm has UNPREDICTABLE results;
          if(cond != AL) {
            if((rotate != 0) && (rotate != 3)) {
              if(rotate == 1)
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
              else if(rotate == 2)
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
            }
            else if(rotate == 3)
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 24, LREG_TMP1, 0, 0, 0);
            else if(rotate == 0) {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 24, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
            }

            if(RN != PC_REG) //SXTAB
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            if(RN != PC_REG) { //SXTAB
              if((rotate != 0) && (rotate != 3)) {
                if(rotate == 1)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                else if(rotate == 2)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
              }
              else if(rotate == 3)
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 24, LREG_TMP1, 0, 0, 0);
              else if(rotate == 0) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
              }

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, RD, 0, 0, 0);
            }
            else { //SXTB
              if((rotate != 0) && (rotate != 3)) {
                if(rotate == 1)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                else if(rotate == 2)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
              }
              else if(rotate == 3)
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 24, RD, 0, 0, 0);
              else if(rotate == 0) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
              }
            }
          }
        }
        else if(!b22 && b21 && b20 && !b7 && !b6 && b5) { //REV
          //Specifying R15 for RD or Rm has UNPREDICTABLE results;
          CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);

          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, RD, 0, 0, 0);
          }
        }
        else if(!b22 && b21 && b20 && !b7 && b6 && b5) { //SXTAH/SXTH
          //Specifying R15 for RD or Rm has UNPREDICTABLE results;
          if(cond != AL) {
            switch(rotate) {
              case 0:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                break;
              case 1:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                break;
              case 2:
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                break;
              case 3:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                break;
            }

            if(RN != PC_REG) //SXTAH
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            if(RN != PC_REG) { //SXTAH
              switch(rotate) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  break;
              }

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, RD, 0, 0, 0);
            }
            else { //SXTH
              switch(rotate) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                  break;
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, RD, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                  break;
              }
            }
          }
        }
        else if(!b22 && b21 && b20 && b7 && !b6 && b5) { //REV16
          //Specifying R15 for RD or Rm has UNPREDICTABLE results;
          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, RD, 0, 0, 0);
          }
        }
        else if(b22 && !b21 && !b20 && !b7 && b6 && b5) { //UXTAB16/UXTB16
          //Specifying R15 for RD or Rm has UNPREDICTABLE results;
          if(rotate != 0) {
            switch(rotate) {
              case 1:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                break;
              case 2:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                break;
              case 3:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                break;
            }
          }

          if(cond != AL) {
            if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP1, 0, 0, 0);

            if(RN != PC_REG) //UXTAB
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            if(RN != PC_REG) {
              if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, RD, 0, 0, 0);
            }
            else {
              if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, RD, 0, 0, 0);
            }
          }
        }
        else if(b22 && b21 && !b5) { //USAT
          uint8_t sat_imm = (insn >> 16) & 0x1F;

          if(b6) {
            if(SHIFT_IMM != 0) 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 31, LREG_TMP1, 0, 0, 0);
          }
          else {
            if(SHIFT_IMM != 0) 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
          }

          //max
          CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, sat_imm, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);

          if((SHIFT_IMM == 0) && !b6)
            CrackInst::setup(rinst, iAALU, OP_S32_ADD, RM, 0, 0, LREG_TMP1, 0, 0, 0); //need to do this to get ICC info

          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 1, LREG_TMP4, 0, 0, 0);

          //val < 0
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_Q_FLAG, 0, LREG_TMP4, 0, 0, 0); //Int Q Flag

          //val > max
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);
 
          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, LREG_TMP4, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, LREG_TMP3, 0, RD, 0, 0, 0);
          }
        }
        else if(b22 && b21 && !b20 && !b7 && !b6 && b5) { //USAT16
          uint8_t sat_imm = (insn >> 16) & 0x1F;

          CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP5, 0, 0, 0);

          //max
          CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, 1, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, sat_imm, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);

          //val < 0
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP6, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 1, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, 0, 1, LREG_TMP7, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_Q_FLAG, 0, LREG_TMP4, 0, 0, 0); //Int Q Flag
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);

          //val > max
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP5, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, 0, 1, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);

          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP4, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, RD, 0, 0, 0);
          }
        }
        else if(b22 && b21 && !b20 && !b7 && b6 && b5) { //UXTAB/UXTB
          //Specifying R15 for RD or Rm has UNPREDICTABLE results;
          if(rotate != 0) {
            switch(rotate) {
              case 1:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                break;
              case 2:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                break;
              case 3:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                break;
            }
          }

          if(cond != AL) {
            if(rotate != 0) 
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);

            if(RN != PC_REG)
              CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            if(RN != PC_REG) {
              if(rotate != 0) 
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP1, 0, RD, 0, 0, 0);
            }
            else {
              if(rotate != 0) 
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), RD, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF), RD, 0, 0, 0);
            }
          }
        }
        else if(b22 && b21 && b20 && !b7 && !b6 && b5) { //RBIT //ARMv6T2
          //Algorithm from Bit Twiddling (graphics.stanford.edu/~seander/bithack.htlm)
          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x55555556, LREG_TMP1, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  

          CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0x55555555), LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x33333334, LREG_TMP2, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x33333333), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x0F0F0F10, LREG_TMP2, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x0f0f0f0f), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x00FF0100, LREG_TMP2, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00ff00ff), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);

          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else 
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, RD, 0, 0, 0);
        }
        else if(b22 && b21 && b20 && !b7 && b6 && b5) { //UXTAH/UXTH
          //Specifying R15 for RD or Rm has UNPREDICTABLE results;
          if(rotate != 0) {
            switch(rotate) {
              case 1:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                break;
              case 2:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                break;
              case 3:
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                break;
            }
          }

          if(cond != AL) {
            if(rotate != 0)
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

            if(RN != PC_REG) //UXTAH
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else {
            if(RN != PC_REG) { //UXTAH
              if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, RD, 0, 0, 0);
            }
            else { //UXTH
              if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, RD, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, RD, 0, 0, 0);
            }
          }
        }
        else if(b22 && b21 && b20 && b7 && !b6 && b5) { //REVSH
          //Specifying R15 for RD or Rm has UNPREDICTABLE results;
          CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0); 
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
          }
        }
      }
      else if(b24 && !b23) { //Signed Multiplies
        if(!b22 && !b21 && !b20) {
          if(!b7 && !b6) { //SMLAD/SMUAD
            if(b5) {
              CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RS, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RS, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RS, 0, 16, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
            }
            
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              
              if(RD != PC_REG) {  //SMLAD
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              }
              
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0); //get carry
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
            }
            else {
              if(RD != PC_REG) {  //SMLAD
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, LREG_TMP1, 0, RN, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //get carry
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              }
              else { //SMUAD
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, RN, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //get carry
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              }
            }
          }
          else if(!b7 && b6) { //SMLSD/SMUSD
            if(b5) {
              CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RS, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RS, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RS, 0, 16, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
            }
            
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              
              if(RN != PC_REG) {  //SMLSD
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              }
              
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0); //get carry
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
            }
            else {
              if(RN != PC_REG) {  //SMLSD
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, LREG_TMP1, 0, RN, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //get carry
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              }
              else { //SMUSD
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP1, 0, RN, 0, 0, 0);
              }
            }
          }
        }
        else if(b22 && !b21 && !b20) {
          if(!b7 && !b6) { //SMLALD
            //RDHi and RDLo must be distinct registers, or the result is UNPREDICTABLE
            //Specifying R15 for register RDHi, RDLo, Rm, or Rs has UNPREDICTABLE results
            if(b5) {
              CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RS, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RS, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RS, 0, 16, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
            }

            //form 64-bit accumulator
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, RN, 0, 32, LREG_TMP3, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 

            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, RD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, RN, 0, 0, 0);
            }
          }
          else if(!b7 && b6) { //SMLSLD
            //RDHi and RDLo must be distinct registers, or the result is UNPREDICTABLE
            //Specifying R15 for register RDHi, RDLo, Rm, or Rs has UNPREDICTABLE results
            if(b5) {
              CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RS, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RS, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RS, 0, 16, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
            }

            //form 64-bit accumulator
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, RN, 0, 32, LREG_TMP3, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 

            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, RD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, RN, 0, 0, 0);
            }
          }
        }
        else if(b22 && !b21 && b20) {
          if(!b7 && !b6) {  //SMMLA/SMMUL
            //Specifying R15 for register RD, Rm, Rs has UNPREDICTABLE results
            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RM, RS, 0, LREG_TMP1, 0, 0, 0);

            if(RN != PC_REG) { //SMMLA
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
            }

            if(b5) {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 31, LREG_TMP2, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
            }
            
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
            }
            else 
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RN, 0, 0, 0);
          }
          else if(b7 && b6) { //SMMLS
            //Specifying R15 for register RD, Rm, Rs has UNPREDICTABLE results
            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RM, RS, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP2, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

            if(b5) {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 31, LREG_TMP2, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
            }

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
            }
            else
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RN, 0, 0, 0);
          }
        }
      }
      else if(b24 && b23 && !b22 && !b21 && !b20) {
        if(!b7 && !b6 && !b5) { //USAD8/USADA8
          //Specifying PC_REG as RD, RM, or RS has UNPREDICTABLE results
          CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, RS, 0, 0xFF, LREG_TMP3, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SRL, RS, 0, 8, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SRL, RS, 0, 16, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SRL, RS, 0, 24, LREG_TMP3, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);

          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

            if(RD != PC_REG) { //USADA8 
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            }

            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
          }
          else {
            if(RD != PC_REG) { //USADA8
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RD, LREG_TMP1, 0, RN, 0, 0, 0);
            }
            else { //USAD8
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, RN, 0, 0, 0);
            }
          } 
        }
      }
      else if(b24 && b23 && !b22 && b21) { //SBFX //ARMv6T2
        //If RM or RD == PC_REG, then UNPREDICTABLE
        uint8_t widthm1 = (insn>>16) & 0x1F;
        uint8_t lsb = (insn>>7) & 0x1F;
        uint8_t msb = lsb + widthm1;

        //form mask
        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (msb+1), LREG_TMP2, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (8-lsb), LREG_TMP1, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

        CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (31-msb), LREG_TMP1, 0, 0, 0);

        if(cond != AL) {
          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, (31-widthm1), LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
        }
        else 
          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, (31-widthm1), RD, 0, 0, 0);
      }
      else if(b24 && b23 && b22 && !b21 && !b6 && !b5) { //BFI/BFC
        //UNPREDICTABLE if msb < lsb
        uint8_t msb = (insn>>16) & 0x1F;
        uint8_t lsb = (insn>>7) & 0x1F;

        if(RN != PC_REG) { //BFI //ARMv6T2 
          //form mask
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (msb+1), LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (8-lsb), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
          
          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (msb-lsb+1), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, lsb, LREG_TMP1, 0, 0, 0);
         
          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else 
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP1, 0, RD, 0, 0, 0);
        }
        else { //BFC //ARMv6T2 
          //form mask
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (msb+1), LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (8-lsb), LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
          
          if(cond != AL) {
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
          }
          else 
            CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, LREG_TMP1, 0, RD, 0, 0, 0);
        }
      } 
      else if(b24 && b23 && b22 && b21 && b6 && !b5) { //UBFX //ARMv6T2
        //If RM or RD == PC_REG, then UNPREDICTABLE
        uint8_t widthm1 = (insn>>16) & 0x1F;
        uint8_t lsb = (insn>>7) & 0x1F;
        uint8_t msb = lsb + widthm1;

        //form mask
        CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (msb+1), LREG_TMP2, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (8-lsb), LREG_TMP1, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

        CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

        if(cond != AL) {
          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, lsb, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
        }
        else 
          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, lsb, RD, 0, 0, 0);
      }
      else if(b24 && b23 && b22 && b21 && b20 && b7 && b6 && b5) { //PERMANENTLY UNDEFINED
        OOPS("Error: PERMANENTLY UNDEFINED Instruction\n");
      }
    }
    else { //load stores
      uint8_t P = b24;
      uint8_t U = b23;
      uint8_t B = b22;
      uint8_t W = b21;
      uint8_t L = b20;
 
      uint8_t shift = (b6<<1) | b5;

      //LDR:  If writeback and RD==RN, result is UNPREDICTABLE
      //LDRB: PC_REG_R15 NOTE: Specifying the PC_REG as RD is UNPREDICTABLE
      //LDRB: If writeback and RD==RN, result is UNPREDICTABLE
      //STR:  If writeback and RD==RN, result is UNPREDICTABLE
      //STRB: If writeback and RD==RN, result is UNPREDICTABLE
     
      if((cond != AL) && !(P==0 && W==1)) { /*Ignore for LDRT/LDRBT/STRT/STRBT */
        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
        CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
      }

      if(!imm) { //immediate addressing
        if(P==0 && W==0) { //immediate post-indexed
          if(L) { //loads
            if(RN == PC_REG) { //UNPREDICTABLE
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
              copiedPC = true;

              if(B) 
                CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP3, 0, 0, RD, 0, 0, 0); 
              else
                if(RD != PC_REG)
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, RD, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 0); 

              if(OFFSET12 != 0) {
                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, OFFSET12, PC_REG, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, 0, OFFSET12, PC_REG, 0, 0, 0); 
              }
            }    
            else {
              if(B) 
                CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, RD, 0, 0, 0); //LDRB imm post-indexed
              else
                if(RD != PC_REG)
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, RD, 0, 0, 0); //LDR imm post-indexed
                else
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0); //LDR imm post-indexed

              if(OFFSET12 != 0) {
                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, OFFSET12, RN, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, OFFSET12, RN, 0, 0, 0); 
              }
            }

            if(RD == PC_REG) {
              if(!B) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0); 
              }

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
              CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0); 
            }
          } //end loads
          else { //stores
            uint8_t addr_reg = -1;

            if(RN == PC_REG) {
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
              copiedPC = true;
              addr_reg = LREG_TMP3;
            }else {
              addr_reg = RN;
            }

            if(RD == PC_REG) { //UNPREDICTABLE
              if(!copiedPC) {
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                copiedPC = true;
              }

              if(B)
                CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, addr_reg, LREG_TMP3, 0, 0, 0, 0, 0); //STRB imm post-indexed
              else
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, addr_reg, LREG_TMP3, 0, 0, 0, 0, 0); //STR imm post-indexed
            }
            else {
              if(B)
                CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, addr_reg, RD, 0, 0, 0, 0, 0); //STRB imm post-indexed
              else
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, addr_reg, RD, 0, 0, 0, 0, 0); //STR imm post-indexed
            }

            if(OFFSET12 != 0) {
              if(RN == PC_REG) {
                if(!copiedPC) {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                }

                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, OFFSET12, PC_REG, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, 0, OFFSET12, PC_REG, 0, 0, 0); 
              }
              else {
                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, OFFSET12, RN, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, OFFSET12, RN, 0, 0, 0); 
              }
            }
          } //end stores
        } //end immediate post-indexed
        else if(P) { //immediate offset/pre-indexed
          if(L) { //loads
            if(OFFSET12 != 0) {
              if(RN == PC_REG) {
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                copiedPC = true;

                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, OFFSET12, LREG_TMP2, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, 0, OFFSET12, LREG_TMP2, 0, 0, 0); 
                  
                if(W) //writeback
                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_TMP2, LREG_TMP3, 0, PC_REG, 0, 0, 0); //UNPREDICTABLE
              }
              else {
                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, OFFSET12, LREG_TMP2, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, OFFSET12, LREG_TMP2, 0, 0, 0); 
                  
                if(W) //writeback
                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_TMP2, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
              }
            }

            if(B) {
              if(OFFSET12 != 0) 
                CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP2, 0, 0, RD, 0, 0, 0); //LDRB imm offset/pre-indexed
              else
                if(RN == PC_REG) {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRB imm offset/pre-indexed
                }
                else
                  CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, RD, 0, 0, 0); //LDRB imm offset/pre-indexed
            }
            else {
              if(OFFSET12 != 0) {
                if(RD != PC_REG)
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0); //LDR imm offset/pre-indexed
                else
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0); //LDR imm offset/pre-indexed
              }
              else {
                if(RN == PC_REG) {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
 
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDR imm offset/pre-indexed
                  else
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 0); //LDR imm offset/pre-indexed
                }
                else {
                  if(RD != PC_REG)
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, RD, 0, 0, 0); //LDR imm offset/pre-indexed
                  else
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0); //LDR imm offset/pre-indexed
                }
              }
            }

            if(RD == PC_REG) {
              if(!B) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0); 
              }

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
              CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0); 
            }
          } //end loads
          else { //stores
            //doesn't matter if offset12 is 0 or not; we still need to do the store address calculation
            uint8_t addr_reg = -1;

            if(U) {
              if(RN == PC_REG) {
                if(!copiedPC) {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                }
                if (OFFSET12) {
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP3, 0, OFFSET12, LREG_TMP2, 0, 0, 0); 
                  addr_reg = LREG_TMP2;
                }else{
                  addr_reg = LREG_TMP3;
                }
              }else
                if (OFFSET12) {
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, RN, 0, OFFSET12, LREG_TMP2, 0, 0, 0); 
                  addr_reg = LREG_TMP2;
                }else{
                  addr_reg = RN;
                }
            }else{
              if(RN == PC_REG) {
                if(!copiedPC) {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                }
                if (OFFSET12) {
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, LREG_TMP3, 0, OFFSET12, LREG_TMP2, 0, 0, 0); 
                  addr_reg = LREG_TMP2;
                }else{
                  addr_reg = LREG_TMP3;
                }
              }else {
                if (OFFSET12) {
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, RN, 0, OFFSET12, LREG_TMP2, 0, 0, 0); 
                  addr_reg = LREG_TMP2;
                }else{
                  addr_reg = RN;
                }
              }
            }

            if(OFFSET12 != 0) {
              if(W) {
                if(RN == PC_REG)
                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, addr_reg, 0, 0, PC_REG, 0, 0, 0); //UNPREDICTABLE
                else {
                  if (addr_reg != RN) {
                    CrackInst::setup(rinst, iRALU, OP_iRALU_move, addr_reg, 0, 0, RN, 0, 0, 0);
                  }
                }
              }
            }

            if(RD == PC_REG) {
              if(!copiedPC) {
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                copiedPC = true;
              }

              if(B)
                CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, addr_reg, LREG_TMP3, 0, 0, 0, 0, 0); //STRB imm offset/pre-indexed
              else
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, addr_reg, LREG_TMP3, 0, 0, 0, 0, 0); //STR imm offset/pre-indexed
            }
            else {
              if(B)
                CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, addr_reg, RD, 0, 0, 0, 0, 0); //STRB imm offset/pre-indexed
              else
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, addr_reg, RD, 0, 0, 0, 0, 0); //STR imm offset/pre-indexed
            }
          } //end stores
        } //end immediate offset/pre-indexed
        else if(P==0 && W==1) { //LDRT, LDRBT, STRT, STRBT
          //IGNORED
          OOPS("WARNING: LDRT/LDRBT/STRT/STRBT is NOT IMPLEMENTED.\n");
        } //end LDRT, LDRBT, STRT, STRBT
      } //end immediate addressing
      else { //register addressing
        switch(shift) {
          case 0: //sll
            if(SHIFT_IMM != 0)
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0); 
            break;
          case 1: //srl
            if(SHIFT_IMM != 0)
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0); 
            break;
          case 2: //sra
            if(SHIFT_IMM != 0)
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0); 
            else
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 31, 0, LREG_TMP2, 0, 0, 0); 
            break;
          case 3: //rotr/rotrx
            if(SHIFT_IMM != 0)
              CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0); 
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, RM, 0, 0, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_ROTRXX, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
            }
            break;
          default:
            printf("LDR/STR shift being decoded wrong\n");
        }
        if(P==0 && W==0) { //register post-indexed
          if(L) { //loads
            if(RN == PC_REG) { //UNPREDICTABLE
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
              copiedPC = true;

              if(B)
                CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDRB register post-indexed 
              else {
                if(RD != PC_REG)
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, RD, 0, 0, 0); //LDR register post-indexed 
                else
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 0); //LDR register post-indexed 
              }

              if((SHIFT_IMM == 0) && (shift == 0)) { //scaled register writeback
                if(U)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, RM, 0, PC_REG, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, RM, 0, PC_REG, 0, 0, 0); 
              }
              else if((SHIFT_IMM != 0) || (shift==2) || (shift==3)) { //writeback
                if(U)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP2, 0, PC_REG, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, LREG_TMP2, 0, PC_REG, 0, 0, 0);
              }
            }
            else {
              if(B)
                CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, RN, 0, 0, 0); //LDRB register post-indexed
              else
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, RN, 0, 0, 0); //LDR register post-indexed

              if((SHIFT_IMM == 0) && (shift == 0)) { //scaled register writeback
                if(U)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, RM, 0, RN, 0, 0, 0);
              }
              else if((SHIFT_IMM != 0) || (shift==2) || (shift==3)) { //writeback
                if(U)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, LREG_TMP2, 0, RN, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, LREG_TMP2, 0, RN, 0, 0, 0);
              }
            }

            if(RD == PC_REG) {
              if(!B) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0); 
              }

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
              CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0); 
            }
          } //end loads
          else { //stores
            if(RN == PC_REG) {
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
              copiedPC = true;
              CrackInst::setup(rinst, iSALU_ADDR, OP_S64_ADD, PC_REG, 0, 0, LREG_TMP1, 0, 0, 0);
            }
            else
              CrackInst::setup(rinst, iSALU_ADDR, OP_S64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0);        
            
            if(RD == PC_REG) { 
              if(!copiedPC) {
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                copiedPC = true;
              }

              if(B)
                CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP3, 0, 0, 0, 0, 0); //STRB register post-indexed
              else
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP3, 0, 0, 0, 0, 0); //STR register post-indexed
            }
            else {
              if(B)
                CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, RD, 0, 0, 0, 0, 0); //STRB register post-indexed
              else
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, RD, 0, 0, 0, 0, 0); //STR register post-indexed
            }
            
            if(RN == PC_REG) { //UNPREDICTABLE
              if(!copiedPC) {
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                copiedPC = true;
              }

              if((SHIFT_IMM == 0) && (shift == 0)) { //register writeback
                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, RM, 0, PC_REG, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, RM, 0, PC_REG, 0, 0, 0);
              }
              else if((SHIFT_IMM != 0) || (shift == 2) || (shift == 3)) { //scaled register writeback
                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP2, 0, PC_REG, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, LREG_TMP2, 0, PC_REG, 0, 0, 0);                   
              }                
            }
            else {
              if((SHIFT_IMM == 0) && (shift == 0)) { //register writeback
                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, RM, 0, RN, 0, 0, 0);
              }
              else if((SHIFT_IMM != 0) || (shift == 2) || (shift == 3)) { //scaled register writeback
                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, LREG_TMP2, 0, RN, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, LREG_TMP2, 0, RN, 0, 0, 0); 
              }
            }
          } //end stores
        } //end register post-indexed
        else if(P) { //register offset/pre-indexed
          if(L) { //loads
            if(RN == PC_REG) { //UNPREDICTABLE
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
              copiedPC = true;

              if((SHIFT_IMM == 0) && (shift == 0)) { //register offset
                if(U)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, RM, 0, LREG_TMP2, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, RM, 0, LREG_TMP2, 0, 0, 0);
              }
              else if((SHIFT_IMM != 0) || (shift==2) || (shift==3)) { //scaled register
                if(U)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
              }
              
              if(W) //writeback
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP2, 0, 0, PC_REG, 0, 0, 0);
            }
            else {
              if((SHIFT_IMM == 0) && (shift == 0)) { //register offset
                if(U)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, LREG_TMP2, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, RM, 0, LREG_TMP2, 0, 0, 0);
              }
              else if((SHIFT_IMM != 0) || (shift==2) || (shift==3)) { //scaled register offset
                if(U)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              }
              
              if(W) //writeback
                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_TMP2, 0, 0, RN, 0, 0, 0);
            }

            if(B)
              CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP2, 0, 0, RD, 0, 0, 0); //LDRB register offset/pre-indexed
            else {
              if(RD != PC_REG)
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0); //LDR register offset/pre-indexed
              else
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0); //LDR register offset/pre-indexed
            }
            
            if(RD == PC_REG) {
              if(!B) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0); 
              }

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
              CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0); 
            }
          } //end loads
          else { //stores
            if(RN == PC_REG) {
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
              copiedPC = true;

              if((SHIFT_IMM == 0) && (shift == 0)) { //register
                if(U) 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP3, RM, 0, LREG_TMP2, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_SUB, LREG_TMP3, RM, 0, LREG_TMP2, 0, 0, 0);
              }
              else if((SHIFT_IMM != 0) || (shift == 2) || (shift == 3)) { //scaled register
                if(U) 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              }
            }
            else {
              if((SHIFT_IMM == 0) && (shift == 0)) { //register
                if(U) 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, RM, 0, LREG_TMP2, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_SUB, RN, RM, 0, LREG_TMP2, 0, 0, 0);
              }
              else if((SHIFT_IMM != 0) || (shift == 2) || (shift == 3)) { //scaled register
                if(U) 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_SUB, RN, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              }
            }              
            
            if(RD == PC_REG) { 
              if(!copiedPC) {
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                copiedPC = true;
              }

              if(B)
                CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP2, LREG_TMP3, 0, 0, 0, 0, 0); //STRB register offset/pre-indexed
              else
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, LREG_TMP3, 0, 0, 0, 0, 0); //STR register offset/pre-indexed
            }
            else {
              if(B)
                CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP2, RD, 0, 0, 0, 0, 0); //STRB register offset/pre-indexed
              else
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, RD, 0, 0, 0, 0, 0); //STR register offset/pre-indexed
            }
            
            if(W) { //writeback
              if(RN == PC_REG)
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP2, 0, 0, PC_REG, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP2, 0, 0, RN, 0, 0, 0);
            }
          } //end stores
        } //end register offset/pre-indexed
        else if(P==0 && W==1) { //LDRT, LDRBT, STRT, STRBT
          //IGNORED
          OOPS("WARNING: LDRT/LDRBT/STRT/STRBT is NOT IMPLEMENTED.\n");
        }
      } //end register addressing
    }//end load stores

    return;
  } 
  else if (sgroup == 0x2) { 
    if(imm == 0) { //Load/Store multiple  //LDM/STM
      //Using R15 as the base register gives an UNPREDICTABLE result.
      //If reg_list[15:0] is all 0, result is UNPREDICTABLE.
      //If base register RN is specified in register, and base register write-back is specified, the final value of RN is UNPREDICTABLE

      uint8_t free_reg_list[] = {
        1, 2, 3, 
        4, 5, 6, 7, 
        8, 9, 10, 11, 
        12, 13, STACKPTR, LINK, PC_REG
      };
                     
      uint8_t P = b24;
      uint8_t U = b23;
      uint8_t S = b22;
      uint8_t W = b21;
      uint8_t L = b20;

      uint16_t reg_list = insn & 0xFFFF;
      
      int count;
      int i = 0;
      
      int reg_list2 = reg_list;
      
      bool first_use = true;
      bool writeback = true;

      if(cond != AL) {
        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
        CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
      }
      
      //From Kernighan
      for (count = 0; reg_list2; count++)
        reg_list2 &= reg_list2 - 1; // clear the least significant bit set
      
      //UNPREDICTABLE
      if(reg_list < 1)
        return;

      if(!P && !U) { //decrement after
        if(L) { //loads LDMDA (LDMFA)
            if(RN != PC_REG)
              CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, (count*4), LREG_TMP2, 0, 0, 0);
            else { //UNPREDICTABLE
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
              copiedPC = true;
              CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, 0, (count*4), LREG_TMP2, 0, 0, 0); 
            }
            
            if(W) { //writeback
              if(RN != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 0, RN, 0, 0, 0); //start address //FIXME: RAT/ROB move?
              else  //UNPREDICTABLE
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 0, PC_REG, 0, 0, 0); //start address //FIXME: RAT/ROB move?
            }
            
            for(i=0; i < 15; i++) {
              if(reg_list & 1) {
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, free_reg_list[i], 0, 0, 0);
              }
              
              reg_list = reg_list >> 1;
            }
            
            if(reg_list & 1) { //check bit 15 which is the bit for the PC_REG
              if(!S) {
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0); 

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RET, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0); 
              }
              else { //UNPREDICTABLE in USER or SYSTEM MODE
                //copy SPSR -> LREG_CPSR;
              }
            }
        } //end loads
        else { //stores STMDA (STMED)
            if(RN != PC_REG)
              CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, (count*4), LREG_TMP2, 0, 0, 0); //start address
            else { //UNPREDICTABLE
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
              copiedPC = true;
              CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, 0, (count*4), LREG_TMP2, 0, 0, 0); //start address
            }
            
            if(W) { //writeback
              if(RN != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
              else  //UNPREDICTABLE
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 0, PC_REG, 0, 0, 0); //FIXME: RAT/ROB move?
            }
            
            for(i=0; i < 16; i++) {
              if(reg_list & 1) {
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
                if(i == 15) {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, LREG_TMP3, 0, 0, 0, 0, 0);
                }
                else
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, free_reg_list[i], 0, 0, 0, 0, 0);
              }
              
              reg_list = reg_list >> 1;
            }
        } //end stores
      } //end decrement after
      else if(!P && U) { //increment after
        if(L) { //loads LDMIA (LDMFD)
            while(!(reg_list & 1)) { //find the first set bit
              reg_list = reg_list >> 1;
              i++;
            }
            
            if(RN != PC_REG) {
              CrackInst::setup(rinst, iRALU, OP_iRALU_move, RN, 0, 0, LREG_TMP2, 0, 0, 0);
            }else { //UNPREDICTABLE
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
              copiedPC = true;
              CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_TMP3, 0, 0, LREG_TMP2, 0, 0, 0);
            }

            if((reg_list & 1) && (i != 15)) { //make sure that bit 15 is not the only bit set
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, free_reg_list[i], 0, 0, 0);
              
              i++;
              reg_list = reg_list >> 1;
            }
            
            for(; i < 15; i++) {
              if(reg_list & 1) {
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, free_reg_list[i], 0, 0, 0);
              }
              
              reg_list = reg_list >> 1;
            }
            
            if(reg_list & 1) { //check bit 15 which is the bit for the PC_REG
              if(!S) {
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
  
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0);
                
                if(W && writeback) { //writeback
                  if(RN != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (count*4), RN, 0, 0, 0);
                  else { //UNPREDICTABLE
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, 0, (count*4), LREG_TMP1, 0, 0, 0);
                  }
                    
                  writeback = !writeback; //incase c++ program decides to continue expanding after the jump
                }
                
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0); 

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RET, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0); 
              }
              else { //UNPREDICTABLE in USER or SYSTEM MODE
                //copy SPSR -> LREG_CPSR;
              }
            }
            
            if(W && writeback) { //writeback
              if(RN != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (count*4), RN, 0, 0, 0);
              else { //UNPREDICTABLE
                if(!copiedPC) {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                }
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, (count*4), LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0); 
              }
            }
        } //end loads
        else { //stores STMIA (STMEA)
            while(!(reg_list & 1)) { //find the first set bit
              reg_list = reg_list >> 1;
              i++;
            }
            
            uint8_t addr_reg = -1;

            if((reg_list & 1) && (i != 15)) { //make sure that bit 15 is not the only bit set
              if(RN != PC_REG) {
                addr_reg = RN;
              }else { //UNPREDICTABLE
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                copiedPC = true;
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP3, 0, 0, LREG_TMP2, 0, 0, 0);
                addr_reg = LREG_TMP2;
              }
                
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, addr_reg, free_reg_list[i], 0, 0, 0, 0, 0);
              
              i++;
              reg_list = reg_list >> 1;
              first_use = !first_use;
            }
            I(addr_reg = RN || addr_reg == LREG_TMP2);
            
            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, addr_reg, 0, 0, LREG_TMP5, 0, 0, 0);
            for(; i < 15; i++) {
              if(reg_list & 1) {
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP5, free_reg_list[i], 0, 0, 0, 0, 0);
              }
              
              reg_list = reg_list >> 1;
            }
            
            if(reg_list & 1) { //check bit 15 which is the bit for the PC_REG
              if(first_use) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, RN, 0, 0, LREG_TMP2, 0, 0, 0);
                else { //UNPREDICTABLE
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP3, 0, 0, LREG_TMP2, 0, 0, 0);
                }
              }
              else
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);

              if(!copiedPC) {
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                copiedPC = true;
              }
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, LREG_TMP3, 0, 0, 0, 0, 0);
            }
            
            if(W && writeback) { //writeback
              if(RN != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (count*4), RN, 0, 0, 0);
              else { //UNPREDICTABLE
                if(!copiedPC) {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                }
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, (count*4), PC_REG, 0, 0, 0);
              }
            }
        } //end stores
      } //end increment after
      else if(P && !U) { //decrement before
        if(L) { //loads LDMDB (LDMEA)
            if(RN != PC_REG)
              CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, (count*4), LREG_TMP2, 0, 0, 0); //start address
            else { //UNPREDICTABLE
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
              copiedPC = true;
              CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP3, 0, (count*4), LREG_TMP2, 0, 0, 0); //start address
            }
            
            if(W) { //writeback
              if(RN != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
              else  //UNPREDICTABLE
                ;
            }
            
            while(!(reg_list & 1)) { //find the first set bit
              reg_list = reg_list >> 1;
              i++;
            }
            
            if((reg_list & 1) && (i != 15)) { //make sure that bit 15 is not the only bit set
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, free_reg_list[i], 0, 0, 0);

              i++;
              reg_list = reg_list >> 1;
              first_use = !first_use;
            }
            
            for(; i < 15; i++) {
              if(reg_list & 1) {
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, free_reg_list[i], 0, 0, 0);
              }
              
              reg_list = reg_list >> 1;
            }
            
            if(reg_list & 1) { //check bit 15 which is the bit for the PC_REG
              if(!S) {
                if(!first_use)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
                
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0); 

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0); 
              }
              else { //UNPREDICTABLE in USER or SYSTEM MODE
                //copy SPSR -> LREG_CPSR;
              }
            }
        } //end loads
        else { //stores STMDB (STMFD)
            if(RN != PC_REG)
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, RN, 0, (count*4), LREG_TMP2, 0, 0, 0); //start address
            else { //UNPREDICTABLE
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
              copiedPC = true;
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, LREG_TMP3, 0, (count*4), LREG_TMP2, 0, 0, 0); //start address
            }
            
            if(W) { //writeback
              if(RN != PC_REG)
                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_TMP2, 0, 0, RN, 0, 0, 0);
              else  //UNPREDICTABLE
                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_TMP2, 0, 0, PC_REG, 0, 0, 0);
            }
            
            while(!(reg_list & 1)) { //find the first set bit
              reg_list = reg_list >> 1;
              i++;
            }
            
            if((reg_list & 1) && (i != 15)) { //make sure that bit 15 is not the only bit set
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, free_reg_list[i], 0, 0, 0, 0, 0);
              
              i++;
              reg_list = reg_list >> 1;
              first_use = !first_use;
            }
            
            for(; i < 16; i++) {
              if(reg_list & 1) {
                if(first_use) {
                  if(i==15) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, LREG_TMP3, 0, 0, 0, 0, 0);
                  }
                  else
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, free_reg_list[i], 0, 0, 0, 0, 0);

                  first_use = !first_use;
                }
                else
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
                
                  if(i==15) {
                    if(!copiedPC) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                      copiedPC = true;
                    }
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, LREG_TMP3, 0, 0, 0, 0, 0);
                  }
                  else
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, free_reg_list[i], 0, 0, 0, 0, 0);
              }
              
              reg_list = reg_list >> 1;
            }
        } //end stores
      } //end decrement before
      else { //increment before
        if(L) { //loads LDMIB (LDMED)
          for(i=0; i < 15; i++) {
            if(reg_list & 1) {
              if(first_use) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0); //start address
                else { //UNPREDICTABLE
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, 4, LREG_TMP2, 0, 0, 0); //start address
                }
                
                first_use = !first_use;
              }
              else
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
              
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, free_reg_list[i], 0, 0, 0);
            }
            
            reg_list = reg_list >> 1;
          }
          
          if(reg_list & 1) { //check bit 15 which is the bit for the PC_REG
            if(!S) {
              if(first_use) {
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0); //start address
                else { //UNPREDICTABLE
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, 4, LREG_TMP2, 0, 0, 0); //start address
                }
              }
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0);
              
              if(W && writeback) { //writeback
                if(RN != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (count*4), RN, 0, 0, 0);
                else {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, (count*4), PC_REG, 0, 0, 0);
                }
              }
              
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, THUMB, LREG_TTYPE, 0, 0, 0); 

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
              CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0); 
            }
            else { //UNPREDICTABLE in USER or SYSTEM MODE
              //copy SPSR -> LREG_CPSR;
            }
          }
          
          if(W && writeback) { //writeback
            if(RN != PC_REG)
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (count*4), RN, 0, 0, 0);
            else {
              if(!copiedPC) {
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                copiedPC = true;
              }
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, (count*4), PC_REG, 0, 0, 0);
            }
          }
        } //end loads
        else { //stores STMIB (STMFA)
            for(i=0; i < 16; i++) {
              if(reg_list & 1) {
                if(first_use) {
                  if(RN != PC_REG) 
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0);
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP3, 0, 4, LREG_TMP2, 0, 0, 0);
                  }

                  first_use = !first_use;
                }
                else
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
                  
                if(i==15) {
                  if(!copiedPC) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                    copiedPC = true;
                  }
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, LREG_TMP3, 0, 0, 0, 0, 0);
                }
                else
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP2, free_reg_list[i], 0, 0, 0, 0, 0);
              }
              
              reg_list = reg_list >> 1;
            }
            
            if(W && writeback) { //writeback
              if(RN != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (count*4), RN, 0, 0, 0);
              else {
                if(!copiedPC) {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP3, 0, 0, 0);
                  copiedPC = true;
                }
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, 0, (count*4), PC_REG, 0, 0, 0);
              }
            }
        } //end stores
      } //end increment before
    } //end Load/Store mulitple
    else { //Branch
      uint8_t link = b24;

      if(cond != AL) { //not always
        if(link) {
          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LINK, 0, LINK, 0, 0, 0);
        }
        
        CrackInst::setup(rinst, iBALU_LBRANCH, lbranchArray[cond], LREG_ICC, 0, static_cast<uint32_t>(PC+BROFF+8), 0, 0, 0, 0);
      } //end not always
      else { //always executed
        if(link) {
          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LINK, 0, 0, 0);
          CrackInst::setup(rinst, iBALU_LCALL, OP_U64_JMP_IMM, 0, 0, static_cast<uint32_t>(PC+BROFF+8), 0, 0, 0, 0);
        }
        else
          CrackInst::setup(rinst, iBALU_LJUMP, OP_U64_JMP_IMM, 0, 0, static_cast<uint32_t>(PC+BROFF+8), 0, 0, 0, 0);
      } //end always executed
    } // end Branch
  
    return;
  } 
  else if(sgroup == 0x3) { //Coproccessor
    if(!b25 && b11 && !b10 && b9 && !(!b25 && !b24 && !b23 && !b21)) { //Advanced SIMD, VFP //Extension register ld/st A7-26
      if(!b24 && !b23 && b22 && !b21) { //64-bit transfers between ARM core and extension registers A7-32
        if(!b8 && !b7 && !b6 && b4) { //VMOV (between 2 ARM core registers and 2 single-precision registers) //A8-650
          //If RN or RD == PC_REG, UNPREDICTABLE;
          //If RM == 31, UNPREDICTABLE;
          
          VM = ((insn & 0xF) << 1) | b5;

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

          if(b20) { //to ARM
            if(!(VM % 2)) {
              VM = (VM>>1) + LREG_FP0;

              if(cond != AL) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RN, 0, RN, 0, 0, 0);
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, RD, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, RN, 0, 0, 0);
              }
            }
            else {
              VM1 = ((VM+1)>>1) + LREG_FP0;
              VM = (VM>>1) + LREG_FP0;

              if(cond != AL) {
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RN, 0, RN, 0, 0, 0);
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, RD, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, RN, 0, 0, 0);
              }
            }
          }
          else {
            if(!(VM % 2)) {
              VM = (VM>>1) + LREG_FP0;
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RN, 0, 32, LREG_TMP1, 0, 0, 0);

              if(cond != AL) {
                CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VM, 0, VM, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, VM, 0, 0, 0);
            }
            else {
              VM1 = ((VM+1)>>1) + LREG_FP0;
              VM = (VM>>1) + LREG_FP0;

              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);

              if(cond != AL) { 
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VM, 0, VM, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VM, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              if(cond != AL) {
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, RN, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VM1, 0, VM1, 0, 0, 0);
              }
              else 
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, RN, 0, VM1, 0, 0, 0);
            }
          }
        }
        else if(b8 && !b7 && !b6 && b4) { //VMOV (between 2 ARM core registers and a doubleword extension register) ///A8-652
          //If RN or RD == PC_REG, UNPREDICTABLE;
          //If RM == 31, UNPREDICTABLE;

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

          if(b20) { //to ARM
            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 32, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RN, 0, RN, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, RD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 32, RN, 0, 0, 0);
            }
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, RN, 0, 32, LREG_TMP1, 0, 0, 0);

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VM, 0, VM, 0, 0, 0);
            }
            else 
              CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, VM, 0, 0, 0);
          }
        }
      }
      else if((((b24 && !b23 && b21) && (RN != STACKPTR)) || (!b24 && b23 && !b21) || (!b24 && b23 && b21)) && !b20) { //Vector Store Multiple VSTM //A8-784
        //If RN == PC_REG and WRITEBACK, UNPREDICTABLE
        uint8_t U     = b23;
        uint8_t W     = b21;
        uint8_t P     = b24;

        uint8_t IMM8  = insn & 0xFF;
        uint8_t IMM32 = (0x000000FF && IMM8) * 4;

        uint8_t regs = 0xFF; //force initialization
        //int VD;
        int DV=0xFEFEFEFE; //Make sure it fails if used uninitialized! 

        uint8_t coproc = (insn>>8) & 0xF;
        bool single_regs = false; //force initialization
        bool big_endian = false;
        uint8_t i;

        if(coproc == 10) {
          VD = ((((insn>>12) & 0xF) << 1) | b22);
          single_regs = true;
          regs = IMM8;
        } else if(coproc == 11) {
          VD = (((insn>>12) & 0xF) | b22);
          single_regs = false;
          regs = IMM8/2;
        }

        if(cond != AL) {
          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
        }

        if(!P && U) {
          CrackInst::setup(rinst, iRALU, OP_iRALU_move, RN, 0, 0, LREG_TMP1, 0, 0, 0);
        } else {
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM32, LREG_TMP1, 0, 0, 0);
        }
/*        for(i = 0; i < regs; i++) {
          DV = (VD + i) + LREG_FP0;
          //printf("DV %d \n", DV);
          if(single_regs) {
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, DV, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ADDR, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
            */
        if(W) {
          if(!P && U) {
            CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM32, RN, 0, 0, 0);
          } else {
            CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM32, RN, 0, 0, 0);
          }
        }
        for(i = 0; i <= regs; i++)
        {
          if(single_regs)
          {
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, DV, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
          }
          else
          {
            if(big_endian) {
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, DV, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
            } else {
              CrackInst::setup(rinst, iAALU, OP_S64_AND, DV, 0, 0x0000FFFF, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
            }
            if(big_endian) {
              CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, DV, 0, 0x0000FFFF, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
            } else {
              CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, DV, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
            }
            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
            }
          }
      } //end VSTM vector store multiple
      else if(b24 && !b21 && !b20) { //VSTR vector store register //A8-786
        uint8_t U = b23;
        uint8_t IMM8 = insn & 0xFF;
        uint8_t coproc = (insn>>8) & 0xF;
        bool single_regs = false; //force initialization
        bool big_endian = false;

        if(cond != AL) {
          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
        }

        if(coproc == 10) {
          VD = ((((insn>>12) & 0xF) << 1) | b22); 
          single_regs = true;
        }
        else if(coproc == 11)
          single_regs = false;

        if(U) {
          if(RN != PC_REG)
            CrackInst::setup(rinst, iSALU_ADDR, OP_S32_ADD, RN, 0, (IMM8<<2), LREG_TMP1, 0, 0, 0);
          else {
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ADDR, OP_S32_ADD, LREG_TMP1, 0, (IMM8<<2), LREG_TMP1, 0, 0, 0);
          }
        }
        else {
          if(RN != PC_REG)
            CrackInst::setup(rinst, iSALU_ADDR, OP_S32_SUB, RN, 0, (IMM8<<2), LREG_TMP1, 0, 0, 0);
          else {
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+8), LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ADDR, OP_S32_SUB, LREG_TMP1, 0, (IMM8<<2), LREG_TMP1, 0, 0, 0);
          }
        }

        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

        if(single_regs) {
          if(!(VD % 2)) {
            VD = (VD>>1) + LREG_FP0;
            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
          }
          else {
            VD = (VD>>1) + LREG_FP0;
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
          }
        }
        else {
          if(big_endian) {
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
          }
        }
      } //end VSTR vector store register
      else if(((b24 && !b23 && b21) && (RN == STACKPTR)) && !b20) { //VPUSH //A8-696
        uint8_t coproc = (insn>>8) & 0xF;

        if(cond != AL) {
          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
        }
        
        CrackInst::setup(rinst, iSALU_ADDR, OP_S64_SUB, STACKPTR, 0, (IMM8 << 2), LREG_TMP1, 0, 0, 0); //addr
        CrackInst::setup(rinst, iAALU, OP_S64_SUB, STACKPTR, 0, (IMM8 << 2), STACKPTR, 0, 0, 0); 

        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

        if(coproc == 10) {
          VD = ((((insn>>12) & 0xF) << 1) | b22);
          uint32_t regs = IMM8;
          uint8_t j = 0;

          for(uint8_t i = 0; i < regs; i++) {
            if(!(i % 2)) {
              CrackInst::setup(rinst, iAALU, OP_S64_AND, ((VD+i)/2)+LREG_FP0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, ((VD+i)/2)+LREG_FP0, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
            }

            if(++j < regs)
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
          }
        }
        else if(coproc == 11) {
          uint32_t regs = IMM8/2;
          uint8_t j = 0;
          bool big_endian = false;

          if(big_endian) {
            for(uint8_t i = 0; i < regs; i++) {
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, ((VD+i)/2)+LREG_FP0, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_AND, ((VD+i)/2)+LREG_FP0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

              if(++j < IMM8)
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
            }
          }
          else {
            for(uint8_t i = 0; i < regs; i++) {
              CrackInst::setup(rinst, iAALU, OP_S64_AND, ((VD+i)/2)+LREG_FP0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_SRL, ((VD+i)/2)+LREG_FP0, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

              if(++j < IMM8)
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
            }
          }
        }
      }
      else if((((!b24 && b23 && b21) && (RN != STACKPTR)) || (!b24 && b23 && !b21) || (b24 && !b23 && b21)) && b20 && b11 && !b10 && b9) { // VLDM, vector load multiple
        uint8_t U     = b23;
        uint8_t W     = b21;
        uint8_t P     = b24;

        uint8_t IMM8  = insn & 0xFF;
        uint8_t IMM32 = 0xFFFFFFFF || IMM8; //zero-extend
        uint8_t regs = 0xFF; //force initialization
        int VD;
        int DV;
        uint8_t coproc = (insn>>8) & 0xF;
        bool single_regs = false; // force initialization
        bool big_endian = false;

        uint8_t i;

        //printf("VLDM instruction \n");

        if(coproc == 10) {
         VD = ((((insn>>12) & 0xF) << 1) | b22);
         single_regs = true;
         regs = IMM8;
        } else if(coproc == 11) {
          VD = (((insn>>12) & 0xF) | b22);
          single_regs = false;
          regs = IMM8/2;
        }
        //printf ("VLDM: vd %d \n", VD);

        if(cond != AL) { //not always
          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
        } //end not always

        if(!P && U) {
          // IA
          CrackInst::setup(rinst, iRALU, OP_iRALU_move, RN, 0, 0, LREG_TMP1, 0, 0, 0); 
          if(W)
            CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM32, RN, 0, 0, 0);
        } else if(P && !U) {
          // DB
          CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM32, LREG_TMP1, 0, 0, 0);
          if(W)
            CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM32, RN, 0, 0, 0);
        }
        for(i = 0; i < regs; i++) {
          DV = (VD + i) + LREG_FP0;
          if(single_regs) {
            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, DV, 0, 0, 0);
            CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
          } else {
              
            if(big_endian) {
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, DV, 0, 0, 0);

              CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);

            } else {
              CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, DV, 0, 0, 0);

              CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
            }
          }
        }
      }
      else if((((!b24 && b23 && b21) && (RN == STACKPTR))) && b20) { //Vector Pop Registers VPOP //A8-694
        //If RN == PC_REG and WRITEBACK, UNPREDICTABLE
        uint8_t IMM8 = insn & 0xFF;
        uint32_t IMM32 = IMM8 << 2;
        uint8_t regs  = 0xFF; //force initialization
        int DV;
        uint8_t coproc = (insn>>8) & 0xF;
        bool first_use = true;
        bool single_regs;
        bool big_endian = false;

        uint8_t i, j;

        if(cond != AL) { //not always
          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
        } //end not always

        if(coproc == 10) {
          VD = ((((insn>>12) & 0xF) << 1) | b22); 
          DV = VD;
          single_regs = true;
          regs = IMM8/2;
        } else if(coproc == 11) {
          DV = VD;
          single_regs = false;
          regs = IMM8;
        } else {
          I(0); // THis should never happen
          DV = VD;
          single_regs = false;
          regs = IMM8;
        }

        if(single_regs) {
          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

          for(i = 0; i < regs; i++) {
            j = i;


            if(first_use) {
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR, 0, 0, LREG_TMP1, 0, 0, 0);

              if(++j < regs)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, STACKPTR, 0, 4, LREG_TMP2, 0, 0, 0);

              first_use = false;
            }
            else {
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0);

              if(++j < regs)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);

            }

            VD = ((DV+i)>>1) + LREG_FP0;

            if(!((DV+i) % 2)) {
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
            }

            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);

          }

        }
        else {
          for(i = 0; i < regs; i++) {
            j = i;

            if(first_use) {
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, STACKPTR, 0, 4, LREG_TMP3, 0, 0, 0);

              first_use = false;
            }
            else {
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, 0, 4, LREG_TMP3, 0, 0, 0);
            }

            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, LREG_TMP2, 0, 0, 0);

            if(++j < regs)
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, 0, 4, LREG_TMP3, 0, 0, 0);

            if(big_endian)
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, (VD+i), 0, 0, 0);

          }

          CrackInst::setup(rinst, iAALU, OP_S32_ADD, STACKPTR, 0, IMM32, STACKPTR, 0, 0, 0);
        }
      } //end VPOP Vector Pop Registers
      else if(b24 && !b21 && b20 && b11 && !b10 && b9) { //VLDR vector load register //A8-628
        //If RN == PC_REG and WRITEBACK, UNPREDICTABLE
        uint8_t U = b23;
        uint8_t IMM8 = insn & 0xFF;
        uint32_t IMM32 = IMM8 << 2;
        bool single_regs = false;

        uint8_t coproc = (insn>>8) & 0xF;
        bool big_endian = false;


        if(cond != AL) { //not always
          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
          CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
        } //end not always

        if(coproc == 10) {
          VD = ((((insn>>12) & 0xF) << 1) | b22); 
          single_regs = true;
        }
        else if (coproc == 11)
          single_regs = false;

        if(U) {
          if(RN != PC_REG)
            CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM32, LREG_TMP1, 0, 0, 0);
          else
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(((PC+8) & 0xFFFFFFFC) + IMM32), LREG_TMP1, 0, 0, 0);
        }
        else {
          if(RN != PC_REG)
            CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM32, LREG_TMP1, 0, 0, 0);
          else
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(((PC+8) & 0xFFFFFFFC) - IMM32), LREG_TMP1, 0, 0, 0);
        }

        if(single_regs) {
          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

          if(!(VD % 2)) {
            VD = (VD>>1) + LREG_FP0;
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
          }
          else {
            VD = (VD>>1) + LREG_FP0;
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
          }

          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
        }
        else {
          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);

          if(big_endian) {
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
          }
        }
      } //end VLDR vector load register
    }
    else if(!b25 && !b20 && !(b11 && !b10 && b9) && !(!b25 && !b24 && !b23 && !b21)) { //STC/STC2 //A8-372 //NEEDTODO
          OOPS("WARNING: STC/STC2 is NOT IMPLEMENTED.\n");
    }
    else if(!b25 && b20 && !(b11 && !b10 && b9) && !(!b25 && !b24 && !b23 && !b21)) { //LDC/LDC2 //A8-106 //NEEDTODO
      if(RN !=PC_REG ) { //LDC/LDC2 imm //A8-106 //NEEDTODO
          OOPS("WARNING: LDC imm is NOT IMPLEMENTED.\n");
      } 
      else { //LDC/LDC2 literal //A8-108 //NEEDTODO
          OOPS("WARNING: LDC literal is NOT IMPLEMENTED.\n");
      }
    }
    else if(!b25 && !b24 && !b23 && !b22 && !b21) { //UNDEFINED
      OOPS("Error: UNDEFINED Instruction in Coprocessor Space\n");
    }
    else if(!b25 && !b24 && !b23 && b22 && !b21 && !b20 && !(b11 && !b10 && b9)) { //MCRR/MCRR2 //A8-188 //NEEDTODO
      OOPS("WARNING: MCRR/MCRR2 is NOT IMPLEMENTED.\n");
    } 
    else if(!b25 && !b24 && !b23 && b22 && !b21 && b20 && !(b11 && !b10 && b9)) { //MRRC //A8-204 //Encoding A1 //NEEDTODO
      //If RD == PC_REG or RN == PC_REG or RN == RT, UNPREDICTABLE
      OOPS("WARNING: MRRC is NOT IMPLEMENTED.\n");
    } //end MRRC
    else if(b25 && !b24 && !b20 && !(b11 && !b10 && b9) && b4) { //MCR/MCR2 //A8-186 //NEEDTODO
      OOPS("WARNING: MCR/MCR2 is NOT IMPLEMENTED.\n");
    } //end MCR
    else if(b25 && !b24 && b20 && !(b11 && !b10 && b9) && b4) { //MRC //A8-202 //Encoding A1
      uint8_t CRN = (insn>>16) & 0xF;
      uint8_t CRM = insn & 0xF;
      uint8_t opc1 = (insn>>21) & 0x7;
      uint8_t opc2 = (insn>>5) & 0x7;

      if(cond != AL) { //not always
        CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
        CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
      } //end not always

      // push r0 (it will have SYSMEM for the syscall (arg1), r7
      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
      CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);
    
      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
    
      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, CRN, 0, 0, 0, 0);
      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, CRM, 0, 0, 0, 0);
      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((opc1 << 3) | opc2), LREG_TMP2, 0, 0, 0);
      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
      CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_MRC, 8, 0, 0, 0);
      CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
    
      // pop r0, r7
      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
      CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0);
    } //end MRC
    else if(b25 && !b24) {
      if(!b4 && (b11 && !b10 && b9)) { //VFP data-processing instructions //A7-24
        uint8_t opc1 = (insn >> 20) & 0xF;
        uint8_t opc2 = (insn >> 16) & 0xF;
        uint8_t opc3 = (insn >> 6) & 0x3;

        switch(opc1) {
          case 0: //VMLA/VMLS (floating-point) //A8-636
          case 4:
            if(b8) {
              VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
              VN = ((b7 << 4) | ((insn >> 16) & 0xF)) + LREG_FP0;
              VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

              if(cond != AL) {
                if(!b6) //VMLA
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                else { //VMLS
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, VD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 1);

                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
              }
              else {
                if(!b6) //VMLA
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                else { //VMLS
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, VD, LREG_TMP1, 0, VD, 0, 0, 1);
              }
            }
            else {
              VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
              VN = ((((insn >> 16) & 0xF) << 1) | b7) + LREG_FP0;
              VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

              CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

              if(!(VD % 2)) { //bottom 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                }

                if(!b6) //VMLA
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                else { //VMLS
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);
              }
              else { //top 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                }

                if(!b6) //VMLA
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                else { //VMLS
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);
              }
            }
            break;
          case 1: //Vector Negate Multiply Accumulate or Subtract VNMLA/VNMLS //A8-674 //Encoding A1
          case 5:
            if(b8) {
              VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
              VN = ((b7 << 4) | ((insn >> 16) & 0xF)) + LREG_FP0;
              VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, VD, 0, 0, LREG_TMP1, 0, 0, 1);
              CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, LREG_TMP2, 0, 0, 1);

              if(b6) //VNMLA
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);

              if(cond != AL) {
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 1);
            }
            else {
              VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
              VN = ((((insn >> 16) & 0xF) << 1) | b7) + LREG_FP0;
              VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

              CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

              if(!(VD % 2)) { //bottom 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP5, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);

                if(b6) { //VNMLA
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);
                }
                else //VNMLS
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);

              }
              else { //top 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);

                if(b6) { //VNMLA
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);
                }
                else //VNMLS
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                }
                else 
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);
              }
            }
            break;
          case 2:
          case 6:
            switch(opc3) {
              case 0: //VMUL (floating-point) //A8-664 
              case 2:
                if(b8) {
                  VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
                  VN = ((b7 << 4) | ((insn >> 16) & 0xF)) + LREG_FP0;
                  VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                  if(cond != AL) {
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  }
                  else
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, VD, 0, 0, 1);
                }
                else {
                  VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                  VN = ((((insn >> 16) & 0xF) << 1) | b7) + LREG_FP0;
                  VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

                  if(!(VD % 2)) { //bottom 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                    }

                    if(!(VN % 2)) { //bottom 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                    }
                    else { //top 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);

                    if(cond != AL) {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                  else { //top 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                    }

                    if(!(VN % 2)) { //bottom 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                    }
                    else { //top 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                }
                break;
              case 1: //Vector Negate Multiply VNMUL //A8-674 //Encoding A2
              case 3:
                if(b8) {
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, LREG_TMP1, 0, 0, 1);

                  if(cond != AL) {
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  }
                  else
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, LREG_TMP1, 0, 0, VD, 0, 0, 1);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

                  if(!(VD % 2)) { //bottom 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                    }

                    if(!(VN % 2)) { //bottom 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                    }
                    else { //top 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);

                    if(cond != AL) {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                  else { //top 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                    }

                    if(!(VN % 2)) { //bottom 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                    }
                    else { //top 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                }
                break;
            }
            break;
          case 3:
          case 7:
            switch(opc3) {
              case 0: //VADD (floating-point) //A8-538
              case 2:
                if(b8) {
                  VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
                  VN = ((b7 << 4) | ((insn >> 16) & 0xF)) + LREG_FP0;
                  VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                  if(cond != AL) {
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  }
                  else
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, VN, VM, 0, VD, 0, 0, 1);
                }
                else {
                  VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                  VN = ((((insn >> 16) & 0xF) << 1) | b7) + LREG_FP0;
                  VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

                  if(!(VD % 2)) { //bottom 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                    }

                    if(!(VN % 2)) { //bottom 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                    }
                    else { //top 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);

                    if(cond != AL) {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                  else { //top 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                    }

                    if(!(VN % 2)) { //bottom 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                    }
                    else { //top 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                }
                break;
              case 1: //VSUB(floating-point) //A8-790
              case 3:
                if(b8) {
                  VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
                  VN = ((b7 << 4) | ((insn >> 16) & 0xF)) + LREG_FP0;
                  VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                  if(cond != AL) {
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  }
                  else
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBD, VN, VM, 0, VD, 0, 0, 1);
                }
                else {
                  VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                  VN = ((((insn >> 16) & 0xF) << 1) | b7) + LREG_FP0;
                  VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

                  if(!(VD % 2)) { //bottom 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                    }

                    if(!(VN % 2)) { //bottom 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                    }
                    else { //top 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);

                    if(cond != AL) {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                  else { //top 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                    }

                    if(!(VN % 2)) { //bottom 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                    }
                    else { //top 32-bits of VN
                      VN = (VN >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                }
                break;
            }
            break;
          case 8: //VDIV //A8-590
          case 12:
            if(b8) {
              VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
              VN = ((b7 << 4) | ((insn >> 16) & 0xF)) + LREG_FP0;
              VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

              if(cond != AL) {
                CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, VN, VM, 0, VD, 0, 0, 1);
            }
            else {
              VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
              VN = ((((insn >> 16) & 0xF) << 1) | b7) + LREG_FP0;
              VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

              CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

              if(!(VD % 2)) { //bottom 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
              else { //top 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
            }
            break;
          case 11: //Other VFP Data-Processing
          case 15:
            if(!b6) { //VMOV (immediate) //A8-640 //Encoding A2
              uint32_t IMM32;

              if(!b8) {
                VD = ((((insn>>12) & 0xFFFF) << 1) | b22);
                if(b19) {
                  IMM32 = (b20 << 31) | (0 << 30) | (b18 << 29) | (b18 << 28) | (b18 << 27) | (b18 << 26) | 
                        (b18 << 25) | (((((b17<<1) | b16) << 4) | (insn & 0xFFFF)) << 19);
                }
                else {
                  IMM32 = (b20 << 31) | (1 << 30) | (b18 << 29) | (b18 << 28) | (b18 << 27) | (b18 << 26) | 
                        (b18 << 25) | (((((b17<<1) | b16) << 4) | (insn & 0xFFFF)) << 19);
                }

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, IMM32, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                if(!(VD % 2)) {
                  VD = (VD >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                }
                else {
                  VD = (VD >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                }

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
              else {
                VD = ((b22 << 4) | ((insn>>12) & 0xFFFF))  + LREG_FP0;
                VD1 = VD + 1;

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, ((((b17<<1) | b16) << 4) | (insn & 0xFFFF)), LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);

                if(b19) {
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, ((b20<<9) | (0<<8) | (b18<<7) | (b18<<6) | 
                                 (b18<<5) | (b18<<4) | (b18<<3) | (b18<<2) | (b18<<1) | b18), LREG_TMP2, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, ((b20<<9) | (1<<8) | (b18<<7) | (b18<<6) | 
                                 (b18<<5) | (b18<<4) | (b18<<3) | (b18<<2) | (b18<<1) | b18), LREG_TMP2, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 53, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                }
              }
            }
            else {
              switch(opc2) {
                case 0:
                  switch(opc3) {
                    case 1: //VMOV (register) //A8-642
                      if(!b8) {
                        VD = ((((insn>>12) & 0xFFFF) << 1) | b22);
                        VM = (((insn & 0xFFFF) << 1) | b5);

                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(!(VD % 2)) {
                          VD = (VD >> 1) + LREG_FP0;

                          if(!(VM%2)) {
                            VM = (VM >> 1) + LREG_FP0;

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }
                          else {
                            VM = (VM >> 1) + LREG_FP0;

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        }
                        else {
                          VD = (VD >> 1) + LREG_FP0;

                          if(!(VM % 2)) {
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          }
                          else {
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          }
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) {
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        }
                        else
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                      }
                      else {
                        VD = ((b22 << 4) | ((insn>>12) & 0xFFFF))  + LREG_FP0;
                        VD1 = VD + 1;

                        VM = ((b5 << 4) | (insn & 0xFFFF))  + LREG_FP0;
                        VM1 = VM + 1;

                        if(cond != AL) {
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, VM, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, VM1, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD1, 0, VD1, 0, 0, 0);
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, 0, VD, 0, 0, 0); //FIXME: RAT/ROB move?
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, 0, VD1, 0, 0, 0); //FIXME: RAT/ROB move?
                        }
                      }
                      break;
                    case 3: //VABS //A8-532 //Encoding A2
                      if(b8) {
                        VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
                        VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                        if(cond != AL) {
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSD, VM, 0, 0, LREG_TMP1, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        }
                        else {
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSD, VM, 0, 0, VD, 0, 0, 1);
                        }
                      }
                      else {
                        VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                        VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                        if(!(VD % 2)) { //bottom 32-bits of VD
                          VD = (VD >> 1) + LREG_FP0;

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                          if(!(VM % 2)) { //bottom 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          }
                          else { //top 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);

                          if(cond != AL) {
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                          }
                          else
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                        }
                        else { //top 32-bits of VD
                          VD = (VD >> 1) + LREG_FP0;

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                          if(!(VM % 2)) { //bottom 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          }
                          else { //top 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                          if(cond != AL) {
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                          }
                          else 
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                        }
                      }
                      break;
                    default:
                      OOPS("Error: UNDEFINED Instruction in Other VFP Data-Processing 1 Space.\n");
                      break;
                  }
                  break;
                case 1:
                  switch(opc3) {
                    case 1: //VNEG //A8-672
                      if(b8) {
                        VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
                        VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                        if(cond != AL) {
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        }
                        else
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, VM, 0, 0, VD, 0, 0, 1);
                      }
                      else {
                        VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                        VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

                        if(!(VD % 2)) { //bottom 32-bits of VD
                          VD = (VD >> 1) + LREG_FP0;

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                          if(!(VM % 2)) { //bottom 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                          }
                          else { //top 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 1);

                          if(cond != AL) {
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                          }
                          else
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                        }
                        else { //top 32-bits of VD
                          VD = (VD >> 1) + LREG_FP0;

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                          if(!(VM % 2)) { //bottom 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                          }
                          else { //top 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                          if(cond != AL) {
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                          }
                          else
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                        }
                      }
                      break;
                    case 3: //VSQRT //A8-762
                      if(b8) {
                        VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
                        VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                        if(cond != AL) {
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        }
                        else
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, VM, 0, 0, VD, 0, 0, 1);
                      }
                      else {
                        VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                        VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

                        if(!(VD % 2)) { //bottom 32-bits of VD
                          VD = (VD >> 1) + LREG_FP0;

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                          if(!(VM % 2)) { //bottom 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                          }
                          else { //top 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTS, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 1);

                          if(cond != AL) {
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                          }
                          else
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                        }
                        else { //top 32-bits of VD
                          VD = (VD >> 1) + LREG_FP0;

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                          if(!(VM % 2)) { //bottom 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                          }
                          else { //top 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTS, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                          if(cond != AL) {
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                          }
                          else
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                        }
                      }
                      break;
                    default:
                      OOPS("Error: UNDEFINED Instruction in Other VFP Data-Processing 2 Space.\n");
                      break;
                  }
                  break;
                case 2:
                  if(b6) { //VCVTB/VCVTT (between single-precision and half-precision VFP) //A8-588
                    //OOPS("WARNING: VCVTB/VCVTT (between single-precision and half-precision VFP) is NOT IMPLEMENTED.\n");
                    if(cond != AL) { // check condition code
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
                    }
                    // get values from instruction
                    VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;
                    VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                    
                    // push r0 (it will have SYSMEM for the syscall (arg1), r7
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                    // store values in memory
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_SYSMEM, 0, 8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, VD, 0, 0, 0, 0, 0);
                    
                    if(b7) { //VCVTB
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VCVTB_STOH, 8, 0, 0, 0);
                    }
                    else { //VCVTT
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VCVTT_STOH, 8, 0, 0, 0);
                    }
                    
                    // retrieve result of complex funtion from memory
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                    
                    // pop r0, r7
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    
                    // load result into destination
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                  }
                  break;
                case 3:
                  if(b6) { //VCVTB/VCVTT (between half-precision and single-precision VFP) //A8-878
                    //OOPS("WARNING: VCVTB/VCVTT (between half-precision and single-precision VFP) is NOT IMPLEMENTED.\n");
                    if(cond != AL) { // check condition code
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
                    }
                    // get values from instruction
                    VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;
                    VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                    
                    // push r0 (it will have SYSMEM for the syscall (arg1), r7
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);
                    
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    
                    if(b7) { //VCVTB
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VCVTB_HTOS, 8, 0, 0, 0);
                    }
                    else { //VCVTT
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VCVTT_HTOS, 8, 0, 0, 0);
                    }
                    
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                    
                    // pop r0, r7
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                  }
                  break;
                case 4:
                case 5:
                  if(b6) { //VCMP/VCMPE //A8-572
                    //FIXME: need to account for QUIET NAN EXECUTE
                    if(!b5) { //Encoding A2
                      if(b8) {
                        VD = ((b22 << 4) | ((insn>>12) & 0xFFFF))  + LREG_FP0;

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBD, VD, 0, 0, LREG_TMP1, 0, 0, 1);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 6, LREG_TMP2, 0, 0, 0); //ARM EQ = 0b0110;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 8, LREG_TMP3, 0, 0, 0); //ARM LESS = 0b1000;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 2, LREG_TMP3, 0, 0, 0); //ARM GREATER = 0b0010;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 3, LREG_TMP3, 0, 0, 0); //ARM UNORDERED = 0b0011;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_VS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 28, LREG_TMP1, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x0FFFFFFF, LREG_TMP2, 0, 0, 0); 

                        if(cond != AL) {
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, 0, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        }
                        else
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP1, 0, LREG_FSR, 0, 0, 0); 
                      }
                      else {
                        VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;

                        if(!(VD % 2)) { //bottom 32-bits of VD
                          VD = (VD >> 1) + LREG_FP0;

                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 6, LREG_TMP2, 0, 0, 0); //ARM EQ = 0b0110;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 8, LREG_TMP3, 0, 0, 0); //ARM LESS = 0b1000;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 2, LREG_TMP3, 0, 0, 0); //ARM GREATER = 0b0010;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 3, LREG_TMP3, 0, 0, 0); //ARM UNORDERED = 0b0011;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_VS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 28, LREG_TMP1, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x0FFFFFFF, LREG_TMP2, 0, 0, 0); 

                          if(cond != AL) {
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, 0, 0, 0, 0); 
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          }
                          else
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_FSR, 0, 0, 0); 
                        }
                        else { //top 32-bits of VD
                          VD = (VD >> 1) + LREG_FP0;
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 6, LREG_TMP2, 0, 0, 0); //ARM EQ = 0b0110;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 8, LREG_TMP3, 0, 0, 0); //ARM LESS = 0b1000;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 2, LREG_TMP3, 0, 0, 0); //ARM GREATER = 0b0010;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 3, LREG_TMP3, 0, 0, 0); //ARM UNORDERED = 0b0011;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_VS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 28, LREG_TMP1, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x0FFFFFFF, LREG_TMP2, 0, 0, 0); 

                          if(cond != AL) {
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, 0, 0, 0, 0); 
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          }
                          else
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_FSR, 0, 0, 0); 
                        }
                      }
                    }
                    else { //Encoding A1
                      if(b8) {
                        VD = ((b22 << 4) | ((insn>>12) & 0xFFFF))  + LREG_FP0;
                        VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBD, VD, VM, 0, LREG_TMP1, 0, 0, 1);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 6, LREG_TMP2, 0, 0, 0); //ARM EQ = 0b0110;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 8, LREG_TMP3, 0, 0, 0); //ARM LESS = 0b1000;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 2, LREG_TMP3, 0, 0, 0); //ARM GREATER = 0b0010;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 3, LREG_TMP3, 0, 0, 0); //ARM UNORDERED = 0b0011;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_VS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 28, LREG_TMP1, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x0FFFFFFF, LREG_TMP2, 0, 0, 0); 

                        if(cond != AL) {
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, 0, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        }
                        else
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_FSR, 0, 0, 0); 
                      }
                      else {
                        VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                        VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

                        if(!(VD % 2)) { //bottom 32-bits of VD
                          VD = (VD >> 1) + LREG_FP0;

                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                          if(!(VM % 2)) { //bottom 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                          }
                          else { //top 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 6, LREG_TMP2, 0, 0, 0); //ARM EQ = 0b0110;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 8, LREG_TMP3, 0, 0, 0); //ARM LESS = 0b1000;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 2, LREG_TMP3, 0, 0, 0); //ARM GREATER = 0b0010;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 3, LREG_TMP3, 0, 0, 0); //ARM UNORDERED = 0b0011;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_VS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 28, LREG_TMP1, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x0FFFFFFF, LREG_TMP2, 0, 0, 0); 

                          if(cond != AL) {
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, 0, 0, 0, 0); 
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          }
                          else
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_FSR, 0, 0, 0); 
                        }
                        else { //top 32-bits of VD
                          VD = (VD >> 1) + LREG_FP0;

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);

                          if(!(VM % 2)) { //bottom 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                          }
                          else { //top 32-bits of VM
                            VM = (VM >> 1) + LREG_FP0;
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 6, LREG_TMP2, 0, 0, 0); //ARM EQ = 0b0110;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 8, LREG_TMP3, 0, 0, 0); //ARM LESS = 0b1000;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 2, LREG_TMP3, 0, 0, 0); //ARM GREATER = 0b0010;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 3, LREG_TMP3, 0, 0, 0); //ARM UNORDERED = 0b0011;
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_VS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 28, LREG_TMP1, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x0FFFFFFF, LREG_TMP2, 0, 0, 0); 

                          if(cond != AL) {
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, 0, 0, 0, 0); 
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          }
                          else
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_FSR, 0, 0, 0); 
                        }
                      }
                    }
                  }
                  break;
                case 7:
                  if(opc3 == 3) { //VCVT (between double-precision and single-precision) //A8-584
                    if(b8) {
                      VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                      VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;
                    }
                    else {
                      VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
                      VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;
                    }

                    if(cond != AL) {
                      if(b8) 
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOS, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                      else 
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOD, VM, 0, 0, LREG_TMP1, 0, 0, 1);

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                    else {
                      if(b8) 
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOS, VM, 0, 0, VD, 0, 0, 1);
                      else 
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOD, VM, 0, 0, VD, 0, 0, 1);
                    }
                  }
                  break;
                case 8:
                  //OOPS("WARNING: Vector Convert (VCVT) btwn fp and int is NOT IMPLEMENTED CORRECTLY.\n");
                  if(b6) { //VCVT/VCVTR (between floating-point and integer VFP) //A8-578 //FIXME: how to deal with rounding and un/signed values?
                    if(cond != AL) {
                      if(b18) { //fp->int
                        if(b8) {
                          VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                          if(!b16) { //unsigned
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                          }
                          else { //signed
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                          }
                        }
                        else {
                          VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

                          if(!b16) { //unsigned
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                            }
                          }
                          else { //signed
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                          }
                        }
                      }
                      else { //int->fp //selects rounding based on FPSCR
                        VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                        if(b8) {
                          VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                        }
                        else {
                          VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                    else {
                      if(b18) { //fp->int
                        if(b8) {
                          VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                          if(!b16) { //unsigned
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                          }
                          else { //signed
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                          }
                        }
                        else {
                          VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

                          if(!b16) { //unsigned
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                          }
                          else { //signed
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                          }
                        }
                      }
                      else { //int->fp //selects rounding based on FPSCR
                        VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                        if(b8) {
                          VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, VM, 0, 0, VD, 0, 0, 1);
                        }
                        else {
                          VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, VM, 0, 0, VD, 0, 0, 1);
                        }
                      }
                    }
                  }
                  break;
                case 10:
                case 11:
                  if(b6) { //VCVT (fixed-point to floating-point VFP) //A8-582 
                    size = b7? 2 : 1; //b7==1 size is 32bits; otherwise size is 16bits

                    if(cond != AL) {
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
                    }

                    VM = (((insn & 0xF) << 1) | b5) + LREG_FP0; //bit 3-0+bit5
                    // push r0 (it will have SYSMEM for the syscall (arg1), r7 ///////////////                                                          
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);
                    /////// end push ////////////////////////////////////////////////////////
                    /////// memory writing ////////////////////////////////////////////////
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, size, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, b8, 0, 0, 0, 0, 0);
                    ////////////////////////// end memory ///////////////////////////////
                    
                    OOPS("WARNING: VCVT (fixed-point to floating-point unsigned, VFP) is IMPLEMENTED in complexinst.\n");
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ADD, 0, 0, CINST_VCVTFXFP, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                    
                    // pop r0 r7 //////////////////////////////////////////////////////////                                                       
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    /// writing result to VD ///////
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                    /////////////////////////end of pop r0 r7 ////////////////////////////
                  }//end of b6 if
                  break;
                case 12:
                case 13:
                  OOPS("WARNING: Vector Convert (VCVT) btwn fp and int is NOT IMPLEMENTED CORRECTLY.\n");
                  if(b6) { //VCVT/VCVTR (between floating-point and integer VFP) //A8-578 //FIXME: how to deal with rounding and un/signed values?
                    if(cond != AL) {
                      if(b18) { //fp->int
                        if(b8) {
                          VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                          if(!b16) { //unsigned
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                          }
                          else { //signed
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                          }
                        }
                        else {
                          VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

                          if(!b16) { //unsigned
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                          }
                          else { //signed
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                            }
                          }
                        }
                      }
                      else { //int->fp //selects rounding based on FPSCR
                        VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                        if(b8) {
                          VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                        }
                        else {
                          VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                        }
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    }
                    else {
                      if(b18) { //fp->int
                        if(b8) {
                          VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                          if(!b16) { //unsigned
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                          }
                          else { //signed
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                          }
                        }
                        else {
                          VM = (((insn & 0xF) << 1) | b5) + LREG_FP0;

                          if(!b16) { //unsigned
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                          }
                          else { //signed
                            if(b7) { //round to zero
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                            else { //otherwise use rounding mode specified by FPSCR
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                            }
                          }
                        }
                      }
                      else { //int->fp //selects rounding based on FPSCR
                        VM = ((b5 << 4) | (insn & 0xF)) + LREG_FP0;

                        if(b8) {
                          VD = ((b22 << 4) | ((insn >> 12) & 0xF)) + LREG_FP0;
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, VM, 0, 0, VD, 0, 0, 1);
                        }
                        else {
                          VD = ((((insn >> 12) & 0xF) << 1) | b22) + LREG_FP0;
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, VM, 0, 0, VD, 0, 0, 1);
                        }
                      }
                    }
                  }
                  break;
                case 14:
                case 15:
                  if(b6) { //VCVT (floating-point to fixed-point un/signed VFP) //A8-582 //NEEDTODO
                    if(b16){
                      OOPS("WARNING: VCVT (fp to fixed-point, unsigned VFP) is NOT IMPLEMENTED.\n");
                    }else{
                      OOPS("WARNING: VCVT (fp to fixed-point, signed VFP) is NOT IMPLEMENTED.\n");
                    }
                  }
                  break;
              }
            }
            break;
          default:
            OOPS("Error: UNDEFINED Instruction in VFP Data-Processing Space.\n");
            break;
        }
      }
      else if(!b4 && !(b11 && !b10 && b9)) { //CDP/CDP2 //A8-68 //NEEDTODO
        OOPS("WARNING: CDP/CDP2 is NOT IMPLMENTED.\n");
      }
      else if(b4 && (b11 && !b10 && b9)) { //8,16,32-bit transfer between ARM core and extension registers //A7-31
        uint8_t a_datatransfer = (insn >> 20) & 0x7;

        if(!b20) {
          if(!b8) {
            if(a_datatransfer == 0) { //VMOV (between ARM core register and single-precision register) //A8-648
              //If RD == PC_REG, UNPREDICTABLE;
              
              VN = (((insn>>16) & 0xF) << 1) | b7;

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  

              if(!(VN % 2)) { 
                VN = (VN>>1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VN, 0, VN, 0, 0, 0);
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, VN, 0, 0, 0);
              }
              else {
                VN = (VN>>1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VN, 0, VN, 0, 0, 0);
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VN, 0, 0, 0);
              }
            }
            else if(a_datatransfer == 7) { //VMSR //A8-600 or B6-29 (for SYSTEM level view)
              OOPS("WARNING: VMSR is NOT IMPLEMENTED correctly.\n");
              //if RD == PC, UNPREDICTABLE
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, RD, 0, 22, LREG_TMP2, 0, 0, 0); //Round Mode bits

              //FIXME: missing Trap Enable bits
              if(cond != AL) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, 0x1F, LREG_TMP3, 0, 0, 0); //Cumulative exception bits
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, LREG_CEXC, 0, LREG_CEXC, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0); //Round Mode bits
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_RND, 0, LREG_RND, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_ADD, RD, 0, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, 0x1F, LREG_CEXC, 0, 0, 0); //Cumulative exception bits
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 3, LREG_RND, 0, 0, 0); //Round Mode bits
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, RD, 0, 0, LREG_FSR, 0, 0, 0); //FIXME: RAT/ROB move?
              }
            }
          }
          else {
            if(!b23) { //VMOV (ARM core register to scalar) //A8-644
              //If RD == PC_REG, UNPREDICTABLE;
              
              VD = ((b7<<4) | ((insn>>16) & 0xF)) + LREG_FP0;

              if(b22) { //8-bits
                uint8_t index = (b21 << 2) | ((insn>>5) & 0x3);

                CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                switch(index) {
                  case 0:
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x100, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    break;
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                    
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0xFF01, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0xFF0001, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, 0, static_cast<uint32_t>(0x00FFFFFF), LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                  case 4:
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFFFFFF00), LREG_TMP2, 0, 0, 0); //immediate is intended to work as such
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    break;
                  case 5:
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFFFF00FF), LREG_TMP2, 0, 0, 0); //immediate is intended to work as such
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 40, LREG_TMP1, 0, 0, 0);
                    break;
                  case 6:
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF00FFFF), LREG_TMP2, 0, 0, 0); //immediate is intended to work as such
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                    break;
                  case 7:
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0x00FFFFFF), LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);
                    break;
                }

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
              else if(b5) { //16-bits
                uint8_t index = (b21 << 1) | b6;

                CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                switch(index) {
                  case 0:
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFFFF0000), LREG_TMP2, 0, 0, 0); //immediate is intended to work as such
                    break;
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFFFF0000), LREG_TMP2, 0, 0, 0); //immediate is intended to work as such
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                    break;
                }

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
              else if(!b6) { //32-bits
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                if(!b21) {
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, VD, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                }
              }
            }
            else if(!b6) { //VDUP (ARM core register) //A8-594
              //If RD == PC_REG, UNPREDICTABLE;
              
              uint8_t size = (b22<<1) | b5;
              VD = ((b7<<4) | ((insn>>16) & 0xF)) + LREG_FP0;
              VD1 = VD + 1;

              switch(size) {
                case 0: //32-bits
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b21)
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b21) 
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                  } //end always
                  break;
                case 1: //16-bits
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b21)
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b21) 
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                  } //end always
                  break;
                case 2: //8-bits
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b21)
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b21) 
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                  } //end always
                  break;
              }
            } //end VDUP (ARM core reg)
          }
        }
        else {
          if(!b8) {
            if(a_datatransfer == 0) { //VMOV (between ARM core register and single-precision register) //A8-648
              //To ARM register
              //If RD == PC_REG, UNPREDICTABLE;
              
              VN = (((insn>>16) & 0xF) << 1) | b7;

              if(!(VN % 2)) { 
                VN = (VN>>1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                if(cond != AL) { 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP2, 0, RD, 0, 0, 0);
              }
              else {
                VN = (VN>>1) + LREG_FP0;

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, RD, 0, 0, 0);
              }
            }
            else if(a_datatransfer == 7) { //VMRS //A8-658 or B6-27 (for SYSTEM level view)
              //OOPS("WARNING: VMRS is NOT IMPLEMENTED correctly.\n");

              if(RD == PC) { //ICC = FCC;
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_FSR, 0, 28, LREG_TMP1, 0, 0, 0);

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP1, 0, 0, LREG_TMP1, 1, 0, 0);
                  CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
                }
                else 
                  CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP1, 0, 0, LREG_ICC, 1, 0, 0);
              }
              else {
                //FIXME: missing Trap Enable bits
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_FSR, 0, 22, LREG_TMP1, 0, 0, 0); //Round Mode bits

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x1F, LREG_TMP2, 0, 0, 0); //Cumulative Exception bits
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_CEXC, 0, LREG_CEXC, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 3, LREG_TMP1, 0, 0, 0); //Round Mode bits
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_RND, 0, LREG_RND, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_FSR, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x1F, LREG_CEXC, 0, 0, 0); //Cumulative Exception bits
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 3, LREG_RND, 0, 0, 0); //Round Mode bits
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_FSR, 0, 0, RD, 0, 0, 0); //FIXME: RAT/ROB move?
                }
              }
            }
          }
          else { //VMOV (scalar to ARM core register)
            //If RD == PC_REG, UNPREDICTABLE;

            VN = ((b7<<4) | ((insn>>16) & 0xF)) + LREG_FP0;

            if(b22) { //8-bits
              uint8_t index = (b21<<2) | ((insn>>5) & 0x3);

              switch(index) {
                case 0:
                  if(cond != AL) {  //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                    if(!b23) { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b23)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, RD, 0, 0, 0);
                    else { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                    }
                  } //end always
                  break;
                case 1:
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                    if(!b23) { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b23) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 8, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 8, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                    }
                  } //end always
                  break;
                case 2:
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                    if(!b23) { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b23) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                    }
                  } //end always
                  break;
                case 3:
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 24, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                    if(!b23) { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b23) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                    }
                  } //end always
                  break;
                case 4:
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                    if(!b23) { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b23) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                    }
                  } //end always
                  break;
                case 5:
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 40, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                    if(!b23) { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b23) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 40, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 40, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                    }
                  } //end always
                  break;
                case 6:
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 48, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                    if(!b23) { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b23) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 48, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 48, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                    }
                  } //end always
                  break;
                case 7:
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 56, LREG_TMP1, 0, 0, 0);

                    if(!b23) { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b23)
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 56, RD, 0, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 56, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                    }
                  } //end always
                  break;
              }
            }
            else if(b5) { //16-bits
              uint8_t index = (b21<<1) | b6;

              switch(index) {
                case 0:
                  if(cond != AL) {  //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                    if(!b23) { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b23)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, RD, 0, 0, 0);
                    else { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                    }
                  } //end always
                  break;
                case 1:
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                    if(!b23) { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b23) {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, RD, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                    }
                  } //end always
                  break;
                case 2:
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                    if(!b23) { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b23) {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, RD, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                    }
                  } //end always
                  break;
                case 3:
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP1, 0, 0, 0);

                    if(!b23) { //Signed
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b23)
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, RD, 0, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                    }
                  } //end always
                  break;
              }
            }
            else if(!b6) { //32-bits
              if(!b21) {
                if(b23) { //Unsigned
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                  if(cond != AL) {  //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP2, 0, RD, 0, 0, 0);
                } //end Unsigned
                else { //Signed
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, VN, 0, 32, LREG_TMP1, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else
                    CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, RD, 0, 0, 0);
                }
              }
              else {
                if(b23) { //Unsigned
                  if(cond != AL) {
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  }
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, RD, 0, 0, 0);
                }
                else {
                  if(cond != AL) {
                    CrackInst::setup(rinst, iAALU, OP_S64_SRA, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  }
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRA, VN, 0, 32, RD, 0, 0, 0);
                }
              }
            }
          } //end VMOV (scalar to ARM core register)
        }
      }
    }
    else if(b25 && b24) { //SVC //Supervisor Call
      if(cond != AL) {
        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_SYSMEM, 0, LREG_TMP2, 0, 0, 0);
        CrackInst::setup(rinst, iSALU_ADDR, caddArray[cond], LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP2, 1, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
        CrackInst::setup(rinst, iSALU_ADDR, caddArray[cond], LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP2, 2, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
        CrackInst::setup(rinst, iSALU_ADDR, caddArray[cond], LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP2, 3, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
        CrackInst::setup(rinst, iSALU_ADDR, caddArray[cond], LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP2, 4, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
        CrackInst::setup(rinst, iSALU_ADDR, caddArray[cond], LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP2, 5, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
        CrackInst::setup(rinst, iSALU_ADDR, caddArray[cond], LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP2, 6, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
      }
      else {
        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP2, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP2, 1, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP2, 2, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP2, 3, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP2, 4, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP2, 5, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP2, 6, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0); 
        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
      }
    }

    return;
  } 
}

void ARMCrack::advPC(){
  pc += 4;
}
