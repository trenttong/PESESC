

------
sccore for standalone

# Get ESESC and QEMU Repository
git clone ssh://mada0.cse.ucsc.edu/mada/server/git/esesc/ esesc-mascrtl

# create build directory
mkdir build
cd build
cmake ../esesc-mascrtl/ -DENABLE_SCQEMU=1 -DESESC_QEMU_ISA=armel -DCMAKE_BUILD_TYPE=Debug

# compile the minimal one instruction dissasembler
make scinst





------
# Get ESESC and QEMU Repository
git clone ssh://mada0.cse.ucsc.edu/mada/server/git/esesc/ esesc-mascrtl

# Compile QEMU
cd esesc-mascrtl/emul/qemu
# FOR ARM
./configure --static --target-list=arm-linux-user --disable-vnc-sasl --disable-vnc-tls --enable-esesc_user --enable-scqemu --interp-prefix=/mada/software/benchmarks/armel-root
# FOR SPARC32
./configure --static --target-list=sparc-linux-user --disable-vnc-sasl --disable-vnc-tls --enable-esesc_user -enable-scqemu --interp-prefix=/mada/software/benchmarks/armel-root
make

mkdir PATH/build
cmake ../esesc-mascrtl/ -DENABLE_SCQEMU=1 -DESESC_QEMU_ISA=armel -DCMAKE_BUILD_TYPE=Release
make scqemumain

Compile options: Look at Makefile

---------------------
How to create a libc free sample code (without syscalls if you want)

//BEGIN c code
volatile a=3;

void _start()
{
  main();
}

main()
{
  a++;
}
//END c code

# Either an ARM or a SPARC compiler (go to masca1 for ARM)
gcc -O0 pp.c -nostdlib
sparc-linux-gnu-gcc -O1 pp.c -nostdlib

scqemu ./a.out

It should point to the first instruction in the main subroutime


Available Kernels:
test/mm.c (Matrix Multiply)
---------------------


