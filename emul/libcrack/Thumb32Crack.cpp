/*
   SESC: Super ESCalar simulator
   Copyright (C) 2010 University California, Santa Cruz.

   Contributed by Jose Renau

This file is part of SESC.

SESC is free software; you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software Foundation;
either version 2, or (at your option) any later version.

SESC is    distributed in the  hope that  it will  be  useful, but  WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should  have received a copy of  the GNU General  Public License along with
SESC; see the file COPYING.  If not, write to the  Free Software Foundation, 59
Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/

#include "ThumbCrack.h"
#include "crack_scqemu.h"
#include <iostream>

//Search for ARMv6T2 or ARMv6K or ARMv7 for instructions only in those versions and Higher
//The rest of the instructions are from ARMv6 and Higher

//Cracks Thumb instructions into SCOORE uOps.

#define OOPS(x) do { static int conta=0; if (conta<1) { printf(x); conta++; }; }while(0)

void ThumbCrack::thumb32expand(RAWDInst *rinst)
{
  rinst->clearInst();

  const uint8_t AL             = 14;
  uint8_t cond = AL;

  if(itblockVector->empty()) { //not in ITBLOCK
    rinst->setInITBlock(false);
  } else {
    rinst->setInITBlock(true);

    cond = itblockVector->back();
    itblockVector->pop_back();
  }

  uint32_t insn                = rinst->getInsn();

  //+1 to account for R0 which is a register hardcoded to 0 in SCOORE but is a general register in ARM
  //this would make PC to be register 16 and the Link register to be 15
  const uint8_t STACKPTR       = 13 + 1;
  const uint8_t LINK           = 14 + 1;
  const uint8_t PC_REG         = 15 + 1;
  const uint64_t PC            = rinst->getPC();
   
  uint8_t b31                  = (insn>>31) & 1;
  uint8_t b30                  = (insn>>30) & 1;
  uint8_t b29                  = (insn>>29) & 1;
  uint8_t b27                  = (insn>>27) & 1;
  uint8_t b26                  = (insn>>26) & 1;

  uint8_t b25                  = (insn>>25) & 1;
  uint8_t b24                  = (insn>>24) & 1;
  uint8_t b23                  = (insn>>23) & 1;
  uint8_t b22                  = (insn>>22) & 1;
  uint8_t b21                  = (insn>>21) & 1;

  uint8_t b20                  = (insn>>20) & 1;
  uint8_t b19                  = (insn>>19) & 1;
  uint8_t b18                  = (insn>>18) & 1;
  uint8_t b17                  = (insn>>17) & 1;
  uint8_t b16                  = (insn>>16) & 1;

  uint8_t b12                  = (insn>>12) & 1;
  uint8_t b10                  = (insn>>10) & 1;

  uint8_t b9                   = (insn>>9) & 1;
  uint8_t b8                   = (insn>>8) & 1;
  uint8_t b7                   = (insn>>7) & 1;
  uint8_t b6                   = (insn>>6) & 1;
  uint8_t b5                   = (insn>>5) & 1;

  uint8_t b4                   = (insn>>4) & 1;
  uint8_t b3                   = (insn>>3) & 1;
  uint8_t b2                   = (insn>>2) & 1;
  uint8_t b1                   = (insn>>1) & 1;
  uint8_t b0                   = insn & 1;

  uint8_t RN                   = (insn & 0xF) + 1; 
  uint8_t RM                   = ((insn>>16) & 0xF) + 1;
  uint8_t RT                   = ((insn>>28) & 0xF) + 1; 
  uint8_t RD                   = ((insn>>24) & 0xF) + 1; 

  uint8_t VN                   = ((b23 << 4) | (insn & 0xF)) + LREG_FP0;
  uint8_t VM                   = ((b21 << 4) | ((insn>>16) & 0xF)) + LREG_FP0;
  uint8_t VD                   = ((b6 << 4)  | ((insn>>28) & 0xF)) + LREG_FP0;

  uint8_t VD1                  = VD + 1;
  uint8_t VN1                  = VD + 1;
  uint8_t VM1                  = VD + 1;

  uint8_t QN                   = (VN >> 1) << 1;
  uint8_t QM                   = (VM >> 1) << 1;
  uint8_t QD                   = (VD >> 1) << 1;

  uint8_t QN1                  = QN + 1;
  uint8_t QM1                  = QM + 1;
  uint8_t QD1                  = QD + 1;

 
  Scopcode cmoveArray[] = { OP_U64_CMOV_E,         OP_U64_CMOV_NE,  OP_U64_CMOV_CS, 
                            OP_U64_CMOV_CC,        OP_U64_CMOV_NEG, OP_U64_CMOV_POS, 
                            OP_U64_CMOV_VS,        OP_U64_CMOV_VC,  OP_U64_CMOV_C_AND_NOTZ, 
                            OP_U64_CMOV_NOTC_OR_Z, OP_U64_CMOV_GE,  OP_U64_CMOV_L,
                            OP_U64_CMOV_G,         OP_U64_CMOV_LE,  OP_U64_CMOV_A
                          };

  Scopcode negCmoveArray[] = { OP_U64_CMOV_NE,          OP_U64_CMOV_E,   OP_U64_CMOV_CC, 
                               OP_U64_CMOV_CS,          OP_U64_CMOV_POS, OP_U64_CMOV_NEG, 
                               OP_U64_CMOV_VC,          OP_U64_CMOV_VS,  OP_U64_CMOV_NOTC_OR_Z, 
                               OP_U64_CMOV_C_AND_NOTZ, OP_U64_CMOV_L,   OP_U64_CMOV_GE,
                               OP_U64_CMOV_LE,          OP_U64_CMOV_G,   OP_U64_CMOV_A
                             };

  Scopcode rbranchArray[] = { OP_U64_RBE,         OP_U64_RBNE,  OP_U64_RBCS, 
                              OP_U64_RBCC,        OP_U64_RBNEG, OP_U64_RBPOS, 
                              OP_U64_RBVS,        OP_U64_RBVC,  OP_U64_RBC_AND_NOTZ,
                              OP_U64_RBNOTC_OR_Z, OP_U64_RBGE,  OP_U64_RBL,
                              OP_U64_RBG,         OP_U64_RBLE
                            };

  Scopcode lbranchArray[] = { OP_U64_LBE,         OP_U64_LBNE,  OP_U64_LBCS, 
                              OP_U64_LBCC,        OP_U64_LBNEG, OP_U64_LBPOS, 
                              OP_U64_LBVS,        OP_U64_LBVC,  OP_U64_LBC_AND_NOTZ,  
                              OP_U64_LBNOTC_OR_Z, OP_U64_LBGE,  OP_U64_LBL,
                              OP_U64_LBG,         OP_U64_LBLE
                            };

  Scopcode negrbranchArray[] = { OP_U64_RBNE,        OP_U64_RBE,   OP_U64_RBCC, 
                                 OP_U64_RBCS,        OP_U64_RBPOS, OP_U64_RBNEG, 
                                 OP_U64_RBVC,        OP_U64_RBVS,  OP_U64_RBC_AND_NOTZ,
                                 OP_U64_RBNOTC_OR_Z, OP_U64_RBL,   OP_U64_RBGE,
                                 OP_U64_RBLE,        OP_U64_RBG
                               };

  uint8_t op1                = (insn>>11) & 0x3; 
   
  switch(op1) {
    case 0:
      OOPS("WARNING: This instruction is 16bits.\n");
      break;
    case 1:
      if(!b10 && !b9 && !b6) { //Load/store multiple //A6-23

        uint8_t op = (insn>>7) & 0x3;
        uint8_t L = b4;
        uint8_t W = b5;

        uint8_t free_reg_list[] = {
          1, 2, 3, 
          4, 5, 6, 7, 
          8, 9, 10, 11, 
          12, 13, STACKPTR, LINK, PC_REG
        };

        if((op == 0) && !L) { //Store Return State SRS //B6-20
          OOPS("WARNING: Store Return State (SRS) is NOT IMPLEMENTED.\n");
        }
        else if((op == 0) && L) { //Return From Exception RFE //B6-16
          OOPS("WARNING: Return From Exception (RFE) is NOT IMPLEMENTED.\n");
        }
        else if((op == 1) && !L) { //STM/STMIA/STMEA //A8-374
          //If RN == PC_REG, UNPREDICTABLE
          //If writeback && reglist[RN] == 1, then UNPREDICTABLE
          uint16_t reg_list = (b30 << 14) | (0 << 13) | ((insn>>16) & 0xFFF);
          int count;
          int i = 0;
          
          int reg_list2  = reg_list;

          //From Kernighan
          for (count = 0; reg_list2; count++)
            reg_list2 &= reg_list2 - 1; // clear the least significant bit set

          //UNPREDICTABLE
          if(reg_list < 2)
            return;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          while(!(reg_list & 1)) { //find the first set bit
            reg_list = reg_list >> 1;
            i++;
          }
          
          if((reg_list & 1)) {
            if(RN != PC_REG)
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, free_reg_list[i], 0, 0, 0, 0, 0);
            
            i++;
            reg_list = reg_list >> 1;
          }

          for(; i < 15; i++) {
            if(reg_list & 1) {
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, free_reg_list[i], 0, 0, 0, 0, 0);
            }
            
            reg_list = reg_list >> 1;
          }
            
          if(W) { //writebacu
            if(RN != PC_REG)
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (count*4), RN, 0, 0, 0);
          }
        } //end STM/STMIA/STMEA 
        else if((op == 1) && L && !(W && (RN == STACKPTR))) { //LDM/LDMIA/LDMFD //A8-110
          //If RN == PC_REG, UNPREDICTABLE
          //If b31 == 1 and b30 == 1, UNPREDICTABLE
          //If writeback && reglist[RN] == 1, then UNPREDICTABLE

          uint16_t reg_list = (b31 << 15) | (b30 << 14) | ((insn>>16) & 0xFFF);
          int count;
          int i = 0;
          bool writeback = true;
          bool first_use = true;
          
          int reg_list2  = reg_list;

          //From Kernighan
          for (count = 0; reg_list2; count++)
            reg_list2 &= reg_list2 - 1; // clear the least significant bit set

          //UNPREDICTABLE
          if(reg_list < 2)
            return;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          while(!(reg_list & 1)) { //find the first set bit
            reg_list = reg_list >> 1;
            i++;
          }

          if((reg_list & 1) && (i != 15)) { //make sure that bit 15 is not the only bit set
            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, free_reg_list[i], 0, 0, 0);
            
            i++;
            reg_list = reg_list >> 1;
          }
          
          for(; i < 15; i++) {
            if(reg_list & 1) {
              if(first_use) {
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0);
                first_use = false;
              }
              else 
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, free_reg_list[i], 0, 0, 0);
            }
            
            reg_list = reg_list >> 1;
          }
          
          if(reg_list & 1) { //check bit 15 which is the bit for the PC_REG
            if(first_use)
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);
            else {
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0);
            }
            
            if(W && writeback) { //writeback
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (count*4), RN, 0, 0, 0);
              writeback = !writeback; //incase c++ program decides to continue expanding after the jump
            }
            
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, ARM, LREG_TTYPE, 0, 0, 0); 

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
            CrackInst::setup(rinst, iBALU_RET, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0); 
          }
          
          if(W && writeback) //writeback
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (count*4), RN, 0, 0, 0);
        } //end LDM/LDMIA/LDMFD 
        else if((op == 1) && L && (W && (RN == STACKPTR))) { //Pop Mulitple Registers from the stack POP //A8-246 //Encoding T2
          //If b31 == 1 and b30 == 1, UNPREDICTABLE
          //If writeback && reglist[RN] == 1, then UNPREDICTABLE

          uint16_t reg_list = (b31 << 15) | (b30 << 14) | ((insn>>16) & 0x1FFF);
          int count;
          int i = 0;
          bool writeback = true;
          bool first_use = true;
          
          int reg_list2  = reg_list;

          //From Kernighan
          for (count = 0; reg_list2; count++)
            reg_list2 &= reg_list2 - 1; // clear the least significant bit set

          //UNPREDICTABLE
          if(reg_list < 2)
            return;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          while(!(reg_list & 1)) { //find the first set bit
            reg_list = reg_list >> 1;
            i++;
          }

          if((reg_list & 1) && (i != 15)) { //make sure that bit 15 is not the only bit set
            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR, 0, 0, free_reg_list[i], 0, 0, 0);
            
            i++;
            reg_list = reg_list >> 1;
          }
          
          for(; i < 15; i++) {
            if(reg_list & 1) {
              if(first_use) {
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR, 0, 4, LREG_TMP2, 0, 0, 0);
                first_use = false;
              }
              else
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, free_reg_list[i], 0, 0, 0);
            }
            
            reg_list = reg_list >> 1;
          }
          
          if(reg_list & 1) { //check bit 15 which is the bit for the PC_REG
            if(first_use)
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR, 0, 0, LREG_TMP1, 0, 0, 0);
            else {
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0);
            }
            
            if(W && writeback) { //writeback
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR, 0, (count*4), STACKPTR, 0, 0, 0);
              writeback = !writeback; //incase c++ program decides to continue expanding after the jump
            }
            
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, ARM, LREG_TTYPE, 0, 0, 0); 

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
            CrackInst::setup(rinst, iBALU_RET, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0); 
          }
          
          if(W && writeback) //writeback
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR, 0, (count*4), STACKPTR, 0, 0, 0);
        } //end Pop Mulitple Registers from the stack POP 
        else if((op == 2) && !L && !(W && (RN == STACKPTR))) { //STMDB/STMFD //A8-378
          //If RN == PC_REG, UNPREDICTABLE
          //If writeback && reglist[RN] == 1, then UNPREDICTABLE
          uint16_t reg_list = (b30 << 14) | ((insn>>16) & 0xFFF);
          int count;
          int i = 0;
          
          int reg_list2  = reg_list;

          //From Kernighan
          for (count = 0; reg_list2; count++)
            reg_list2 &= reg_list2 - 1; // clear the least significant bit set

          //UNPREDICTABLE
          if(reg_list < 2)
            return;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, RN, 0, (count*4), LREG_TMP1, 0, 0, 0); //start address

          if(W) //writeback
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
          
          while(!(reg_list & 1)) { //find the first set bit
            reg_list = reg_list >> 1;
            i++;
          }
          
          if(reg_list & 1) { 
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, free_reg_list[i], 0, 0, 0, 0, 0);
            
            i++;
            reg_list = reg_list >> 1;
          }
          
          for(; i < 15; i++) {
            if(reg_list & 1) {
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, free_reg_list[i], 0, 0, 0, 0, 0);
            }
            
            reg_list = reg_list >> 1;
          }
        } //end STMDB/STMFD 
        else if((op == 2) && !L && (W && (RN == STACKPTR))) { //Push Multiple Registers from the stack PUSH //A8-248 //Encoding T2

          uint16_t reg_list = (b30 << 14) | (0 << 13) | ((insn>>16) & 0x1FFF);
          int count;
          int i = 0;

          int reg_list2  = reg_list;

          //From Kernighan
          for (count = 0; reg_list2; count++)
            reg_list2 &= reg_list2 - 1; // clear the least significant bit set

          //UNPREDICTABLE
          if(reg_list < 2)
            return;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR, 0, (count*4), LREG_TMP1, 0, 0, 0); //start address

          if(W) //writeback
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 0, STACKPTR, 0, 0, 0); //FIXME: RAT/ROB move?
          
          while(!(reg_list & 1)) { //find the first set bit
            reg_list = reg_list >> 1;
            i++;
          }
          
          if(reg_list & 1) { 
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, free_reg_list[i], 0, 0, 0, 0, 0);
            
            i++;
            reg_list = reg_list >> 1;
          }
          
          for(; i < 15; i++) {
            if(reg_list & 1) {
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, free_reg_list[i], 0, 0, 0, 0, 0);
            }
            
            reg_list = reg_list >> 1;
          }
        } //end Push Multiple Registers from the stack PUSH 
        else if((op == 2) && L) { //LDMDB/LDMEA //A8-114
          //If RN == PC_REG, UNPREDICTABLE
          //If b31 == 1 and b30 == 1, UNPREDICTABLE
          //If writeback && reglist[RN] == 1, then UNPREDICTABLE

          uint16_t reg_list = (b31 << 15) | (b30 << 14) | (0 << 13) | ((insn>>16) & 0xFFF);
          int count;
          int i = 0;
          bool first_use = true;
          
          int reg_list2  = reg_list;

          //From Kernighan
          for (count = 0; reg_list2; count++)
            reg_list2 &= reg_list2 - 1; // clear the least significant bit set

          //UNPREDICTABLE
          if(reg_list < 2)
            return;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, (count*4), LREG_TMP2, 0, 0, 0); //start address
          
          if(W) //writeback
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
          
          while(!(reg_list & 1)) { //find the first set bit
            reg_list = reg_list >> 1;
            i++;
          }
          
          if((reg_list & 1) && (i != 15)) { //make sure that bit 15 is not the only bit set
            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, free_reg_list[i], 0, 0, 0);

            i++;
            reg_list = reg_list >> 1;
            first_use = false;
          }
          
          for(; i < 15; i++) {
            if(reg_list & 1) {
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, free_reg_list[i], 0, 0, 0);
            }
            
            reg_list = reg_list >> 1;
          }
          
          if(reg_list & 1) { //check bit 15 which is the bit for the PC_REG
            if(!first_use)
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 4, LREG_TMP2, 0, 0, 0);
            
            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0); 
            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, ARM, LREG_TTYPE, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
            CrackInst::setup(rinst, iBALU_RET, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0); 
          }
        } //end LDMDB/LDMEA
        else if((op == 3) && !L) { //Store Return State SRS //B6-20
          OOPS("WARNING: Store Return State (SRS) is NOT IMPLEMENTED.\n");
        }
        else if((op == 3) && L) { //Return From Exception RFE //B6-16
          OOPS("WARNING: Return From Exception (RFE) is NOT IMPLEMENTED.\n");
        }
      } //end Load/store multiple
      else if(!b10 && !b9 && b6) { //Load/store dual, load/store exclusive, table branch //A6-24
        uint8_t op1 = (insn>>7) & 0x3;
        uint8_t op2 = (insn>>4) & 0x3;
        uint8_t op3 = (insn>>20) & 0xF;

        if((op1==0) && (op2 == 0)) { //STREX //A8-400 //ARMv6T2
          //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
          //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
          //If RN == PC_REG, UNPREDICTABLE
          //If RD == RN or RD == RT, UNPREDICTABLE

          const uint32_t IMM8 = ((insn>>16) & 0xFF) << 2;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_COND, LREG_TMP1, RT, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_CHECK_EX, LREG_TMP1, 0, 0, 0, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, RD, 0, 0, RD, 0, 0, 0); //SUCCESS
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, RD, 0, 1, RD, 0, 0, 0); //FAILURE
        } //end STREX 
        else if((op1==0) && (op2 == 1)) { //LDREX //A8-142 //ARMv6T2
          //If RN == PC_REG, UNPREDICTABLE
          //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE

          const uint32_t IMM8 = ((insn>>16) & 0xFF) << 2;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U64_MARK_EX, LREG_TMP1, 0, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);
        } //end LDREX 
        else if((((op1==0) || (op1 == 1)) && (op2 == 2)) || (((op1 == 2) || (op1 == 3)) && 
               ((op2 == 0) || (op2 == 2)))) { //STRD (imm) //A8-396 //ARMv6T2
          //If RN == PC_REG, UNPREDICTABLE
          //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
          //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
          //If W && (RN == RT or RN == RD), UNPREDICTABLE

          const uint32_t IMM8 = ((insn>>16) & 0xFF) << 2;
          uint8_t P = b8;
          uint8_t U = b7;
          uint8_t W = b5;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          if(P) {
            uint8_t addr_reg = -1;
            if (IMM8) {
              if(U)
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              addr_reg = LREG_TMP1;
            }else{
              addr_reg = RN;
            }

            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, addr_reg, RT, 0, 0, 0, 0, 0);

            if(W) {
              if (IMM8) {
                I(addr_reg == LREG_TMP1);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
              }else{
                I(addr_reg == RN);
              }
            }

            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, addr_reg, 0, 4, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, RD, 0, 0, 0, 0, 0); 
          } else {
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, RN, RT, 0, 0, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, RN, 0, 4, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, RD, 0, 0, 0, 0, 0); 

            if(W) {
              if (IMM8) {
                if(U)
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, RN, 0, IMM8, RN, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, RN, 0, IMM8, RN, 0, 0, 0);
              }
            }
          }
        } //end STRD (imm) 
        else if((((op1==0) || (op1 == 1)) && (op2 == 3) && (RN != PC_REG)) || (((op1 == 2) || 
               (op1 == 3)) && (((op2 == 1) || (op2 == 3)) && (RN != PC_REG)))) { //LDRD (imm) //A8-136 //ARMv6T2
          //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
          //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
          //If RD == RT, UNPREDICTABLE
          //If W && (RN == RT or RN == RD), UNPREDICTABLE

          const uint32_t IMM8 = ((insn>>16) & 0xFF) << 2;
          uint8_t P = b8;
          uint8_t U = b7;
          uint8_t W = b5;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          if(P) {
            uint8_t addr_reg = -1;
            if (IMM8) {
              if(U) {
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              }else{
                CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              }
              addr_reg = LREG_TMP1;
            }else{
              addr_reg = RN;
            }

            if(W) {
              if (IMM8) {
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, addr_reg, 0, IMM8, RN, 0, 0, 0);
              }
            }

            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, addr_reg, 0, 0, RT, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, addr_reg, 0, 4, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, RD, 0, 0, 0);
          } else {
            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, RT, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, RD, 0, 0, 0);

            if(W) {
              if(U)
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_U32_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
            }
          }
        } //end LDRD (imm) 
        else if((((op1==0) || (op1 == 1)) && (op2 == 3) && (RN == PC_REG)) || (((op1 == 2) || 
               (op1 == 3)) && (((op2 == 1) || (op2 == 3)) && (RN == PC_REG)))) { //LDRD (literal) //A8-136 //ARMv6T2
          //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
          //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
          //If RD == RT, UNPREDICTABLE

          const uint32_t IMM8 = ((insn>>16) & 0xFF) << 2;
          uint8_t U = b7;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          if(U)
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4+IMM8), LREG_TMP1, 0, 0, 0);
          else
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4-IMM8), LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, RD, 0, 0, 0);
        } //end LDRD (literal) 
        else if((op1 == 1) && (op2 == 0) && (op3 == 4)) { //STREXB //A8-402 //ARMv7
          //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
          //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
          //If RN == PC_REG, UNPREDICTABLE
          //If RM == RN or RM == RT, UNPREDICTABLE

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST_COND, LREG_TMP1, RT, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_CHECK_EX, LREG_TMP1, 0, 0, 0, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, RM, 0, 0, RM, 0, 0, 0); //SUCCESS
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, RM, 0, 1, RM, 0, 0, 0); //FAILURE
        } //end STREXB 
        else if((op1 == 1) && (op2 == 0) && (op3 == 5)) { //STREXH //A8-406 //ARMv7
          //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
          //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
          //If RN == PC_REG, UNPREDICTABLE
          //If RM == RN or RM == RT, UNPREDICTABLE

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_COND, LREG_TMP1, RT, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_CHECK_EX, LREG_TMP1, 0, 0, 0, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, RM, 0, 0, RM, 0, 0, 0); //SUCCESS
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, RM, 0, 1, RM, 0, 0, 0); //FAILURE
        } //end STREXH 
        else if((op1 == 1) && (op2 == 0) && (op3 == 7)) { //STREXD //A8-404 //ARMv7
          //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
          //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
          //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
          //If RN == PC_REG, UNPREDICTABLE
          //If RM == RN or RM == RT or RM == RD, UNPREDICTABLE

          bool big_endian = true; //FIXME: How do we check for big endian?

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP2, 0, 0, 0);

          if(big_endian) {
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, RT, 0, 32, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, RD, 0, LREG_TMP1, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, RT, 0, LREG_TMP1, 0, 0, 0);
          }

          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_COND, LREG_TMP2, LREG_TMP1, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_CHECK_EX, LREG_TMP2, 0, 0, 0, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, RM, 0, 0, RM, 0, 0, 0); //SUCCESS
          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, RM, 0, 1, RM, 0, 0, 0); //FAILURE
        } //end STREXD 
        else if((op1 == 1) && (op2 == 1) && (op3 == 0)) { //Table Branch Byte TBB //A8-446 //ARMv6T2
          //If RN == STACKPTR, UNPREDICTABLE
          //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          if(RN != PC_REG)
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);
          else {
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFE)+4), LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, RM, 0, LREG_TMP1, 0, 0, 0);
          }
          CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFE)+4), LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
          CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
        } //end Table Branch Byte TBB 
        else if((op1 == 1) && (op2 == 1) && (op3 == 1)) { //Table Branch Halfword TBH //A8-446 //ARMv6T2
          //If RN == STACKPTR, UNPREDICTABLE
          //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          CrackInst::setup(rinst, iAALU, OP_U32_ADD, RM, RM, 0, LREG_TMP1, 0, 0, 0);

          if(RN != PC_REG)
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
          else {
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFE)+4), LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
          }

          CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

          CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP2, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
          CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
        } //end Table Branch Halfword TBH 
        else if((op1 == 1) && (op2 == 1) && (op3 == 4)) { //LDREXB //A8-144 //ARMv7
          //If RN == PC_REG, UNPREDICTABLE
          //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          CrackInst::setup(rinst, iAALU, OP_U64_MARK_EX, RN, 0, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, RT, 0, 0, 0);
        } //end LDREXB 
        else if((op1 == 1) && (op2 == 1) && (op3 == 5)) { //LDREXH //A8-148 //ARMv7
          //If RN == PC_REG, UNPREDICTABLE
          //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          CrackInst::setup(rinst, iAALU, OP_U64_MARK_EX, RN, 0, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, RT, 0, 0, 0);
        } //end LDREXH 
        else if((op1 == 1) && (op2 == 1) && (op3 == 7)) { //LDREXD //A8-146 //ARMv7
          //If RN == PC_REG, UNPREDICTABLE
          //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
          //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
          //If RD == RT, UNPREDICTABLE

          bool big_endian = true; //FIXME: How do we check for big endian?

          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          CrackInst::setup(rinst, iAALU, OP_U64_MARK_EX, RN, 0, 0, 0, 0, 0, 0);
          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);

          if(big_endian) {
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RT, 0, 0, 0);
          }
          else {
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, RT, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RD, 0, 0, 0);
          }
        } //end LDREXD 
      } //end Load/store dual, load/store exclusive, table branch
      else if(!b10 && b9) { //Data=processing (shifted register) //A6-31
        uint8_t Sbit      = b4;
        uint8_t op        = (insn>>5) & 0xF;
        uint8_t SHIFT_IMM = (((insn>>28) & 0x7) << 2) | ((insn>>22) & 0x3);
        uint8_t shift     = (insn>>20) & 0x3;

        if(((op != 2) || (RN != PC_REG)) && (op != 6)) { //optimizations for MOVs, PKH does something different
          switch(shift) {
            case 0: //sll
              if(SHIFT_IMM != 0)
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
              break;
            case 1: //srl
              if(SHIFT_IMM != 0)
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 32, LREG_TMP2, 0, 0, 0);
              break;
            case 2: //sra
              if(SHIFT_IMM != 0)
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 32, LREG_TMP2, 0, 0, 0);
              break;
            case 3:
              if(SHIFT_IMM != 0) //rotr
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
              else { //rotrxx
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RM, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_ROTRXX, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
              }
              break;
          }
        }

        if(cond == AL) { //not in ITBLOCK (or) in IT block with COND Always
          if((op == 0) && (RD != PC_REG)) { //AND (register) //A8-36
            //If RD == STACKPTR or (RD ==PC_REG && Sbit == 0), UNPREDICTABLE
            //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, RM, 0, RD, Sbit, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
          }
          else if((op == 0) && (RD == PC_REG) && Sbit) { //TST (register) //A8-456
            //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, RM, 0, 0, 1, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, 0, 1, 0, 0);
          }
          else if(op == 1) { //BIC (register) //A8-52
            //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
            //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, RM, 0, RD, Sbit, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
          }
          else if((op == 2) && (RN != PC_REG)) { //ORR (register) //A8-230
            //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
            //If RN == STACKPTR, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, RM, 0, RD, Sbit, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
          }
          else if((op == 2) && (RN == PC_REG)) { 
            if((shift == 0) && (SHIFT_IMM == 0)) { //MOV (register) //A8-196
              //If Sbit && ((RD == PC_REG || STACKPTR) || (RM == STACKPTR || PC_REG)) //UNPREDICTABLE
              //If !Sbit && ((RD == PC_REG || (RM == PC_REG) || (RD == STACKPTR && RM == STACKPTR))) //UNPREDICTABLE

              if(RD != PC_REG) {
                if(RM != PC_REG)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, RM, 0, 0, RD, Sbit, 0, 0); //FIXME: RAT/ROB move?
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, 0, 0, RD, Sbit, 0, 0); //FIXME: RAT/ROB move?
                }
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RM, 0, 0, LREG_TMP1, Sbit, 0, 0); //FIXME: RAT/ROB move?
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
              }
            }
            else if((shift == 0) && (SHIFT_IMM != 0)) { //SLL (imm) //A8-178
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, SHIFT_IMM, RD, Sbit, 0, 0);
            }
            else if(shift == 1) { //SRL (imm) //A8-182
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if(SHIFT_IMM != 0)
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, SHIFT_IMM, RD, Sbit, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 32, RD, Sbit, 0, 0);
            }
            else if(shift == 2) { //SRA (imm) //A8-40
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if(SHIFT_IMM != 0)
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, SHIFT_IMM, RD, Sbit, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 32, RD, Sbit, 0, 0);
            }
            else if((shift == 3) && (SHIFT_IMM == 0)) { //ROTRXX //A8-282
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, RM, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ROTRXX, LREG_TMP1, 0, SHIFT_IMM, RD, Sbit, 0, 0);
            }
            else if((shift == 3) && (SHIFT_IMM != 0)) { //ROTR (imm) //A8-278
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, SHIFT_IMM, RD, Sbit, 0, 0);
            }
          }
          else if((op == 3) && (RN != PC_REG)) { //ORN (register) //A8-226
            //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
            //If RN == STACKPTR, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S64_ORN, RN, RM, 0, RD, Sbit, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S64_ORN, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
          }
          else if((op == 3) && (RN == PC_REG)) { //MVN (register) //A8-216
            //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, RM, LREG_TMP3, 0, RD, Sbit, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, RD, Sbit, 0, 0);
          }
          else if((op == 4) && (RD != PC_REG)) { //EOR (register) //A8-96
            //If RD == STACKPTR or (RD ==PC_REG && Sbit == 0), UNPREDICTABLE
            //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, RM, 0, RD, Sbit, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
          }
          else if((op == 4) && (RD == PC_REG) && Sbit) { //TEQ (register) //A8-450
            //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, RM, 0, 0, 1, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, 0, 1, 0, 0);
          }
          else if(op == 6) { //PKH (register) //A8-234
            //If RD == PC_REG, UNPREDICTABLE
            //If RN == PC_REG, UNPREDICTABLE
            //If RM == PC_REG, UNPREDICTABLE

            if(b20 || b4) {
              OOPS("WARNING: Instruction is UNDEFINED in PKH.\n");
              return;
            }

            switch(b5) {
              case 0: //sll
                if(SHIFT_IMM != 0)
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
                break;
              case 1: //sra
                if(SHIFT_IMM != 0)
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 32, LREG_TMP2, 0, 0, 0);
                break;
            }

            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

            if(b21) { //PKHTB
              if(SHIFT_IMM == 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0); 
            }
            else { //PKHBT
              if(SHIFT_IMM == 0) {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0); 
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0); 
              }
            }
          }
          else if((op == 8) && (RD != PC_REG)) { //ADD (register) //A8-24
            //If RD == STACKPTR or RD ==(PC_REG && Sbit == 0), UNPREDICTABLE
            //If RN == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, RM, 0, RD, Sbit, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
          }
          else if((op == 8) && (RD == PC_REG) && Sbit) { //CMN (register) //A8-76
            //If RN == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, RM, 0, 0, 1, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, 0, 1, 0, 0);
          }
          else if(op == 10) { //ADC (register) //A8-16
            //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
            //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, RM, 0, RD, Sbit, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, RD, Sbit, 0, 0);
          }
          else if(op == 11) { //SBC (register) //A8-304
            //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
            //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, RM, 0, LREG_TMP1, 0, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
          }
          else if((op == 13) && (RD != PC_REG)) { //SUB (register) //A8-422
            //If RD == STACKPTR or (RD ==PC_REG && Sbit == 0), UNPREDICTABLE
            //If RN == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if((SHIFT_IMM == 0) && (shift == 0)) {
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
            }
          }
          else if((op == 13) && (RD == PC_REG) && Sbit) { //CMP (register) //A8-82
            //If RN == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
          }
          else if(op == 14) { //RSB (register) //A8-286
            //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
            //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if((SHIFT_IMM == 0) && (shift == 0))
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, RN, 0, LREG_TMP1, 0, 0, 0);
            else
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
          }
          else
            OOPS("Instruction in Data-processing (shifted register) space is UNDEFINED.\n");
        } //end not in ITBLOCK or in IT block with COND Always
        else { //in ITBLOCK with COND NOT Always

            if((op == 0) && (RD != PC_REG)) { //AND (register) //A8-36
              //If RD == STACKPTR or (RD ==PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op == 0) && (RD == PC_REG) && Sbit) { //TST (register) //A8-456
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
            }
            else if(op == 1) { //BIC (register) //A8-52
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op == 2) && (RN != PC_REG)) { //ORR (register) //A8-230
              //If RD == STACKPTR or (RD ==PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op == 2) && (RN == PC_REG)) { 
              if((shift == 0) && (SHIFT_IMM == 0)) { //MOV (register) //A8-196
                //If Sbit && ((RD == PC_REG || STACKPTR) || (RM == STACKPTR || PC_REG)) //UNPREDICTABLE
                //If !Sbit && ((RD == PC_REG || (RM == PC_REG) || (RD == STACKPTR && RM == STACKPTR))) //UNPREDICTABLE

                if(RD != PC_REG) {
                  if(RM != PC_REG)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, RM, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
                  }
  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);
  
                  if(Sbit)
                    CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, RM, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iBALU_RBRANCH, rbranchArray[cond], LREG_TMP1, LREG_TMP1, 0, 0, 0, 0, 0);
                }
              }
              else if((shift == 0) && (SHIFT_IMM != 0)) { //SLL (imm) //A8-178
                //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(Sbit)
                  CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
              }
              else if(shift == 1) { //SRL (imm) //A8-182
                //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

                if(SHIFT_IMM != 0)
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 32, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(Sbit)
                  CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
              }
              else if(shift == 2) { //SRA (imm) //A8-40
                //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

                if(SHIFT_IMM != 0)
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 32, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(Sbit)
                  CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
              }
              else if((shift == 3) && (SHIFT_IMM == 0)) { //ROTRXX //A8-282
                //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, RM, 0, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_ROTRXX, LREG_TMP1, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(Sbit)
                  CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
              }
              else if((shift == 3) && (SHIFT_IMM != 0)) { //ROTR (imm) //A8-278
                //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(Sbit)
                  CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
              }
            }
            else if((op == 3) && (RN != PC_REG)) { //ORN (register) //A8-226
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S64_ORN, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_ORN, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op == 3) && (RN == PC_REG)) { //MVN (register) //A8-216
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op == 4) && (RD != PC_REG)) { //EOR (register) //A8-96
              //If RD == STACKPTR or (RD ==PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op == 4) && (RD == PC_REG) && Sbit) { //TEQ (register) //A8-450
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
            }
            else if(op == 6) { //PKH (register) //A8-234
              //If RD == PC_REG, UNPREDICTABLE
              //If RN == PC_REG, UNPREDICTABLE
              //If RM == PC_REG, UNPREDICTABLE

              if(b20 || b4) {
                OOPS("WARNING: Instruction is UNDEFINED in PKH.\n");
                return;
              }

              switch(b21) {
                case 0: //sll
                  if(SHIFT_IMM != 0)
                    CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
                  break;
                case 1: //sra
                  if(SHIFT_IMM != 0)
                    CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, SHIFT_IMM, LREG_TMP2, 0, 0, 0);
                  else
                    CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 32, LREG_TMP2, 0, 0, 0);
                  break;
              }

              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

              if(b21) { //PKHTB
                if(SHIFT_IMM == 0)
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
              }
              else { //PKHBT
                if(SHIFT_IMM == 0) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                }
              }

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op == 8) && (RD != PC_REG)) { //ADD (register) //A8-24
              //If RD == STACKPTR or RD ==(PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op == 8) && (RD == PC_REG) && Sbit) { //CMN (register) //A8-76
              //If RN == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
            }
            else if(op == 10) { //ADC (register) //A8-16
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, RM, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if(op == 11) { //SBC (register) //A8-304
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, RM, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);
 
              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
 
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op == 13) && (RD != PC_REG)) { //SUB (register) //A8-422
              //If RD == STACKPTR or (RD ==PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op == 13) && (RD == PC_REG) && Sbit) { //CMP (register) //A8-82
              //If RN == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              else 
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
            }
            else if(op == 14) { //RSB (register) //A8-286
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

              if((SHIFT_IMM == 0) && (shift == 0))
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RM, RN, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
        } //end in ITBLOCK with COND not ALWAYS
      } //end Data=processing (shifted register)
      else if(b10) { //Coprocessor instructions //A6-40
        uint8_t op1 = (insn>>4) & 0x3F;
        uint8_t op = b20;
        uint8_t coproc = (insn>>24) & 0xF;

        if(((!b9 && !b8 && !b7 && b5) || (!b9 && !b8 && b7) || (!b9 && b8)) && ((coproc == 10) || (coproc == 11))) { //Advanced SIMD, VFP Extension register load/store A7-26
          if(!b4 && (((b8 && !b7 && b5) && (RN != STACKPTR)) || (!b8 && b7 && !b5) || (!b8 && b7 && b5))) { //Vector Store Multiple VSTM //A8-784
            //If RN == PC_REG, UNPREDICTABLE

            uint8_t U     = b7;
            uint8_t W     = b5;
            uint8_t P     = b8;

            uint8_t IMM8  = (insn >> 16) & 0xFF;
            uint8_t IMM32 = 0xFFFFFFFF || IMM8; //zero-extend
            uint8_t regs = 0xFF; //force initialization
            int VD;   
            int DV;     
            uint8_t coproc = (insn>>24) & 0xF;
            bool single_regs;
            bool big_endian = false;
                      
            uint8_t i;    
                    
            //printf("vstm instruction \n");
                      
            if(coproc == 10) {
              VD = ((((insn>>28) & 0xF) << 1) | b6);
              single_regs = true;
              regs = IMM8;
            } else if(coproc == 11) {
              VD = (((insn>>28) & 0xF) | b6);
              single_regs = false;
              regs = IMM8/2;
            }
            //printf ("vstm: vd %d \n", VD);

            if(cond != AL) { //not always
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
            } //end not always

            if(!P && U) {
              // IA
              CrackInst::setup(rinst, iRALU, OP_iRALU_move, RN, 0, 0, LREG_TMP1, 0, 0, 0);
              if(W)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM32, RN, 0, 0, 0);
            } else if(P && !U) {
              // DB
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM32, LREG_TMP1, 0, 0, 0);
              if(W)
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM32, RN, 0, 0, 0);
            }

            for(i = 0; i < regs; i++) {
              DV = (VD + i) + LREG_FP0;
              //printf("DV %d, big_endian %d \n", DV, big_endian);
              if(single_regs) {
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, DV, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              } else {
                if(big_endian) {
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, DV, 0, 32, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);

                  //FIXME: the srcB is defined as uint8_t, passing 0xFFFFFFFF will result in a truncate
                  // There are two more instances in this block that I updated.
                  //CrackInst::setup(rinst, iAALU, OP_S64_AND, DV, 0xFFFFFFFF, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, DV, 0xFF, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
                } else {
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, DV, 0xFF, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, DV, 0xFF, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, DV, 0, 32, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
                }
              }
            }
          } //end Vector Store Multiple VSTM 
          else if(b8 && !b5 && !b4) { //Vector Store Register VSTR //A8-786
            //If RN == PC_REG, UNPREDICTABLE
            uint8_t U = b7;
            uint8_t IMM8 = (insn>>16) & 0xFF;
            uint8_t coproc = (insn>>24) & 0xF;
            bool single_regs;
            bool big_endian = false;

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
            }

            if(coproc == 10) {
              VD = ((((insn>>28) & 0xF) << 1) | b6); 
              single_regs = true;
            }
            else if(coproc == 11)
              single_regs = false;

            if(U)
              CrackInst::setup(rinst, iSALU_ADDR, OP_S32_ADD, RN, 0, (IMM8<<2), LREG_TMP1, 0, 0, 0);
            else
              CrackInst::setup(rinst, iSALU_ADDR, OP_S32_SUB, RN, 0, (IMM8<<2), LREG_TMP1, 0, 0, 0);

            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

            if(single_regs) {
              if(!(VD % 2)) {
                VD = (VD>>1) + LREG_FP0;
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
              }
              else {
                VD = (VD>>1) + LREG_FP0;
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
              }
            }
            else {
              if(big_endian) {
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
              }
            }
          } //end Vector Store Register VSTR 
          else if((b8 && !b7 && b5) && !b4 && (RN == STACKPTR)) { //Vector Push Registers VPUSH //A8-696
            uint32_t IMM8 = (insn>>16) & 0xFF;

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
            }
            
            CrackInst::setup(rinst, iSALU_ADDR, OP_S64_SUB, STACKPTR, 0, (IMM8 << 2), LREG_TMP1, 0, 0, 0); //addr
            CrackInst::setup(rinst, iAALU, OP_S64_SUB, STACKPTR, 0, (IMM8 << 2), STACKPTR, 0, 0, 0); 

            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

            if(coproc == 10) {
              VD = ((((insn>>28) & 0xF) << 1) | b6);
              uint32_t regs = IMM8;
              uint8_t j = 0;

              for(uint8_t i = 0; i < regs; i++) {
                if(!(i % 2)) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, ((VD+i)/2)+LREG_FP0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, ((VD+i)/2)+LREG_FP0, 0, 32, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                }

                if(++j < regs)
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              }
            }
            else if(coproc == 11) {
              uint32_t regs = IMM8/2;
              uint8_t j = 0;
              bool big_endian = false;

              if(big_endian) {
                for(uint8_t i = 0; i < regs; i++) {
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, ((VD+i)/2)+LREG_FP0, 0, 32, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_B, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, ((VD+i)/2)+LREG_FP0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_B, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

                  if(++j < IMM8)
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
                }
              }
              else {
                for(uint8_t i = 0; i < regs; i++) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, ((VD+i)/2)+LREG_FP0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, ((VD+i)/2)+LREG_FP0, 0, 32, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

                  if(++j < IMM8)
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
                }
              }
            }
          } //end Vector Push Registers VPUSH 
          else if((((!b8 && b7 && b5) && (RN != STACKPTR)) || (!b8 && b7 && !b5) || (b8 && !b7 && b5)) && b4) { //Vector Load Multiple VLDM //A8-626

            //If RN == PC_REG, UNPREDICTABLE
            uint8_t P = b8;
            uint8_t U = b7;
            uint8_t W = b5;
            uint8_t IMM8 = (insn>>16) & 0xFF;
            uint32_t IMM32 = 0xFFFFFFFF && IMM8;
            uint8_t regs = 0xFF; // force initialization
            int DV;
            uint8_t coproc = (insn>>24) & 0xF;
            bool single_regs;
            bool big_endian = false;
            uint8_t i;

            if(coproc == 10) {
              VD = ((((insn>>28) & 0xF) << 1) | b6); 
              single_regs = true;
              regs = IMM8;
            }
            else if(coproc == 11) {
              VD = (((insn>>28) & 0xF) | b6); 
              single_regs = false;
              regs = IMM8/2;
            }

            //printf("VLDM: regs %d IMM32 %d vd %d \n", regs, IMM32, VD);

            if (cond != AL) {
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
            }

            if(!P && U) {
              // IA
              CrackInst::setup(rinst, iRALU, OP_iRALU_move, RN, 0, 0, LREG_TMP1, 0, 0, 0);
              if(W)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM32, RN, 0, 0, 0);
            } else if(P && !U) {
              // DB
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM32, LREG_TMP1, 0, 0, 0);
              if(W)
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM32, RN, 0, 0, 0);
            }

            for(i = 0; i < regs; i++) {
              DV = (VD + i) + LREG_FP0;
              //printf("DV %d LREG_FP0 %d \n", DV, LREG_FP0);
              if(single_regs) {
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, DV, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              } else {

                if(big_endian) {
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, DV, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);

                } else {
                  CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, DV, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_S32_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                }
              }
            }
          } //end Vector Load Multiple VLDM 
          else if((!b8 && b7 && b5) && b4 && (RN == STACKPTR)) { //Vector Pop Registers VPOP //A8-694
            //If RN == PC_REG and WRITEBACK, UNPREDICTABLE
            uint8_t IMM8 = (insn>>16) & 0xFF;
            uint32_t IMM32 = IMM8 << 2;
            uint8_t regs= 0xFF; // force initialization;
            int DV;
            uint8_t coproc = (insn>>24) & 0xF;
            bool first_use = true;
            bool single_regs;
            bool big_endian = false;

            uint8_t i, j;

            if(cond != AL) { //not always
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
            } //end not always

            if(coproc == 10) {
              VD = ((((insn>>28) & 0xF) << 1) | b6); 
              DV = VD;
              single_regs = true;
              regs = IMM8/2;
            } else {
              I(coproc == 11);
              DV = VD;
              single_regs = false;
              regs = IMM8;
            }

            if(single_regs) {
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              for(i = 0; i < regs; i++) {
                j = i;


                if(first_use) {
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR, 0, 0, LREG_TMP1, 0, 0, 0);

                  if(++j < regs)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, STACKPTR, 0, 4, LREG_TMP2, 0, 0, 0);

                  first_use = false;
                }
                else {
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0);

                  if(++j < regs)
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);

                }

                VD = ((DV+i)>>1) + LREG_FP0;

                if(!((DV+i) % 2)) {
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);

              }
            }
            else {
              for(i = 0; i < regs; i++) {
                j = i;

                if(first_use) {
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR, 0, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, STACKPTR, 0, 4, LREG_TMP3, 0, 0, 0);

                  first_use = false;
                }
                else {
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, 0, 4, LREG_TMP3, 0, 0, 0);
                }

                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, LREG_TMP2, 0, 0, 0);

                if(++j < regs)
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, 0, 4, LREG_TMP3, 0, 0, 0);

                if(big_endian)
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, (VD+i), 0, 0, 0);

              }

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, STACKPTR, 0, IMM32, STACKPTR, 0, 0, 0);
            }
          } //end Vector Pop Registers VPOP 
          else if(b8 && !b5 && b4) { //Vector Load Register VLDR //A8-628
            //If RN == PC_REG and WRITEBACK, UNPREDICTABLE
            uint8_t U = b7;
            uint8_t IMM8 = (insn>>16) & 0xFF;
            uint32_t IMM32 = IMM8 << 2;
            bool single_regs;

            uint8_t coproc = (insn>>24) & 0xF;
            bool big_endian = false;

            if(cond != AL) { //not always
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
            } //end not always

            if(coproc == 10) {
              VD = ((((insn>>28) & 0xF) << 1) | b6); 
              single_regs = true;
            }
            else if(coproc == 11)
              single_regs = false;

            if(U) {
              if(RN != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM32, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(((PC+4) & 0xFFFFFFFC) + IMM32), LREG_TMP1, 0, 0, 0);
            }
            else {
              if(RN != PC_REG)
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM32, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(((PC+4) & 0xFFFFFFFC) - IMM32), LREG_TMP1, 0, 0, 0);
            }

            if(single_regs) {
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

              if(!(VD % 2)) {
                VD = (VD>>1) + LREG_FP0;
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              }
              else {
                VD = (VD>>1) + LREG_FP0;
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              }

              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);

              if(big_endian) {
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
            }
          } //end Vector Load Register VLDR 
        } //end Advanced SIMD, VFP Extension register load/store
        else if(((!b9 && !b8 && !b7 && b5 && !b4) || (!b9 && !b8 && b7 && !b4) || (!b9 && b8 && !b4)) && !((coproc == 10) || (coproc == 11))) { //Store Coprocessor STC/STC2 //A8-372
          OOPS("Warning Store Coprocessor STC/STC2 is NOT IMPLEMENTED.\n");
        } //end Store Coprocessor STC/STC2 
        else if(((!b9 && !b8 && !b7 && b5 && b4) || (!b9 && !b8 && b7 && b4) || (!b9 && b8 && b4)) && !((coproc == 10) || (coproc == 11)) && (RN != PC_REG)) { //Load Coprocessor (imm) LDC/LDC2 //A8-106
          OOPS("Warning Load Coprocessor LDC/LDC2 is NOT IMPLEMENTED.\n");
        } //end Load Coprocessor (imm) LDC/LDC2
        else if(((!b9 && !b8 && !b7 && b5 && b4) || (!b9 && !b8 && b7 && b4) || (!b9 && b8 && b4)) && !((coproc == 10) || (coproc == 11)) && (RN == PC_REG)) { //Load Coprocessor (imm) LDC/LDC2 (literal) //A8-108
          OOPS("Warning Load Coprocessor (imm) LDC/LDC2 (literal) is NOT IMPLEMENTED.\n");
        } //end Load Coprocessor (imm) LDC/LDC2 (literal) 
        else if(!b9 && !b8 && !b7 && !b6 && !b5) { //UNDEFINED
          OOPS("WARNING: Instruction in Coprocessor Instructions is UNDEFINED.\n");
        }
        else if((!b9 && !b8 && !b7 && b6 && !b5) && ((coproc == 10) || (coproc == 11))) { //Advanced SIMD,VFP 64-bit transfers between ARM core and extension registers //A7-32
          if(!b24) {
            if(!b7 && !b6 && b4) { //VMOV (btwn 2 ARM core registers and 2 single-precision registers) //A8-650 
              //If RN or RD == PC_REG, UNPREDICTABLE;
              //If RN or RD == STACKPTR, UNPREDICTABLE;
              //If RM == 31, UNPREDICTABLE;
              
              VM = (((insn>>16) & 0xF) << 1) | b21;

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              if(b4) { //to ARM
                if(!(VM % 2)) {
                  VM = (VM>>1) + LREG_FP0;

                  if(cond != AL) { // in ITBLOCK with COND not Always
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RN, 0, RN, 0, 0, 0);
                  } //end in ITBLOCK
                  else { //not in ITBLOCK (or) in IT block with COND Always
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, RD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, RN, 0, 0, 0);
                  } //end not in ITBLOCK

                }
                else {
                  VM1 = ((VM+1)>>1) + LREG_FP0;
                  VM = (VM>>1) + LREG_FP0;

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RN, 0, RN, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, RD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, RN, 0, 0, 0);
                  } //end always
                }
              }
              else {
                if(!(VM % 2)) {
                  VM = (VM>>1) + LREG_FP0;

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, RN, 0, 32, LREG_TMP1, 0, 0, 0);
    
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VM, 0, VM, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, VM, 0, 0, 0);
                  } //end always
                }
                else {
                  VM1 = ((VM+1)>>1) + LREG_FP0;
                  VM = (VM>>1) + LREG_FP0;

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VM, 0, VM, 0, 0, 0);
                  } //end not always
                  else
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VM, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, RN, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VM1, 0, VM1, 0, 0, 0);
                  } //end not always
                  else
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, RN, 0, VM1, 0, 0, 0);
                }
              }
            } //end VMOV (btwn 2 ARM core registers and 2 single-precision registers) 
          }
          else { 
            if(!b7 && b6 && b4) { //VMOV (btwn 2 ARM core registers and a doubleword extension register) //A8-652 
              //If RN or RD == PC_REG, UNPREDICTABLE;
              //If RN or RD == STACKPTR, UNPREDICTABLE;
              //If RM == 31, UNPREDICTABLE;
    
              if(b4){ //to ARM RD and RN=RT2 from dblword extension reg
                //OOPS("Warning VMOV dependent on VCVT which is not implemented completely.");
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RN, 0, RN, 0, 0, 0);
                } //end not always
                else { //always
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, RD, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 32, RN, 0, 0, 0);
                } //end always
              }
              else { //to dblword exten reg from ARM rt1 and rt2
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, RN, 0, 32, LREG_TMP1, 0, 0, 0);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VM, 0, VM, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, VM, 0, 0, 0);
              }
            } //end VMOV (btwn 2 ARM core registers and a doubleword extension register) 
          }
        } //end Advanced SIMD,VFP 64-bit transfers between ARM core and extension registers 
        else if((op1 == 4) & !((coproc == 10) || (coproc == 11))) { //MCRR/MCRR2 //A8-188
          OOPS("Warning MCRR/MCRR2 is NOT IMPLEMENTED.\n");
        } //end MCRR/MCRR2 
        else if((op1 == 5) & !((coproc == 10) || (coproc == 11))) { //MRRC //A8-204 //Encoding T1 //NEEDTODO
          //If RT == PC_REG or RN == PC_REG or RN == RT, UNPREDICTABLE
          //If RT == STACKPTR or RN == STACKPTR, UNPREDICTABLE

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always
          else {//always
          }
        } //end MRRC/MRRC2 
        else if((b9 && !b8) && !op && ((coproc == 10) || (coproc == 11))) { //VFP data-processing Instructions //A7-24
          uint8_t opc2 = insn & 0xF;

          if(!b7 && !b5 && !b4) { //Vector Multiply Accumulate or Subtract VMLA/VMLS (fp) //A8-636 //Encoding T2
            if(b24) {
              VD = ((b6<<4) | ((insn>>28) & 0xF)) + LREG_FP0;
              VN = ((b23<<4) | (insn & 0xF)) + LREG_FP0;
              VM = ((b21<<4) | ((insn>>16) & 0xF)) + LREG_FP0;

              if(!b22) //VMLA
                CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
              else { //VMLS
                CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
              }

              if(cond != AL) { //not always
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, VD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
              } //end not always
              else { //always
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, VD, LREG_TMP1, 0, VD, 0, 0, 1);
              } //end always
            }
            else {
              VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
              VN = (((insn & 0xF) << 1) | b23) + LREG_FP0;
              VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

              CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

              if(!(VD % 2)) { //bottom 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                }

                if(!b22) //VMLA
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                else { //VMLS
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);
              }
              else { //top 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                }

                if(!b22) //VMLA
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                else { //VMLS
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);
              }
            }
          } //end Vector Multiply Accumulate or Subtract VMLA/VMLS (fp) 
          else if(!b7 && !b5 && b4) { //Vector Negate Multiply Accumulate or Subtract VNMLA/VNMLS //A8-674 //Encoding T1
            if(b24) {
              VD = ((b6<<4) | ((insn>>28) & 0xF)) + LREG_FP0;
              VN = ((b23<<4) | (insn & 0xF)) + LREG_FP0;
              VM = ((b21<<4) | ((insn>>16) & 0xF)) + LREG_FP0;

              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, VD, 0, 0, LREG_TMP1, 0, 0, 1);
              CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, LREG_TMP2, 0, 0, 1);

              if(b22) //VNMLA
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);

              if(cond != AL) { //not always
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);

                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
              } //end not always
              else
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 1);
            }
            else {
              VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
              VN = (((insn & 0xF) << 1) | b23) + LREG_FP0;
              VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

              CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

              if(!(VD % 2)) { //bottom 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP5, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);

                if(b6) //VNMLA
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);
              }
              else { //top 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);

                if(b6) //VNMLA
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else { //always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);
                } //end always
              }
            }
          } //end Vector Negate Multiply Accumulate or Subtract VNMLA/VNMLS
          else if(!b7 && b5 && !b4 && b22) { //Vector Negate Multiply VNMUL //A8-674 //Encoding T2
            if(b24) {
              VD = ((b6<<4) | ((insn>>28) & 0xF)) + LREG_FP0;
              VN = ((b23<<4) | (insn & 0xF)) + LREG_FP0;
              VM = ((b21<<4) | ((insn>>16) & 0xF)) + LREG_FP0;

              CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, LREG_TMP1, 0, 0, 1);

              if(cond != AL) { //not always
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
              } //end not always
              else
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, LREG_TMP1, 0, 0, VD, 0, 0, 1);
            }
            else {
              VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
              VN = (((insn & 0xF) << 1) | b23) + LREG_FP0;
              VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

              CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

              if(!(VD % 2)) { //bottom 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
              else { //top 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
            }
          } //end Vector Negate Multiply VNMUL 
          else if(!b7 && b5 && !b4 && !b22) { //Vector Multiply VMUL (fp)  //A8-664 //Encoding T2
            if(b24) {
              VD = ((b6<<4) | ((insn>>28) & 0xF)) + LREG_FP0;
              VN = ((b23<<4) | (insn & 0xF)) + LREG_FP0;
              VM = ((b21<<4) | ((insn>>16) & 0xF)) + LREG_FP0;

              if(cond != AL) { //not always
                CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
              } //end not always
              else
                CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, VN, VM, 0, VD, 0, 0, 1);
            }
            else {
              VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
              VN = (((insn & 0xF) << 1) | b23) + LREG_FP0;
              VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

              CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

              if(!(VD % 2)) { //bottom 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
    
                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
              else { //top 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
            }
          } //end Vector Multiply VMUL (fp)
          else if(!b7 && b5 && b4 && !b22) { //Vector Add VADD (fp)  //A8-538 //Encoding T2
            if(b24) {
              VD = ((b6<<4) | ((insn>>28) & 0xF)) + LREG_FP0;
              VN = ((b23<<4) | (insn & 0xF)) + LREG_FP0;
              VM = ((b21<<4) | ((insn>>16) & 0xF)) + LREG_FP0;

              if(cond != AL) { //not always
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
              } //end not always
              else
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, VN, VM, 0, VD, 0, 0, 1);
            }
            else {
              VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
              VN = (((insn & 0xF) << 1) | b23) + LREG_FP0;
              VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

              CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

              if(!(VD % 2)) { //bottom 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else { //always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                } //end always
              }
              else { //top 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
            }
          } //end Vector Add VADD (fp)
          else if(!b7 && b5 && b4 && b22) { //Vector Sub VSUB (fp)  //A8-790 //Encoding T2
            if(b24) {
              VD = ((b6<<4) | ((insn>>28) & 0xF)) + LREG_FP0;
              VN = ((b23<<4) | (insn & 0xF)) + LREG_FP0;
              VM = ((b21<<4) | ((insn>>16) & 0xF)) + LREG_FP0;

              if(cond != AL) { //not always
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
              } //end not always
              else
                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBD, VN, VM, 0, VD, 0, 0, 1);
            }
            else {
              VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
              VN = (((insn & 0xF) << 1) | b23) + LREG_FP0;
              VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

              CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

              if(!(VD % 2)) { //bottom 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
    
                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
              else { //top 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
            }
          } //end Vector Sub VSUB (fp)
          else if(b7 && !b5 && !b4 && !b22) { //Vector Divide VDIV //A8-590 //Encoding T2
            if(b24) {
              VD = ((b6<<4) | ((insn>>28) & 0xF)) + LREG_FP0;
              VN = ((b23<<4) | (insn & 0xF)) + LREG_FP0;
              VM = ((b21<<4) | ((insn>>16) & 0xF)) + LREG_FP0;

              if(cond != AL) { //not always
                CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, VN, VM, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
              } //end not always
              else
                CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, VN, VM, 0, VD, 0, 0, 1);
            }
            else {
              VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
              VN = (((insn & 0xF) << 1) | b23) + LREG_FP0;
              VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

              CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

              if(!(VD % 2)) { //bottom 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
              else { //top 32-bits of VD
                VD = (VD >> 1) + LREG_FP0;

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                if(!(VM % 2)) { //bottom 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                }
                else { //top 32-bits of VM
                  VM = (VM >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                }

                if(!(VN % 2)) { //bottom 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                }
                else { //top 32-bits of VN
                  VN = (VN >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                }

                CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
            }
          } //end Vector Divide VDIV
          else if(b7 && b5 && b4) { //Other VFP data-processing instructions
            if(!b22) { //Vector Move VMOV (imm) //A8-640 //Encoding T2
              uint32_t IMM32;

              if(!b24) {
                VD = ((((insn>>28) & 0xFFFF) << 1) | b24);

                if(b3) {
                  IMM32 = (b4 << 31) | (0 << 30) | (b2 << 29) | (b2 << 28) | (b2 << 27) | (b2 << 26) | 
                        (b2 << 25) | (((((b1<<1) | b0) << 4) | ((insn>>16) & 0xFFFF)) << 19);
                }
                else {
                  IMM32 = (b4 << 31) | (1 << 30) | (b2 << 29) | (b2 << 28) | (b2 << 27) | (b2 << 26) | 
                        (b2 << 25) | (((((b1<<1) | b0) << 4) | ((insn>>16) & 0xFFFF)) << 19);
                }

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, IMM32, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                if(!(VD % 2)) {
                  VD = (VD >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                }
                else {
                  VD = (VD >> 1) + LREG_FP0;
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                }

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
              }
              else {
                VD = ((b24 << 4) | ((insn>>28) & 0xFFFF))  + LREG_FP0;
                VD1 = VD + 1;

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, ((((b1<<1) | b0) << 4) | ((insn>>16) & 0xFFFF)), LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);

                if(b3) {
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, ((b4<<9) | (0<<8) | (b2<<7) | (b2<<6) | 
                                 (b2<<5) | (b2<<4) | (b2<<3) | (b2<<2) | (b2<<1) | b2), LREG_TMP2, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, ((b4<<9) | (1<<8) | (b2<<7) | (b2<<6) | 
                                 (b2<<5) | (b2<<4) | (b2<<3) | (b2<<2) | (b2<<1) | b2), LREG_TMP2, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 53, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                } //end not always
                else { //always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                } //end always
              }
            } //end Vector Move VMOV (imm)
            else {
              if((opc2 == 0) && !b23 & b22) { //Vector Move VMOV (reg) //A8-642
                if(!b24) {
                  VD = ((((insn>>28) & 0xFFFF) << 1) | b6);
                  VM = ((((insn>>16) & 0xFFFF) << 1) | b21);

                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                  if(!(VD % 2)) {
                    VD = (VD >> 1) + LREG_FP0;

                    if(!(VM%2)) {
                      VM = (VM >> 1) + LREG_FP0;

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    }
                    else {
                      VM = (VM >> 1) + LREG_FP0;

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  }
                  else {
                    VD = (VD >> 1) + LREG_FP0;

                    if(!(VM % 2)) {
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                    }
                    else {
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    }
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                }
                else {
                  VD = ((b6 << 4) | ((insn>>28) & 0xFFFF))  + LREG_FP0;
                  VD1 = VD + 1;

                  VM = ((b21 << 4) | ((insn>>16) & 0xFFFF))  + LREG_FP0;
                  VM1 = VM + 1;

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, 0, LREG_TMP2, 0, 0, 0); //FIXME: RAT/ROB move?

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD1, 0, VD1, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, 0, VD, 0, 0, 0); //FIXME: RAT/ROB move?
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, 0, VD1, 0, 0, 0); //FIXME: RAT/ROB move?
                  } //end always
                }
              } //end Vector Move VMOV (reg)
              else if((opc2 == 0) && b23 & b22) { //Vector Absolute VABS //A8-532 //Encoding T2
                if(b24) {
                  VD = ((b6 << 4) | ((insn>>28) & 0xF)) + LREG_FP0;
                  VM = ((b21 << 4) | ((insn>>16) & 0xF)) + LREG_FP0;

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSD, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSD, VM, 0, 0, VD, 0, 0, 1);
                }
                else {
                  VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
                  VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                  if(!(VD % 2)) { //bottom 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    } //end not always
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                  else { //top 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    } //end not always
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                }
              } //end Vector Absolute VABS
              else if((opc2 == 1) && !b23) { //Vector Negate VNEG //A8-672 //Encoding T2
                if(b24) {
                  VD = ((b6 << 4) | ((insn>>28) & 0xF)) + LREG_FP0;
                  VM = ((b21 << 4) | ((insn>>16) & 0xF)) + LREG_FP0;

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    } //end not always
                    else 
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGD, VM, 0, 0, VD, 0, 0, 1);
                }
                else {
                  VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
                  VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

                  if(!(VD % 2)) { //bottom 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 1);
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else 
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                  else { //top 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else 
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                }
              } //end Vector Negate VNEG
              else if((opc2 == 1) && b23) { //Vector Square Root VSQRT //A8-762
                if(b24) {
                  VD = ((b6 << 4) | ((insn>>28) & 0xF)) + LREG_FP0;
                  VM = ((b21 << 4) | ((insn>>16) & 0xF)) + LREG_FP0;

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else 
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, VM, 0, 0, VD, 0, 0, 1);
                }
                else {
                  VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
                  VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);

                  if(!(VD % 2)) { //bottom 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTS, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 1);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                      } //end always
                  }
                  else { //top 32-bits of VD
                    VD = (VD >> 1) + LREG_FP0;

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                    if(!(VM % 2)) { //bottom 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    }
                    else { //top 32-bits of VM
                      VM = (VM >> 1) + LREG_FP0;
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTS, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else 
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                }
              } //end Vector Square Root VSQRT
              else if(opc2 == 2) { //Vector Convert VCVTB/VCVTT (btwn half-precision and single-precision) //A8-588
                if(b22) {
                  // get values from instruction
                  VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;
                  VD = ((((insn >> 28) & 0xF) << 1) | b6) + LREG_FP0;

                  if(cond != AL) { // check condition code
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
                  }

                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);
                  
                  // store values in memory
                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_SYSMEM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, VD, 0, 0, 0, 0, 0);
                  
                  if(b23) //VCVTB
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VCVTB_STOH, 8, 0, 0, 0);
                  else //VCVTT
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VCVTT_STOH, 8, 0, 0, 0);
                  
                  // retrieve result of complex funtion from memory
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                  
                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  
                  // load result into destination
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                }
              } //end Vector Convert VCVTB/VCVTT (btwn half-precision and single-precision)
              else if(opc2 == 3) { //Vector Convert VCVTB/VCVTT (btwn half-precision and single-precision) //A8-588
                if(b22) {
                  // get values from instruction
                  VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;
                  VD = ((((insn >> 28) & 0xF) << 1) | b6) + LREG_FP0;

                  if(cond != AL) { // check condition code
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
                  }
                  
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);
                  
                  // store value in memory
                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  
                  if(b23) //VCVTB
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VCVTB_HTOS, 8, 0, 0, 0);
                  else //VCVTT
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VCVTT_HTOS, 8, 0, 0, 0);
                  
                  // retrieve result of complex funtion from memory
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                  
                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  
                  // load result into destination
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                }
              } //end Vector Convert VCVTB/VCVTT (btwn half-precision and single-precision)
              else if((opc2 == 4) || (opc2 == 5)) { //Vector Compare VCMP/VCMPE //A8-572
                if(b22) {
                  if(!b21) { //Encoding T2
                    if(b24) {
                      VD = ((b6 << 4) | ((insn>>28) & 0xF)) + LREG_FP0;

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBD, VD, 0, 0, LREG_TMP1, 0, 0, 1);
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 6, LREG_TMP2, 0, 0, 0); //ARM EQ = 0b0110;
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 8, LREG_TMP3, 0, 0, 0); //ARM LESS = 0b1000;
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 2, LREG_TMP3, 0, 0, 0); //ARM GREATER = 0b0010;
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 3, LREG_TMP3, 0, 0, 0); //ARM UNORDERED = 0b0011;
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_VS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 28, LREG_TMP1, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x0FFFFFFF, LREG_TMP2, 0, 0, 0); 

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end not always
                        else 
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP1, 0, LREG_FSR, 0, 0, 0); 
                    }
                    else {
                      VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;

                      if(!(VD % 2)) { //bottom 32-bits of VD
                        VD = (VD >> 1) + LREG_FP0;

                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 1);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 6, LREG_TMP2, 0, 0, 0); //ARM EQ = 0b0110;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 8, LREG_TMP3, 0, 0, 0); //ARM LESS = 0b1000;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 2, LREG_TMP3, 0, 0, 0); //ARM GREATER = 0b0010;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 3, LREG_TMP3, 0, 0, 0); //ARM UNORDERED = 0b0011;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_VS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 28, LREG_TMP1, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x0FFFFFFF, LREG_TMP2, 0, 0, 0); 

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          } //end not always
                          else 
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_FSR, 0, 0, 0); 
                      }
                      else { //top 32-bits of VD
                        VD = (VD >> 1) + LREG_FP0;
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 6, LREG_TMP2, 0, 0, 0); //ARM EQ = 0b0110;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 8, LREG_TMP3, 0, 0, 0); //ARM LESS = 0b1000;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 2, LREG_TMP3, 0, 0, 0); //ARM GREATER = 0b0010;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 3, LREG_TMP3, 0, 0, 0); //ARM UNORDERED = 0b0011;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_VS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 28, LREG_TMP1, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x0FFFFFFF, LREG_TMP2, 0, 0, 0); 

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          } //end not always
                          else 
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_FSR, 0, 0, 0); 
                      }
                    }
                  }
                  else { //Encoding T1
                    if(b24) {
                      VD = ((b6 << 4) | ((insn>>28) & 0xF)) + LREG_FP0;
                      VM = ((b21 << 4) | ((insn>>16) & 0xF)) + LREG_FP0;

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBD, VD, VM, 0, LREG_TMP1, 0, 0, 1);
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 6, LREG_TMP2, 0, 0, 0); //ARM EQ = 0b0110;
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 8, LREG_TMP3, 0, 0, 0); //ARM LESS = 0b1000;
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 2, LREG_TMP3, 0, 0, 0); //ARM GREATER = 0b0010;
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 3, LREG_TMP3, 0, 0, 0); //ARM UNORDERED = 0b0011;
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_VS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 28, LREG_TMP1, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x0FFFFFFF, LREG_TMP2, 0, 0, 0); 

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end not always
                        else 
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_FSR, 0, 0, 0); 
                    }
                    else {
                      VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
                      VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

                      if(!(VD % 2)) { //bottom 32-bits of VD
                        VD = (VD >> 1) + LREG_FP0;

                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                        if(!(VM % 2)) { //bottom 32-bits of VM
                          VM = (VM >> 1) + LREG_FP0;
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                        }
                        else { //top 32-bits of VM
                          VM = (VM >> 1) + LREG_FP0;
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                        }

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 6, LREG_TMP2, 0, 0, 0); //ARM EQ = 0b0110;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 8, LREG_TMP3, 0, 0, 0); //ARM LESS = 0b1000;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 2, LREG_TMP3, 0, 0, 0); //ARM GREATER = 0b0010;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 3, LREG_TMP3, 0, 0, 0); //ARM UNORDERED = 0b0011;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_VS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 28, LREG_TMP1, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x0FFFFFFF, LREG_TMP2, 0, 0, 0); 

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_FSR, 0, 0, 0); 
                          } //end always
                      }
                      else { //top 32-bits of VD
                        VD = (VD >> 1) + LREG_FP0;

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);

                        if(!(VM % 2)) { //bottom 32-bits of VM
                          VM = (VM >> 1) + LREG_FP0;
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                        }
                        else { //top 32-bits of VM
                          VM = (VM >> 1) + LREG_FP0;
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);
                        }

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 6, LREG_TMP2, 0, 0, 0); //ARM EQ = 0b0110;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 8, LREG_TMP3, 0, 0, 0); //ARM LESS = 0b1000;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 2, LREG_TMP3, 0, 0, 0); //ARM GREATER = 0b0010;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 3, LREG_TMP3, 0, 0, 0); //ARM UNORDERED = 0b0011;
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_VS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); 

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 28, LREG_TMP1, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x0FFFFFFF, LREG_TMP2, 0, 0, 0); 

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          } //end not always
                          else 
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_FSR, 0, 0, 0); 
                      }
                    }
                  }
                }
              } //end Vector Compare VCMP/VCMPE
              else if((opc2 == 7) && b23) { //Vector Convert VCVT (btwn double-precision and single-precision) //A8-584
                if(b24) {
                  VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
                  VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;
                }
                else {
                  VD = ((b6 << 4) | ((insn>>28) & 0xF)) + LREG_FP0;
                  VM = ((b21 << 4) | ((insn>>16) & 0xF)) + LREG_FP0;
                }

                  if(cond != AL) { //not always
                    if(b24) 
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOS, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                    else 
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOD, VM, 0, 0, LREG_TMP1, 0, 0, 1);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b24) 
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOS, VM, 0, 0, VD, 0, 0, 1);
                    else 
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOD, VM, 0, 0, VD, 0, 0, 1);
                  } //end always
              } //end Vector Convert VCVT (btwn double-precision and single-precision)
              else if(opc2 == 8) { //Vector Convert VCVT/VCVTR (btwn fp and int, VFP) //A8-578 //FIXME: how to deal with rounding and un/signed values?
                OOPS("WARNING: Vector Convert (VCVT) btwn fp and int is NOT IMPLEMENTED CORRECTLY.\n");
                if(b2) { //fp->int
                  if(b24) {
                    VM = ((b21 << 4) | ((insn>>16) & 0xF)) + LREG_FP0;

                    if(!b0) { //unsigned
                      if(cond != AL) { //not always
                        if(b23) //round to zero
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                        else //otherwise use rounding mode specified by FPSCR
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else { //always
                        if(b23) //round to zero
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                        else //otherwise use rounding mode specified by FPSCR
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                      } //end always
                    }
                    else { //signed
    
                        if(cond != AL) { //not always
                          if(b23) //round to zero
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                          else //otherwise use rounding mode specified by FPSCR
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else { //always
                          if(b23) //round to zero
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                          else //otherwise use rounding mode specified by FPSCR
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                        } //end always
                    }
                  }
                  else {
                    VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

                    if(!b0) { //unsigned
    
                        if(cond != AL) { //not always
                          if(b23) //round to zero
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                          else //otherwise use rounding mode specified by FPSCR
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else { //always
                          if(b23) //round to zero
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                          else //otherwise use rounding mode specified by FPSCR
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                        } //end always
                    }
                    else { //signed
    
                        if(cond != AL) { //not always
                          if(b23) //round to zero
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                          else //otherwise use rounding mode specified by FPSCR
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else { //always
                          if(b23) //round to zero
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                          else //otherwise use rounding mode specified by FPSCR
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                        } //end always
                    }
                  }
                }
                else { //int->fp //selects rounding based on FPSCR
                  VM = ((b16<<4) | ((insn>>16) & 0xF)) + LREG_FP0;

                    if(cond != AL) { //not always
                      if(b24) {
                        VD = ((b6<<4) | ((insn>>28) & 0xF)) + LREG_FP0;
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                      }
                      else {
                        VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b24) {
                        VD = ((b6<<4) | ((insn>>28) & 0xF)) + LREG_FP0;
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, VM, 0, 0, VD, 0, 0, 1);
                      }
                      else {
                        VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, VM, 0, 0, VD, 0, 0, 1);
                      }
                    } //end always
                }
              } //end Vector Convert VCVT/VCVTR (btwn fp and int, VFP)
              else if((opc2 == 10) || (opc2 == 11)) { //Vector Convert VCVT (btwn fp and fixed-point, VFP) //A8-582
                if(b22) { //VCVT (fixed-point to floating-point VFP) //A8-582 
                  uint8_t size = b23? 2 : 1; //b23==1, size is 32bits; otherwise size is 16bits
                  VM = (((insn & 0xF) << 1) | b5) + LREG_FP0; //bit 3-0+bit5

                  if(cond != AL) {
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
                  }

                  // push r0 (it will have SYSMEM for the syscall (arg1), r7 ///////////////                                                          
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);
                  /////// end push ////////////////////////////////////////////////////////
                  /////// memory writing ////////////////////////////////////////////////
                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, size, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, b8, 0, 0, 0, 0, 0);
                  ////////////////////////// end memory ///////////////////////////////

                  OOPS("WARNING: VCVT (fixed-point to floating-point unsigned, VFP) is IMPLEMENTED in complexinst.\n");
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VCVTFXFP, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  // pop r0 r7 //////////////////////////////////////////////////////////                                                       
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  /// writing result to VD ///////
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                  ///////////////////////end of pop r0 r7 ////////////////////////////
                }
              } //end Vector Convert VCVT (btwn fp and fixed-point, VFP)
              else if((opc2 == 12) || (opc2 == 13)) { //Vector Convert VCVT/VCVTR (btwn fp and int, VFP) //A8-578 //FIXME: how to deal with rounding and un/signed values?
                OOPS("WARNING: Vector Convert (VCVT) btwn fp and int is NOT IMPLEMENTED CORRECTLY.\n");
                if(b2) { //fp->int
                  if(b24) {
                    VM = ((b21 << 4) | ((insn>>16) & 0xF)) + LREG_FP0;

                    if(!b0) { //unsigned
                      if(cond != AL) { //not always
                        if(b23) //round to zero
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                        else //otherwise use rounding mode specified by FPSCR
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else { //always
                        if(b23) //round to zero
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                        else //otherwise use rounding mode specified by FPSCR
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                      } //end always
                    }
                    else { //signed
                      if(cond != AL) { //not always
                        if(b23) //round to zero
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                        else //otherwise use rounding mode specified by FPSCR
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else { //always
                        if(b23) //round to zero
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                        else //otherwise use rounding mode specified by FPSCR
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, VM, 0, 0, VD, 0, 0, 1);
                      } //end always
                    }
                  }
                  else {
                    VM = ((((insn>>16) & 0xF) << 1) | b21) + LREG_FP0;

                    if(!b0) { //unsigned
                      if(cond != AL) { //not always
                        if(b23) //round to zero
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                        else //otherwise use rounding mode specified by FPSCR
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else { //always
                        if(b23) //round to zero
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                        else //otherwise use rounding mode specified by FPSCR
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                      } //end always
                    }
                    else { //signed
                      if(cond != AL) { //not always
                        if(b23) //round to zero
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                        else //otherwise use rounding mode specified by FPSCR
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, LREG_TMP1, 0, 0, 1);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else { //always
                        if(b23) //round to zero
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                        else //otherwise use rounding mode specified by FPSCR
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, VM, 0, 0, VD, 0, 0, 1);
                      } //end always
                    }
                  }
                }
                else { //int->fp //selects rounding based on FPSCR
                  VM = ((b16<<4) | ((insn>>16) & 0xF)) + LREG_FP0;

                  if(cond != AL) { //not always
                    if(b24) {
                      VD = ((b6<<4) | ((insn>>28) & 0xF)) + LREG_FP0;
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                    }
                    else {
                      VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, VM, 0, 0, LREG_TMP1, 0, 0, 1);
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b24) {
                      VD = ((b6<<4) | ((insn>>28) & 0xF)) + LREG_FP0;
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, VM, 0, 0, VD, 0, 0, 1);
                    }
                    else {
                      VD = ((((insn>>28) & 0xF) << 1) | b6) + LREG_FP0;
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, VM, 0, 0, VD, 0, 0, 1);
                    }
                  } //end always
                }
              } //end Vector Convert VCVT/VCVTR (btwn fp and int, VFP)
              else if((opc2 == 14) || (opc2 == 15)) { //Vector Convert VCVT (btwn fp and fixed-point, VFP) //A8-582 //NEEDTODO
                OOPS("WARNING: Vector Convert (VCVT) btwn fp and fixed-point is NOT IMPLEMENTED.\n");
              } //end Vector Convert VCVT (btwn fp and fixed-point, VFP)
            }
          } //end Other VFP data-processing instructions
        } //end VFP data-processing Instructions 
        else if((b9 && !b8) && !op && !((coproc == 10) || (coproc == 11))) { //Coprocessor data-processing Instructions CDP/CDP2 //A8-68
          OOPS("Warning Coprocessor data-processing instructions CDP/CDP2 is NOT IMPLEMENTED.\n");
        } //end Coprocessor data-processing Instructions CDP/CDP2 
        else if((b9 && !b8) && op && ((coproc == 10) || (coproc == 11))) { //8/16/32-bit transfers btwn ARM core and extension registers //A7-31
          if(!b4) {
            if(!b24) {
              if(!b7 && !b6 && !b5) { //Vector Move VMOV (btwn ARM core reg and single-precision reg) //A8-648
                //If RD == PC_REG, UNPREDICTABLE;
                //If RD == STACKPTR, UNPREDICTABLE;
                
                VN = ((insn & 0xF) << 1) | b23;

                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  

                if(!(VN % 2)) { 
                  VN = (VN>>1) + LREG_FP0;

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VN, 0, VN, 0, 0, 0);
                  } //end not always
                  else
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, VN, 0, 0, 0);
                }
                else {
                  VN = (VN>>1) + LREG_FP0;

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VN, 0, VN, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VN, 0, 0, 0);
                  } //end always
                }
              } //Vector Move VMOV (btwn ARM core reg and single-precision reg) 
              else if(b7 && b6 && b5) { //Move to VFP Special Reg from ARM Core reg //VMSR //A8-660 //B6-28 for system-level
                OOPS("WARNING: VMSR is NOT IMPLEMENTED correctly.\n");
                //if RD == PC, UNPREDICTABLE
                //if RD == STACKPTR, UNPREDICTABLE
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, RD, 0, 22, LREG_TMP2, 0, 0, 0); //Round Mode bits

                //FIXME: missing Trap Enable bits
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, 0x1F, LREG_CEXC, 0, 0, 0); //Cumulative exception bits
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 3, LREG_RND, 0, 0, 0); //Round Mode bits

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, RD, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                } //end not always
                else { //always
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, RD, 0, 0, LREG_FSR, 0, 0, 0); //FIXME: RAT/ROB move?
                } //end always
              } //Move to VFP Special Reg from ARM Core reg //VMSR 
            }
            else {
              if(!b7) { //Vector Move //VMOV (ARM core reg to scalar) //A8-644
                //If RD == PC_REG, UNPREDICTABLE;
                //If RD == STACKPTR, UNPREDICTABLE;
                
                VD = ((b23<<4) | (insn & 0xF)) + LREG_FP0;

                if(b6) { //8-bits
                  uint8_t index = (b5 << 2) | ((insn>>21) & 0x3);

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                  switch(index) {
                    case 0:
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x100, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      break;
                    case 1:
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                      
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0xFF01, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                      break;
                    case 2:
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0xFF0001, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      break;
                    case 3:
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, 0, static_cast<uint32_t>(0x00FFFFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      break;
                    case 4:
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFFFFFF00), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                      break;
                    case 5:
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFFFF00FF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 40, LREG_TMP1, 0, 0, 0);
                      break;
                    case 6:
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF00FFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                      break;
                    case 7:
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0x00FFFFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);
                      break;
                  }

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                }
                else if(b21) { //16-bits
                  uint8_t index = (b5 << 1) | b22;

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                  switch(index) {
                    case 0:
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFFFF0000), LREG_TMP2, 0, 0, 0); //immediate is intended to work as such
                      break;
                    case 1:
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      break;
                    case 2:
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFFFF0000), LREG_TMP2, 0, 0, 0); //immediate is intended to work as such
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                      break;
                    case 3:
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                      break;
                  }

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                }
                else if(!b22) { //32-bits
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                  if(!b5) {
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, RD, LREG_TMP1, 0, VD, 0, 0, 0);
                    } //end always
                  }
                  else {
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    } //end not always
                    else 
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                }
              } //Vector Move //VMOV (ARM core reg to scalar) 
              else if(b7 && !b22) { //Vector Duplicate VDUP (ARM core reg) //A8-594
                //If RD == PC_REG, UNPREDICTABLE;
                //If RD == STACKPTR, UNPREDICTABLE;
                
                uint8_t size = (b6<<1) | b21;
                VD = ((b23<<4) | (insn & 0xF)) + LREG_FP0;
                VD1 = VD + 1;

                switch(size) {
                  case 0: //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b5)
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                      if(b5) 
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                    } //end always
                    break;
                  case 1: //16-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b5) 
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);

                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                      if(b5) 
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                    } //end always
                    break;
                  case 2: //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);
    
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b5) 
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                      if(b5) 
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                    } //end always
                  break;
                }
              } //end Vector Duplicate VDUP (ARM core reg)
            }
          }
          else {
            if(!b24) {
              if(!b7 && !b6 && !b5) { //Vector Move VMOV (btwn ARM core reg and single-precision reg) //A8-648
                //To ARM register
                //If RD == PC_REG, UNPREDICTABLE;
                //If RD == STACKPTR, UNPREDICTABLE;
                
                VN = ((insn & 0xF) << 1) | b23;

                if(!(VN % 2)) { 
                  VN = (VN>>1) + LREG_FP0;

                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, RD, 0, 0, 0);
                }
                else {
                  VN = (VN>>1) + LREG_FP0;

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, RD, 0, 0, 0);
                }
              } //Vector Move VMOV (btwn ARM core reg and single-precision reg)
              else if(b7 && b6 && b5) { //Move to VFP Special Reg from ARM Core reg VMRS //A8-658 //B6-27 for system-level
                OOPS("WARNING: VMRS is NOT IMPLEMENTED correctly.\n");
                //if RD == STACKPTR, UNPREDICTABLE;

                if(RD == PC) { //LREG_ICC = FCC;
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_FSR, 0, 28, LREG_TMP1, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP1, 0, 0, LREG_TMP1, 1, 0, 0);
                    CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
                  } //end not always
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP1, 0, 0, LREG_ICC, 1, 0, 0);
                }
                else {
                  //FIXME: missing Trap Enable bits
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_FSR, 0, 22, LREG_TMP1, 0, 0, 0); //Round Mode bits

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 3, LREG_TMP1, 0, 0, 0); //Round Mode bits
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_RND, 0, LREG_RND, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x1F, LREG_TMP1, 0, 0, 0); //Cumulative Exception bits
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_CEXC, 0, LREG_CEXC, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_FSR, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RT, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_FSR, 0, 0x1F, LREG_CEXC, 0, 0, 0); //Cumulative Exception bits
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 3, LREG_RND, 0, 0, 0); //Round Mode bits
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_FSR, 0, 0, RT, 0, 0, 0); //FIXME: RAT/ROB move?
                  } //end always
                }
              } //Move to VFP Special Reg from ARM Core reg VMSR 
            }
            else { //Vector Move VMOV (scalar to ARM core reg) //A8-646
              //If RD == PC_REG, UNPREDICTABLE;
              //If RD == STACKPTR, UNPREDICTABLE;

              VN = ((b23<<4) | (insn & 0xF)) + LREG_FP0;

              if(b6) { //8-bits
                uint8_t index = (b5<<2) | ((insn>>21) & 0x3);

                switch(index) {
                  case 0:
                    if(cond != AL) { //not always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, RD, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                      }
                    } //end always
                    break;
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 8, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                      }
                    } //end always
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                      }
                    } //end always
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 24, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                      }
                    } //end always
                    break;
                  case 4:
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                      }
                    } //end always
                    break;
                  case 5:
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 40, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                      }
                    } //end always
                    break;
                  case 6:
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 48, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 48, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 48, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                      }
                    } //end always
                    break;
                  case 7:
    
                    if(cond != AL) { //not always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 56, LREG_TMP1, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 56, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 56, RD, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 56, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
                      }
                    } //end always
                  break;
                }
              }
              else if(b21) { //16-bits
                uint8_t index = (b5<<1) | b22;

                switch(index) {
                  case 0:
    
                    if(cond != AL) { //not always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, RD, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                      }
                    } //end always
                    break;
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, RD, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                      }
                    } //end always
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, RD, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                      }
                    } //end always
                    break;
                  case 3:
                    if(cond != AL) { //not always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP1, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else { //always
                      if(b7) //Unsigned
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, RD, 0, 0, 0);
                      else { //Signed
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                      }
                    } //end always
                  break;
                }
              }
              else if(!b22) { //32-bits
                if(!b5) {
                  if(b7) { //Unsigned
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else //always
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, RD, 0, 0, 0);
                  }
                  else { //Signed
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, VN, 0, 32, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                    } //end not always
                    else //always
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, RD, 0, 0, 0);
                  }
                }
                else {
                  if(cond != AL) { //not always
                    if(b7) //Unsigned
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, VN, 0, 32, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                  } //end not always
                  else { //always
                    if(b7) //Unsigned
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, RD, 0, 0, 0);
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, VN, 0, 32, RD, 0, 0, 0);
                  } //end always
                }
              }
            } //Vector Move VMOV (scalar to ARM core reg)
          }
        } //end 8/16/32-bit transfers btwn ARM core and extension registers 
        else if((b9 && !b8 && !b4) && op && !((coproc == 10) || (coproc == 11))) { //MCR/MCR2 //A8-186
          OOPS("Warning MCR/MCR2 is NOT IMPLEMENTED.\n");
        } //end MCR/MCR2 
        else if((b9 && !b8 && b4) && op && !((coproc == 10) || (coproc == 11))) { //MRC //A8-202 //Encoding T1
          //If RT == STACKPTR, UNPREDICTABLE
          uint8_t coproc = (insn>>24) & 0xF;
          uint8_t CRN = insn & 0xF;
          uint8_t CRM = (insn>>16) & 0xF;
          uint8_t opc1 = (insn>>5) & 0x7;
          uint8_t opc2 = (insn>>21) & 0x7;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          if(RT != PC_REG) {
            if(coproc == 15) { //System Coprocessor
              // push r0 (it will have SYSMEM for the syscall (arg1), r7
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);
  
              CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
  
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, 0, CRN, 0, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, 0, CRM, 0, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((opc1 << 3) | opc2), LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_MRC, 8, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

  
              // pop r0, r7
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
   
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RT, 0, 0, 0);
            }
          }
          else { //Write LREG_ICC
            if(coproc == 15) {
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);
  
              CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
  
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, 0, CRN, 0, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, 0, CRM, 0, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((opc1 << 3) | opc2), LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_MRC, 8, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

  
              // pop r0, r7
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
  
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP1, 0, 0, LREG_ICC, 1, 0, 0);
            }
          }
      } //end MRC
      else if(b9 && b8) { //Advanced SIMD data-processing instructions //A7-10
          if(!b7) { //Three reg of the same length //A7-12
            uint8_t A = (insn>>24) & 0xF;
            uint8_t C = (insn>>4) & 0x3;

            uint8_t size = (insn>>4) & 0x3;

            switch(A) {
              case 0:
                if(!b20) { //Vector Halving Add VHADD //A8-600 //Signed
                  switch(size) {
                    case 0:
                      CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      } //end always
                      break;
                    case 1:
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      } //end always
                      break;
                    case 2:
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      } //end always
                    break;
                  }
                }
                else { //Vector Saturating Add VQADD //A8-700 //Signed
                  switch(size) {
                    case 0: //8-bit
    
                        if(cond != AL) { //not always
                          //First Byte
                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Second Byte 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Third Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fourth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fifth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Sixth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Seventh Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Eighth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP7, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          //First Byte
                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Second Byte 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Third Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fourth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fifth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Sixth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Seventh Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Eighth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end always
                      break;
                    case 1: //16-bit
                      if(cond != AL) { //not always
                        //First Halfword
                        CrackInst::setup(rinst, iAALU, OP_S16_SADD, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S16_SADD, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Second Halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Third Halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Fourth Halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        //First Halfword
                        CrackInst::setup(rinst, iAALU, OP_S16_SADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S16_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Second Halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Third Halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Fourth Halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      } //end always
                    break;
                    case 2: //32-bit
    
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S32_SADD, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP7, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S32_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      } //end always
                      break;
                    case 3: //64-bit
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_SADD, VN, VM, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S64_SADD, VN1, VM1, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_SADD, VN, VM, 0, VD, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S64_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      } //end always
                      break;
                  }
                }
                break;
              case 1:
                if(!b20) { //Vector Rounding Halving Add //VRHADD //A8-734 //Signed
                  switch(size) {
                    case 0:
                      CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                        }
                      } //end always
                      break;
                    case 1:
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                        }
                      } //end always
                      break;
                    case 2:
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                        }
                      }
                    break;
                  }
                }
                else {
                  switch(C) {
                    case 0: //Vector Bitwise AND //VAND (reg) //A8-544
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
       
                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, VM, 0, VD, 0, 0, 0);  
      
                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, VM1, 0, VD1, 0, 0, 0);  
                      } //end always
                      break;
                    case 1: //Vector Bitwise Bit Clear (ANDN) VBIC (reg) //A8-548
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
       
                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VN, VM, 0, VD, 0, 0, 0);  
      
                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VN1, VM1, 0, VD1, 0, 0, 0);  
                      } //end always
                      break;
                    case 2:
                      if(VN != VM) { //Vector Bitwise OR VORR (reg) //A8-680
                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
        
                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, VN, VM, 0, VD, 0, 0, 0);  
        
                            if(b22)
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, VN1, VM1, 0, VD1, 0, 0, 0);  
                          } //end always
                      }
                      else { //Vector Move  VMOV (reg) //A8-642 //Encoding T1
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
       
                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, 0, VD, 0, 0, 0); //FIXME: RAT/ROB move?
      
                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, 0, VD1, 0, 0, 0); //FIXME: RAT/ROB move?
                        } //end always
                      }
                      break;
                    case 3: //Vector Bitwise OR NOT VORN (reg) //A8-676
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_ORN, VN, VM, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_ORN, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_ORN, VN, VM, 0, VD, 0, 0, 0);

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S64_ORN, VN1, VM1, 0, VD1, 0, 0, 0);
                      } //end always
                      break;
                  }
                }
                break;
              case 2:
                if(!b20) { //Vector Halving Sub VHSUB //A8-600
                  switch(size) {
                    case 0:
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      } //end always
                      break;
                    case 1:
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      } //end always
                      break;
                    case 2:
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                      } //end always
                      break;
                  }
                }
                else { //Vector Saturating Sub VQSUB //A8-724
                  switch(size) {
                    case 0: //8-bit
                      if(cond != AL) { //not always
                        //First Byte
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Second Byte 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Third Byte
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Fourth Byte
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Fifth Byte
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Sixth Byte
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Seventh Byte
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Eighth Byte
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP7, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        //First Byte
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Second Byte 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Third Byte
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Fourth Byte
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Fifth Byte
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Sixth Byte
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Seventh Byte
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }

                        //Eighth Byte
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                        }
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      } //end always
                    break;
                    case 1: //16-bit
                        if(cond != AL) { //not always
                          //First Halfword
                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Second Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Third Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fourth Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP7, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          //First Halfword
                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Second Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Third Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fourth Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end always
                      break;
                    case 2: //32-bit
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_SSUB, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S32_SSUB, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP7, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S32_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S32_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end always
                      break;
                    case 3: //64-bit
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_SSUB, VN, VM, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S64_SSUB, VN1, VM1, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S64_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end always
                      break;
                  }
                }
                break;
              case 3:
                if(!b20) { //Vector Compare Greater Than VCGT VCGT(reg) //A8-560 //Encoding T1
                  switch(size) { 
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                      
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                else { //Vector Compare Greater Than or Equal VCGE(reg) //A8-556 //Encoding T1
                  switch(size) { 
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                break;
              case 4:
                if(!b20) { //Vector Shift Left VSHL (reg) //A8-752
                  switch(size) {
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 3: //64-bit
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                else { //Vector Saturating Shift Left  VQSHL (reg) //A8-718
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | (b22<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQSHL, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                  }
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                    } //end always
                }
                break;
              case 5:
                if(!b20) { //Vector Rounding Shift Left VRSHL //A8-736
                  switch(size) {
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP8, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP8, 0, 32, LREG_TMP8, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP8, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP8, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP8, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP8, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP8, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP8, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP8, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP8, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP8, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 3: //64-bit
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP5, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP5, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP5, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                else { //Vector Saturating Rounding Shift Left VQRSHL //A8-714
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | (b22<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQRSHL, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                  }
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

    
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                    } //end always
                }
                break;
              case 6: //Vector Max or Min VMAX/VMIN (int) //A8-630
                switch(size) {
                  case 0: //8-bit
                    if(!b20) { //Max
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    }
                    else { //Min
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    }
                    break;
                  case 1: //16-bit
                    if(!b20) { //Max
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    }
                    else { //Min
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    }
                    break;
                  case 2: //32-bit
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                    if(!b20) { //Max
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    }
                    else { //Min
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    }
                    break;
                }
                break;
              case 7:
                if(!b20) { //Vector Absolute difference VABD (unsigned, int) //A8-528 //Encoding T1
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | (b22<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VABD, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b22)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    } //end always
                }
                else { //Vector Absoulte difference and accumulate VABA //A8-526 //Encoding T1
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | (b22<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VABA, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b22)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    } //end always
                }
                break;
              case 8:
                if(!b20) { //Vector Add VADD (int) //A8-536
                  switch(size) {
                    case 0:
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22)  {
                            CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22) 
                            CrackInst::setup(rinst, iAALU, OP_S08_ADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 1:
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22) 
                            CrackInst::setup(rinst, iAALU, OP_S16_ADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 2:
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22) 
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 3:
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22) 
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, VN1, VM1, 0, VD1, 0, 0, 0);  
                        } //end always
                      break;
                  }
                }
                else { //Vector Test Bits VTST //A8-802
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                break;
              case 9:
                if(!b20) { //Vector Multiply Accumulate VMLA (int) //A8-634
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                else { //Vector multiply VMUL(int) //A8-662 //Encoding T1
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
 
                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
 
                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                break;
              case 10: //Vector Pairwise Max or Min VPMAX/VPMIN (int) A8-690
                if(!b20) { //Max
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else 
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else 
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                  }
                }
                else { //Min
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else 
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else 
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        } //end always
                      break;
                  }
                }
                break;
              case 11:
                if(!b20) { //Vector Saturating Doubling multiply return high half VQDMULH //A8-704 //Encoding T1
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((0<<5) | (0<<4) | (0<<3) | (b22<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((0<<4) | (0<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQDMULH, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                  }
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                    } //end always
                }
                else { //Vector Pairwise Add VPADD (int) A8-684
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else 
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else 
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else 
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                  }
                }
                break;
              case 13:
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                if(!b20 && !b5) { //Vector Add VADD (fp) //A8-538
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    } //end always
                }
                else if(!b20 && b5) { //Vector Sub VSUB (fp) //A8-790
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    } //end always
                }
                else if(b20) { //Vector Mulitply Accumulate or Subtract VMLA/VMLS (fp) //A8-636 //Encoding T1
                  if(!b5) { //VMLA fp
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      } //end always
                  }
                  else { //VMLS fp
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        }
                      } //end always
                  }
                }
                break;
              case 14:
                if(!b20 && !b5) { //Vector compare equal VCEQ (reg) //A8-552 //Encoding T2
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    } //end always
                }
                break;
              case 15:
                if(!b20) { //Vector Max or Min VMAX/VMIN (fp) //A8-632
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  

                  if(!b5) //VMAX
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  else //VMIN
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  

                  if(!b5) //VMAX
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                  else //VMIN
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  

                        if(!b5) //VMAX
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        else //VMIN
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  

                        if(!b5) //VMAX
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        else //VMIN
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  

                        if(!b5) //VMAX
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        else //VMIN
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  

                        if(!b5) //VMAX
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        else //VMIN
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    } //end always
                }
                else if(b20 && !b5) { //Vector Reciprocal Step VRECPS //A8-730
                  //FIXME: need to do ERROR checking
                  if(!b4) {
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 2, LREG_TMP2, 0, 0, 1);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 1);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP5, 0, 0, 0);
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 1);
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD1, 0, 0, 0);
                        }
                      } //end always
                  }
                }
                else if(b20 && b5) { //Vector Reciprocal Square root Step VRSQRTS //A8-744
                  //FIXME: need to do ERROR checking
                  if(!b4) {
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 3, LREG_TMP2, 0, 0, 1);
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 2, LREG_TMP3, 0, 0, 1);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP5, 0, 0, 0);
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 1);
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 1);
                    CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 1);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP5, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                    CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP5, LREG_TMP3, 0, LREG_TMP5, 0, 0, 1);

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP5, LREG_TMP3, 0, LREG_TMP5, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                          CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVS, LREG_TMP5, LREG_TMP3, 0, LREG_TMP5, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD1, 0, 0, 0);
                        }
                      } //end always
                  }
                }
                break;
            }
          } //end Three reg of the same length
          else if(b7 && !b5 && !b4 && !b3) { //One reg and a modified imm //A7-21
            uint8_t cmode = (insn>>24) & 0xF;
            uint32_t VECTOR_IMM = (((insn>>12) & 0x1) << 7) | ((insn & 0x7) << 4) | ((insn>>16) & 0xF);

            switch(cmode) {
              case 0:
              case 1:
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                break;
              case 2:
              case 3:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 40, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 4:
              case 5:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 6:
              case 7:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 8:
              case 9:
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 10:
              case 11:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 12:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 13:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 14:
                if(!b21) {
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                }
                else {
                  if(b12) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);  
                  }
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0, LREG_TMP1, 0, 0, 0);  

                  if(b2) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b1) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b0) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b19) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b18) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b17) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b16) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }
                }
                break;
              case 15:
                if(!b21) {
                  if(b2) {
                    uint32_t mod_imm = (b12<<15) | (0x1F << 13) | ((insn & 0x3) << 7) | (((insn>>16) & 0xF) << 3);
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(mod_imm), LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }
                  else {
                    uint32_t mod_imm = (b24 << 15) | (1 << 14) | ((insn & 0x3) << 7) | (((insn>16) & 0xF) << 3);
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(mod_imm), LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }
                }
                else{
                  OOPS("WARNING: Instruction is UNDEFINED in 1reg and a modified immediate space.\n");
                }
                break;
            }

            if(!b21) {
              if(b24 && (b27 && b26)) {  //Vector Or VORR (imm) //A8-678
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, VD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
 
                    if(b22) {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, VD1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, VD, LREG_TMP1, 0, VD, 0, 0, 0);  
 
                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, VD1, LREG_TMP1, 0, VD1, 0, 0, 0);  
                  } //end always
              }
              else { //Vector Move VMOV (imm) //A8-640 //Encoding T1
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VD, 0, 0, 0); //FIXME: RAT/ROB move?

                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VD1, 0, 0, 0); //FIXME: RAT/ROB move?
                  } //end always
              }
            }
            else {
              if(!b24 || (b27 && b26)) { //Vector not VMVN (imm) //A8-668
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                  } //end always
              }
              else if(b24 || !(b27 && b26)) { //Vector Bit Clear VBIC (imm) //A8-546
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP1, 0, VD, 0, 0, 0);  

                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP1, 0, VD1, 0, 0, 0);  
                  } //end always
              }
              else if(cmode == 14) { //Vector move VMOV (imm) //A8-640
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0); //FIXME: RAT/ROB move?
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0); //FIXME: RAT/ROB move?
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VD, 0, 0, 0); //FIXME: RAT/ROB move?

                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VD1, 0, 0, 0); //FIXME: RAT/ROB move?
                  } //end always
              }
              else if(b27 && b26 && b25 && b24) { //UNDEFINED
                OOPS("WARNING: Instruction in One reg and a modified imm is UNDEFINED.\n");
              }
            }
          } //end One reg and a modified imm 
          else if(b7 && b20) { //Two reg and a shift amount //A7-17
            uint8_t A = (insn>>24) & 0xF;
            uint32_t IMM6 = (b23 << 7) | (insn & 0x3F);
            uint8_t shift_amount = 0; 
            uint8_t round;
            uint8_t size = 0xFF; //force initialization

            switch(A) {
              case 0: //Vector Shift Right VSHR //A8-756
                if(b23) //64-bits
                  shift_amount = 64-IMM6;
                else if (!b23 && b5) //32-bits
                  shift_amount = 64-IMM6;
                else if(!b23 && !b5 && b4) //16-bits
                  shift_amount = 32-IMM6;
                else if(!b23 && !b5 && !b4 && b3) //8-bits
                  shift_amount = 16-IMM6;

                if(b23) { //64-bits
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, shift_amount, VD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, shift_amount, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM1, 0, shift_amount, VD1, 0, 0, 0);
                    } //end always
                }
                else if (!b23 && b5) { //32-bits
    
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM, 0, shift_amount, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM1, 0, shift_amount, VD1, 0, 0, 0);
                    } //end always
                }
                else if(!b23 && !b5 && b4) { //16-bits
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, VM, 0, shift_amount, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, VM1, 0, shift_amount, VD1, 0, 0, 0);
                    } //end always
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S08_SRA, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S08_SRA, VM, 0, shift_amount, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S08_SRA, VM1, 0, shift_amount, VD1, 0, 0, 0);
                    } //end always
                }
                break;
              case 1: //Vector Shift right and accumulate VSRA //A8-764
                if(b23) //64-bits
                  shift_amount = 64-IMM6;
                else if (!b23 && b5) //32-bits
                  shift_amount = 64-IMM6;
                else if(!b23 && !b5 && b4) //16-bits
                  shift_amount = 32-IMM6;
                else if(!b23 && !b5 && !b4 && b3) //8-bits
                  shift_amount = 16-IMM6;
                
                if(b23) { //64-bits
                  CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if (!b23 && b5) { //32-bits
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && b4) { //16-bits
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                  CrackInst::setup(rinst, iAALU, OP_S08_SRA, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_SRA, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                break;
              case 2: //Vector Rounding Shift right VRSHR //A8-738
                if(b23) //64-bits
                  shift_amount = 64-IMM6;
                else if (!b23 && b5) //32-bits
                  shift_amount = 64-IMM6;
                else if(!b23 && !b5 && b4) //16-bits
                  shift_amount = 32-IMM6;
                else if(!b23 && !b5 && !b4 && b3) //8-bits
                  shift_amount = 16-IMM6;
                
                round = 1 << (shift_amount -1);

                if(b23) { //64-bits
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if (!b23 && b5) { //32-bits
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && b4) { //16-bits
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                break;
              case 3: //Vector rounding shift right and accumulate VRSRA //A8-746
                if(b23) //64-bits
                  shift_amount = 64-IMM6;
                else if (!b23 && b5) //32-bits
                  shift_amount = 64-IMM6;
                else if(!b23 && !b5 && b4) //16-bits
                  shift_amount = 32-IMM6;
                else if(!b23 && !b5 && !b4 && b3) //8-bits
                  shift_amount = 16-IMM6;
                
                round = 1 << (shift_amount -1);

                if(b23) { //64-bits
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if (!b23 && b5) { //32-bits
                  CrackInst::setup(rinst, iAALU, OP_S32_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && b4) { //16-bits
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                break;
              case 5: //Vector shift left VSHL (imm) //A8-750
                if(b23) //64-bits
                  shift_amount = IMM6;
                else if (!b23 && b5) //32-bits
                  shift_amount = IMM6 - 32;
                else if(!b23 && !b5 && b4) //16-bits
                  shift_amount = IMM6 - 16;
                else if(!b23 && !b5 && !b4 && b3) //8-bits
                  shift_amount = IMM6 - 8;
                
                if(b23) { //64-bits
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, shift_amount, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                    } //end always
                }
                else if (!b23 && b5) { //32-bits
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, VM, 0, shift_amount, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                    } //end always
                }
                else if(!b23 && !b5 && b4) { //16-bits
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, VM, 0, shift_amount, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                    } //end always
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S08_SLL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S08_SLL, VM, 0, shift_amount, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S08_SLL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                    } //end always
                }
                break;
              case 6: //Vector Saturating shift left VQSHLU (imm) //A8-720
                if(b23) { //64-bits
                  size = 3;
                  shift_amount = IMM6;
                }
                else if(!b23 && b5) { //32-bits
                  size = 2;
                  shift_amount = IMM6 - 32;
                }
                else if(!b23 && !b5 && b4) { //16-bits
                  size = 1;
                  shift_amount = IMM6 - 16;
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                  size = 0;
                  shift_amount = IMM6 - 8;
                }

                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                if(b22) {
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<11) | (b24<<10) | (shift_amount<<4) | (0<<3) | (b22<<2) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<11) | (b24<<10) | (shift_amount<<4) | (0<<3) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQSHL, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                if(b22) {
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                    if(b22)
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end always
                break;
              case 7: //Vector Saturating shift left VQSHL (imm) //A8-720
                if(b23) { //64-bits
                  size = 3;
                  shift_amount = IMM6;
                }
                else if(!b23 && b5) { //32-bits
                  size = 2;
                  shift_amount = IMM6 - 32;
                }
                else if(!b23 && !b5 && b4) { //16-bits
                  size = 1;
                  shift_amount = IMM6 - 16;
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                  size = 0;
                  shift_amount = IMM6 - 8;
                }

                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                if(b22) {
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<11) | (b24<<10) | (shift_amount<<4) | (b12<<3) | (b22<<2) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<11) | (b24<<10) | (shift_amount<<4) | (b12<<3) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQSHL, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                if(b22) {
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                    if(b22)
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end always
                break;
              case 8:
                if(!b22 && !b23) { //Vector Shift right narrow VSHRN //A8-758
                  if(b5) //32-bits
                    shift_amount = 64-IMM6;
                  else if(!b5 && b4) //16-bits
                    shift_amount = 32-IMM6;
                  else if(!b5 && !b4 && b3) //8-bits
                    shift_amount = 16-IMM6;

                  if(b5) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                  else if(!b5 && b4) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, QM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, QM, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, QM1, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, QM1, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                  else if(!b21 && !b20 && b19) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, QM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 48, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, QM1, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                }
                else if(b22 && !b23) { //Vector rounding shift right narrow //VRSHRN //A8-740
                  if(b5) //32-bits
                    shift_amount = 64-IMM6;
                  else if(!b5 && b4) //16-bits
                    shift_amount = 32-IMM6;
                  else if(!b5 && !b4 && b3) //8-bits
                    shift_amount = 16-IMM6;

                  round = 1 << (shift_amount -1);

                  if(b5) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM, 0, round, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM1, 0, round, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                  else if(!b5 && b4) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, QM, 0, round, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, QM1, 0, round, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                  else if(!b21 && !b20 && b19) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S16_ADD, QM, 0, round, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP3, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 48, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S16_ADD, QM1, 0, round, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP3, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 48, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                  }
                }
                break;
              case 9:
                //Vector saturating shift right narrow VQSHRN/VQSHRUN //A8-722
                //Vector saturating shift right, rounded narrow VQRSHRN/VQRSHRUN //A8-716
                if(b5) { //64-bits
                  shift_amount = 64-IMM6;
                  size = 3;
                }
                else if(!b5 && b4) { //32-bits
                  shift_amount = 32-IMM6;
                  size = 2;
                }
                else if(!b5 && !b4 && b3) { //16-bits
                  shift_amount = 16-IMM6;
                  size = 1;
                }

                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QM, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b24<<10) | (shift_amount<<4) | (b12<<3) | (b22<<2) | size), 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QM1, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQSHRN, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 20, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end always
                break;
              case 10:
                if(!b22 && !b23 && (shift_amount != 0)) { //Vector shift long VSHLL //A8-754 //Encoding T1
                  if(b5) //32-bits
                    shift_amount = IMM6 - 32;
                  else if (!b5 && b4) //16-bits
                    shift_amount = IMM6 - 16;
                  else if(!b5 && !b4 && b3) //8-bits
                    shift_amount = IMM6 - 8;
                
                  if(b5) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, QD, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, QD1, 0, 0, 0);
                      } //end always
                  }
                  else if(!b5 && b4) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      } //end always
                  }
                  else if(!b5 && !b4 && b3) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      } //end always
                  }
                }
                else if(!b22 && !b23 && (shift_amount == 0)) { //Vector move long VMOVL //A8-654
                  uint8_t imm3 = (insn>>3) & 0x7;

                  if(imm3 == 1) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      } //end always
                  }
                  else if(imm3 == 2) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      } //end always
                  }
                  else if(imm3 == 4) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, QD, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, QD1, 0, 0, 0);
                      } //end always
                  }
                }
                break;
              case 14:
              case 15:
                if(!b23) { //Vector convert VCVT (btwn fp and fixed-point, advanced SIMD) //A8-580
                  OOPS("WARNING: VCVT (between fp and fixed-point, Advanced SIMD) is NOT IMPLEMENTED.\n");
                }
                break;
            }
          } //end Two reg and a shift amount
          else if(((b7 && !b5) || (b7 && b5 && !b4)) && (!b22 && !b20)) { //Three reg of different lengths //A7-15
            uint8_t A = (insn>>24) & 0xF;
            uint8_t size = (insn>>4) & 0x3;

            switch(A) {
              case 0: //Vector Add long or wide VADDL/VADDW //A8-542
              case 1:
                if(b24) { //VADDW
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 24, LREG_TMP7, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN, 0, 32, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, QN, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, QN1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, QN1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, QN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, QN1, LREG_TMP1, 0, QD1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, QN, LREG_TMP1, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, QN1, LREG_TMP1, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                  }
                }
                else { //VADDL
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 24, LREG_TMP7, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF00, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP7, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF00, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF00, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, VN, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                  }
                }
                break;
              case 2: //Vector Sub Long or wide VSUBL/VSUBW //A8-794
              case 3:
                if(b24) { //VSUBW
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 24, LREG_TMP7, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN, 0, 32, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, QN, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, QN1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, QN1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, QN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, QN1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, QN, LREG_TMP1, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, QN1, LREG_TMP1, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                  }
                }
                else { //VSUBL
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF00, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF00, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF00, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, VN, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SRA, VM, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRA, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                  }
                }
                break;
              case 4: //Vector Add and Narrow, return High half VADDHN //A8-540
                switch(size) {
                  case 0: //16-bit elements narrowed down to 8-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S16_ADD, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                    CrackInst::setup(rinst, iAALU, OP_S16_ADD, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 

                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 0

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0); //Byte 1
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 2
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 3
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 4
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0); //Byte 5
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 8, LREG_TMP3, 0, 0, 0); //Byte 6
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0); //Byte 7
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                    break;
                  case 1: //32-bit elements narrowed down to 16-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 

                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 0

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0); //Halfword 1
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 2
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0); //Halfword 1
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                    break;
                  case 2: //64-bit elements narrowed down to 32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //Word 1
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else 
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                    break;
                  }
                break;
              case 5: //Vector Absolute difference and accumulate VABAL //A8-526
                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1U<<4) | (b12<<3) | (0<<2) | size), 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD1, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VABA, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, QD, 0, QD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, QD, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, QD1, 0, 0, 0);
                  } //end always
                break;
              case 6: //Vector Sub and narrow, return high half VSHUBHN //A8-748
                switch(size) {
                  case 0: //16-bit elements narrowed down to 8-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S16_SUB, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                    CrackInst::setup(rinst, iAALU, OP_S16_SUB, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 

                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 0

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0); //Byte 1
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 2
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 3
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 4
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0); //Byte 5
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 8, LREG_TMP3, 0, 0, 0); //Byte 6
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0); //Byte 7
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                    break;
                  case 1: //32-bit elements narrowed down to 16-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 

                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 0

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0); //Halfword 1
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 2
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0); //Halfword 1
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                    break;
                  case 2: //64-bit elements narrowed down to 32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //Word 1
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                    break;
                }
                break;
              case 7: //Vector absolute difference VABDL (int) //A8-528 //Encoding T2
                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1U<<4) | (b12<<3) | (0<<2) | size), 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VABD, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                // pop LREG_R0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, QD, 0, QD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, QD, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, QD1, 0, 0, 0);
                  } //end always
                break;
              case 8: //Vector multiply accumulate VMLAL (int) //A9-634 //Encoding T2
              case 10:
                if(b25) { //VMLSL
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, QD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, QD1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, QD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, QD1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, QD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, QD1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, QD1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                        } //end always
                      break;
                  }
                }
                else { //VMLAL
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, QD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, QD1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, QD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, QD1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, QD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, QD1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, QD1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                        } //end always
                      break;
                  }
                }
                break;
              case 9: //Vector saturating doubling multiply accumulate or subtract long VQDMLAL/VQDMLSL //A8-702
              case 11:
                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((0<<5) | (0<<4) | (b25<<3) | (0<<2) | size), 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD1, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQDMLAL_SL, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, QD, 0, QD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, QD, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, QD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end always
                break;
              case 12: //Vector multiply VMULL (int) //A8-662 //Encoding T2
                switch(size) {
                  case 0: //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                      } //end always
                    break;
                  case 1: //16-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                      } //end always
                    break;
                  case 2: //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, QD1, 0, 0, 0);  
                      } //end always
                    break;
                }
                break;
              case 13: //Vector saturating doubling multiply long VQDMULL //A8-706 //Encoding T1
                switch(size) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP2, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  

                    //Q-flag
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                    //Q-flag
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP2, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0); //FP Q Flag
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP2, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0); //FP Q Flag
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, QD1, 0, 0, 0);
                      } //end always
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_SADD, LREG_TMP2, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, QD, 0, QD, 0, 0, 0);

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, QD1, 0, QD1, 0, 0, 0);

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0); //FP Q Flag
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_SADD, LREG_TMP2, LREG_TMP2, 0, QD, 0, 0, 0);  

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, QD, 0, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, QD1, 0, 0, 0);  

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, QD1, 0, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0); //FP Q Flag
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      } //end always
                    break;
                  default:
                    OOPS("VDQMULL Encoding T1 is UNDEFINED with this size.\n");
                    break;
                }
                break;
              case 14: //Vector multiply VMULL (polynomial) (polynomial) //A8-662 //Encoding T2
                if(size == 0) {
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 12, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD1, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VMULPOLY, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);

                  // pop LREG_R0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, QD, 0, QD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, QD, 0, 0, 0);
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, QD1, 0, 0, 0);
                    } //end always
                }
                break;
            }
          } //end Three reg of different lengths
          else if(((b7 && !b5) || (b7 && b5 && !b4)) && (b22 && !b20)) { //2 reg and a scalar //A7-16 
            uint8_t A = (insn>>24) & 0xF;
            uint8_t size = (insn>>4) & 0x3;
            uint8_t index = 0xFF; //force initializaiton 

            switch(A) {
              case 0: //Vector Multiply Accumulate or Subtract VMLA/VMLS (by scalar) //A8-638 //Encoding A1
              case 1:
              case 4:
              case 5:
                VM = ((insn>>16) & 0x7) + LREG_FP0;
                index = (b21<<1) | b19;

                if(!b26) { //VMLA
                  if(b24) { //fp
                    if(size == 1) { //16-bits
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else 
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  
                    }
                    else { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      if(!b21)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                    }
                  }
                  else {
                    if(size == 1) { //16-bits
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  
                        } //end always
                    }
                    else { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(!b21)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  
                    }
                  }
                }
                else { //VMLS
                  if(b24) { //fp
                    if(size == 1) { //16-bits
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  
                        } //end always
                    }
                    else { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      if(!b21)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                    }
                  }
                  else {
                    if(size == 1) { //16-bits
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD, 0, VD, 0, 0, 0);  
                    }
                    else { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(!b21)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD, 0, VD, 0, 0, 0);  
                    }
                  }
                }
                break;
              case 2: //Vector multiply accumulate or sub long VMLAL/VMLSL (by scalar) //A8-638 //Encoding T2
              case 6:
                VM = ((insn>>16) & 0x7) + LREG_FP0;
                index = (b21<<1) | b19;

                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                if(!b26) { //VMLA
                  if(size == 1) { //16-bits
                    switch(index) {
                      case 0: //1st halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1: //2nd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2: //3rd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3: //4th halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, QD, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, QD1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                      } //end always
                  }
                  else { //32-bits
                    if(!b21)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, QD, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, QD1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                      } //end always
                  }
                }
                else { //VMLS
                  if(size == 1) { //16-bits
                    switch(index) {
                      case 0: //1st halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1: //2nd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2: //3rd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3: //4th halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, QD, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, QD1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                      } //end always
                  }
                  else { //32-bits
                    if(!b21)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, QD, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, QD1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                      } //end always
                  }
                }
                break;
              case 3: //Vector Saturating doubling multiply accumulate or sub long VQDMLAL/VQDMLSL //A8-702 //Encoding T2
              case 7:
                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                if(size == 1) {
                  VM     = ((insn>>16) & 0x7) + LREG_FP0;
                  index  = (b21 << 1) | b19;
                }
                else if(size == 2)
                  index  = b21;

                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((index<<5) | (1<<4) | (b26<<3) | (0<<2) | size), 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD1, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQDMLAL_SL, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_TMP5, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, QD, 0, QD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, QD, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, QD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end always
                break;
              case 8: //Vector multiply VMUL (by scalar) //A8-666 //Encoding T1
              case 9:
                VM = ((insn>>16) & 0x7) + LREG_FP0;
                index = (b21<<1) | b19;

                if(b24) { //fp
                  if(size == 1) { //16-bits
                    switch(index) {
                      case 0: //1st halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1: //2nd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2: //3rd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3: //4th halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  
                  }
                  else { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                    if(!b21)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                  }
                }
                else {
                  if(size == 1) { //16-bits
                    switch(index) {
                      case 0: //1st halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1: //2nd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2: //3rd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3: //4th halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  
                  }
                  else { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                    if(!b21)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                  }
                }
                break;
              case 10: //Vector multiply long VMULL (by scalar) //A8-666 //Encoding T2
                VM = ((insn>>16) & 0x7) + LREG_FP0;
                index = (b21<<1) | b19;

                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                if(size == 1) { //16-bits
                  switch(index) {
                    case 0: //1st halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      break;
                    case 1: //2nd halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      break;
                    case 2: //3rd halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      break;
                    case 3: //4th halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                      break;
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);  
                    } //end always
                }
                else { //32-bits
                  if(!b21)
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, QD1, 0, 0, 0);  
                    } //end always
                }
                break;
              case 11: //Vector saturating doubling multiply long VQDMULL //Encoding T2
                switch(size) {
                  case 1:
                    VM = VM & 0x7;
                    index = (b21 << 1) | b19;

                    switch(index) {
                      case 0:
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                    //Q-flag
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP5, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP4, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                    //Q-flag
                    CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP4, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0); //FP Q Flag
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP4, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0); //FP Q Flag
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, QD1, 0, 0, 0);
                      } //end always
                    break;
                  case 2:
                    VM = VM & 0xF;

                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                    if(!b21)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD, 0, QD, 0, 0, 0);

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, QD1, 0, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0); //FP Q Flag
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_SADD, LREG_TMP3, LREG_TMP3, 0, QD, 0, 0, 0);  

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, QD, 0, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SADD, LREG_TMP3, LREG_TMP3, 0, QD1, 0, 0, 0);  

                        //Q-flag
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, QD1, 0, 0, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 2, LREG_TMP6, 0, 0, 0); 
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0); //FP Q Flag
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 27, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      } //end always
                    break;
                  default:
                    OOPS("VDQMULL Encoding T2 is UNDEFINED with this size.\n");
                    break;
                }
                break;
              case 12: //Vector saturating doubling multiply returning high half VQDMULH //A8-704 //Encoding T2
                if(size == 1) {
                  VM     = ((insn>>16) & 0x7) + LREG_FP0;
                  index  = (b21 << 1) | b19;
                }
                else if(size == 2)
                  index  = b21;

                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((index<<5) | (1<<4) | (0<<3) | size), 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQDMULH, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP5, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end always
                break;
              case 13: //Vector saturating rounding doubling multiply returning high half VQRDMULH //A8-712
                if(size == 1) {
                  VM     = ((insn>>16) & 0x7) + LREG_FP0;
                  index  = (b21 << 1) | b19;
                }
                else if(size == 2)
                  index  = b21;

                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((index<<5) | (1<<4) | (1<<3) | size), 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQDMULH, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end always
                break;
            }
          } //end 2 reg and a scalar
          else if((b7 && b5 && b4) && !b20) { //Vector Extract VEXT //A8-598
            uint32_t IMM4 = (insn>>24) & 0xF;

            //IF IMM4 > 7 && b22==0, UNDEFINED
            //IF b22 && ((VD | VN | VM) & 1), UNDEFINED

            if(IMM4 == 0) {
                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, VN, 0, 0, LREG_TMP1, 0, 0, 0);   //FIXME: RAT/ROB move?
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  
                  if(b22) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN1, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                  }
                } //end not always
                else { //always
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, VN, 0, 0, VD, 0, 0, 0);   //FIXME: RAT/ROB move?
                  
                  if(b22)
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN1, 0, 0, QD1, 0, 0, 0); //FIXME: RAT/ROB move?
                } //end always
            }
            else if((IMM4 == 8) && b22) { //if (IMM4 > 7) && !b6, UNDEFINED

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN1, 0, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM, 0, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                } //end not always
                else { //always
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN1, 0, 0, QD, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM, 0, 0, QD1, 0, 0, 0);
                } //end always
            }
            else if(b22) {
              if(IMM4 < 8) {
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN, 0, (IMM4&7)*8, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 64-((IMM4&7)*8), LREG_TMP2, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, QM, 0, 64-(IMM4*8), LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN1, 0, IMM4*8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, QM, 0, 64-(IMM4*8), LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN1, 0, IMM4*8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                  } //end always
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN1, 0, (IMM4&7)*8, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, QM, 0, 64-((IMM4&7)*8), LREG_TMP2, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, QM1, 0, 64-((IMM4-8)*8), LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, (IMM4-8)*8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, QM1, 0, 64-((IMM4-8)*8), LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, (IMM4-8)*8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                  } //end always
              }
            }
            else { // 0 < IMM4 < 8
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, (IMM4*8), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 64-(IMM4*8), LREG_TMP2, 0, 0, 0);

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                } //end not always
                else
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
            }
          } //end Vector Extract VEXT
        } //end Advanced SIMD data-processing instructions 
      } //end Coprocessor instructions
      break;
    case 2:
      if(!b31 && !b9) { //Data-processing (modified imm) //A6-15 //ARMv6T2
        uint8_t  Sbit       = b4;
        uint8_t  op         = (insn>>5) & 0xF;

        uint8_t  modimm     = (b10 << 4) | (((insn>>28) & 0x7) << 1) | b23;
        uint32_t CONST_IMM  = 0;
        uint8_t  MOD_IMM    = (1 << 7) | ((insn>>16) & 0x7F);

        bool     useImm;

        switch(modimm) {
          case 0:
          case 1:
            CONST_IMM = (insn>>16) & 0xFF;
            useImm = true;
            break;
          case 2:
          case 3:
            CONST_IMM = (((insn>>16) & 0xFF) << 16) | ((insn>>16) & 0xFF);
            useImm = true;
            break;
          case 4:
          case 5:
            CONST_IMM = (((insn>>16) & 0xFF) << 24) | (((insn>>16) & 0xFF) << 8);
            useImm = true;
            break;
          case 6:
          case 7:
            CONST_IMM = (((insn>>16) & 0xFF) << 24) | (((insn>>16) & 0xFF) << 16) | (((insn>>16) & 0xFF) << 8) | ((insn>>16) & 0xFF);
            useImm = true;
            break;
          default:
            CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, MOD_IMM, LREG_TMP2, 0, 0, 0);  
            CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP2, 0, modimm, LREG_TMP2, 0, 0, 0);  
            useImm = false;
            break;
        }

          if(cond != AL) { //not always
            if((op == 0) && (RD != PC_REG)) { //AND imm //A8-34
              //If RD == STACKPTR or RD ==(PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            } //end AND imm
            else if((op == 0) && (RD == PC_REG) && Sbit) { //TST imm //A8-454
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
            } //end TST imm
            else if(op == 1) { //BIC imm //A8-50
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            } //end BIC imm //A8-50
            else if((op == 2) && (RN != PC_REG)) { //ORR imm //A8-228
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            } //end ORR imm
            else if((op == 2) && (RN == PC_REG)) { //MOV imm //A8-194
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, CONST_IMM, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
              else
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            } //end MOV imm
            else if((op == 3) && (RN != PC_REG)) { //ORN imm //A8-224
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_ORN, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_ORN, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            } //end ORN imm
            else if((op == 3) && (RN == PC_REG)) { //MVN imm //A8-214
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              if(useImm) {
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(CONST_IMM ^ 0xFFFFFFFF), LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            } //end MVN imm
            else if((op == 4) && (RD != PC_REG)) { //EOR imm //A8-94
              //If RD == STACKPTR or RD ==(PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            } //end EOR imm
            else if((op == 4) && (RD == PC_REG) && Sbit) { //TEQ imm //A8-448
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
            } //end TEQ imm
            else if((op == 8) && (RD != PC_REG)) { //ADD (imm, Thumb) //A8-20
              //If RD == STACKPTR or RD ==(PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            } //end ADD (imm, Thumb)
            else if((op == 8) && (RD == PC_REG) && Sbit) { //CMN imm //A8-74
              //If RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
            } //end CMN imm
            else if(op == 10) { //ADC imm //A8-14
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            } //end ADC imm
            else if(op == 11) { //SBC imm //A8-302
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            } //end SBC imm
            else if((op == 13) && (RD != PC_REG)) { //SUB(imm, Thumb) //A8-454
              //If RD == STACKPTR or RD ==(PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            } //end SUB(imm, Thumb)
            else if((op == 13) && (RD == PC_REG) && Sbit) { //CMP imm //A8-454
              //If RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);
            } //end CMP imm
            else if(op == 14) { //RSB imm //A8-454
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(useImm) {
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, RN, 0, LREG_TMP1, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              if(Sbit)
                CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP1, 0, LREG_ICC, 1, 0, 0);

              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            } //end RSB imm
          } //end not always
          else { //always
            if((op == 0) && (RD != PC_REG)) { //AND imm //A8-34
              //If RD == STACKPTR or RD ==(PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, CONST_IMM, RD, Sbit, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
            } //end AND imm
            else if((op == 0) && (RD == PC_REG) && Sbit) { //TST imm //A8-454
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, CONST_IMM, 0, 1, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP2, 0, 0, 1, 0, 0);
            } //end TST imm
            else if(op == 1) { //BIC imm //A8-50
              //If RD == STACKPTR or RD ==(PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, 0, CONST_IMM, RD, Sbit, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_ANDN, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
            } //end BIC imm //A8-50
            else if((op == 2) && (RN != PC_REG)) { //ORR imm //A8-228
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, 0, CONST_IMM, RD, Sbit, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_OR, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
            } //end ORR imm
            else if((op == 2) && (RN == PC_REG)) { //MOV imm //A8-194
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, CONST_IMM, RD, Sbit, 0, 0); //FIXME: RAT/ROB move?
              else
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP2, 0, 0, RD, Sbit, 0, 0); //FIXME: RAT/ROB move?
            } //end MOV imm
            else if((op == 3) && (RN != PC_REG)) { //ORN imm //A8-224
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_ORN, RN, 0, CONST_IMM, RD, Sbit, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_ORN, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
            } //end ORN imm
            else if((op == 3) && (RN == PC_REG)) { //MVN imm //A8-214
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              if(useImm) {
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(CONST_IMM ^ 0xFFFFFFFF), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, RD, Sbit, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, RD, Sbit, 0, 0);
            } //end MVN imm
            else if((op == 4) && (RD != PC_REG)) { //EOR imm //A8-94
              //If RD == STACKPTR or RD ==(PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, 0, CONST_IMM, RD, Sbit, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
            } //end EOR imm
            else if((op == 4) && (RD == PC_REG) && Sbit) { //TEQ imm //A8-448
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, 0, CONST_IMM, 0, 1, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_XOR, RN, LREG_TMP2, 0, 0, 1, 0, 0);
            } //end TEQ imm
            else if((op == 8) && (RD != PC_REG)) { //ADD (imm, Thumb) //A8-20
              //If RD == STACKPTR or RD ==(PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, CONST_IMM, RD, Sbit, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, RD, Sbit, 0, 0);
            } //end ADD (imm, Thumb)
            else if((op == 8) && (RD == PC_REG) && Sbit) { //CMN imm //A8-74
              //If RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, CONST_IMM, 0, 1, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP2, 0, 0, 1, 0, 0);
            } //end CMN imm
            else if(op == 10) { //ADC imm //A8-14
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, 0, CONST_IMM, RD, Sbit, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, RD, Sbit, 0, 0);
            } //end ADC imm
            else if(op == 11) { //SBC imm //A8-302
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, RN, 0, LREG_TMP1, 0, 0, 0);

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, LREG_TMP1, 0, 0, 0); //invert carry
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_ICC, 0, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
            } //end SBC imm
            else if((op == 13) && (RD != PC_REG)) { //SUB(imm, Thumb) //A8-454
              //If RD == STACKPTR or RD ==(PC_REG && Sbit == 0), UNPREDICTABLE
              //If RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
            } //end SUB(imm, Thumb)
            else if((op == 13) && (RD == PC_REG) && Sbit) { //CMP imm //A8-454
              //If RN == PC_REG, UNPREDICTABLE

              if(useImm)
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, 0, 1, 0, 0); //invert carry
            } //end CMP imm
            else if(op == 14) { //RSB imm //A8-454
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(useImm) {
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, CONST_IMM, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, RN, 0, LREG_TMP1, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, RN, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_XORICC, LREG_TMP1, 0, 0x2, RD, Sbit, 0, 0); //invert carry
            } //end RSB imm
          } //end always
      } //end Data-processing (modified imm)
      else if(!b31 && b9) { //Data-processing (plain binary imm) //A6-19 //ARMv6T2
        uint8_t op           = (insn>>4) & 0x1F;
        uint8_t superscriptA = (((insn>>28) & 0x7) << 2) | ((insn>>22) & 0x3);
        
          if(cond != AL) { //not always
            if((op == 0) && (RN != PC_REG)) { //ADD Wide (12-bit) (imm, Thumb) //A8-20
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              uint32_t IMM12 = (b10 << 11) | (((insn>>28) & 0x7) << 8) | ((insn>>16) & 0xFF);
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM12, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end ADD Wide (12-bit) (imm, Thumb) 
            else if((op == 0) && (RN == PC_REG)) { //ADR //A8-32
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              uint32_t IMM12 = (b10 << 11) | (((insn>>28) & 0x7) << 8) | ((insn>>16) & 0xFF);
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4+IMM12), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end ADR 
            else if(op == 4) { //MOVW wide (16-bit) (imm) //A8-194
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              uint32_t IMM16 = ((insn & 0xF) << 12)| (b10 << 11) | (((insn >> 28) & 0x7) << 8) |((insn >>16) & 0xFF);
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, IMM16, LREG_TMP1, 0, 0, 0); //FIXME: RAT/ROB move?
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end MOVW wide (16-bit) (imm) 
            else if((op == 10) && (RN != PC_REG)) { //SUB Wide (12-bit) (imm, Thumb) //A8-418
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              uint32_t IMM12 = (b10 << 11) | (((insn>>28) & 0x7) << 8) | ((insn>>16) & 0xFF);
  
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM12, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SUB Wide (12-bit) (imm, Thumb) 
            else if((op == 10) && (RN == PC_REG)) { //ADR //A8-32
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              uint32_t IMM12 = (b10 << 11) | (((insn>>28) & 0x7) << 8) | ((insn>>16) & 0xFF);
  
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4-IMM12), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end ADR 
            else if(op == 12) { //MOVT Top (16-bit) //A8-200
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              uint32_t IMM16 = ((insn & 0xF) << 12)| (b10 << 11) | (((insn >> 28) & 0x7) << 8) |((insn >>16) & 0xFF);
  
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, 0, (IMM16<<16), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end MOVT Top (16-bit) 
            else if(((op == 16) || (op == 18)) && (superscriptA != 0)) { //SSAT //A8-362
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t sat_imm   = (insn>>16) & 0x1F;
              uint8_t SHIFT_IMM = ((insn>>28) & 0x7 << 3) | ((insn>>22) & 0x3);
  
              if(b5) {
                if(SHIFT_IMM != 0) 
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 31, LREG_TMP1, 0, 0, 0);
              }
              else {
                if(SHIFT_IMM != 0) 
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
              }
  
              if((SHIFT_IMM != 0) || (b5))
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, sat_imm, LREG_TMP2, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, sat_imm, LREG_TMP2, 0, 0, 0);
  
              //form mask
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, sat_imm, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
   
              //top>0
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP4, 0, 0, 0);
  
              if((SHIFT_IMM != 0) || (b5))
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, RN, 0, LREG_TMP1, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP4, LREG_Q_FLAG, 0, LREG_TMP4, 0, 0, 0); //Int Q Flag
  
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  //invert mask
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
   
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SSAT 
            else if((op == 18) && (superscriptA == 0)) { //SSAT16 //A8-364
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t sat_imm = (insn>>16) & 0xF;
  
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP5, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, sat_imm, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP5, 0, sat_imm, LREG_TMP2, 0, 0, 0);
  
              //form mask
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, sat_imm, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
   
              //top>0 //bottom half
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
  
              //top>0 //top half
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP6, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
  
              //Q Flag bottom half
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP4, LREG_Q_FLAG, 0, LREG_TMP4, 0, 0, 0); //Int Q Flag
  
              //Q Flag top half
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP6, 0, 1, LREG_TMP7, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP7, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP8, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP8, 0, 32, LREG_TMP8, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP8, 0, LREG_TMP4, 0, 0, 0);  //invert mask
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
   
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP6, LREG_TMP3, 0, LREG_TMP6, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP6, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP6, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SSAT16 
            else if(op == 20) { //SBFX //A8-308
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t widthm1 = (insn>>16) & 0x1F;
              uint8_t lsb = ((insn>>28) & 0x7 << 3) | ((insn>>22) & 0x3);
              uint8_t msb = lsb + widthm1;
    
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              //form mask
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (msb+1), LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (8-lsb), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
    
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (31-msb), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, (31-widthm1), LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SBFX 
            else if((op == 22) && (RN != PC_REG)) { //BFI //A8-48
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              //UNPREDICTABLE if msb < lsb
  
              uint8_t msb = (insn>>16) & 0x1F;
              uint8_t lsb = ((insn>>28) & 0x7 << 3) | ((insn>>22) & 0x3);

              //form mask
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (msb+1), LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (8-lsb), LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (msb-lsb+1), LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, lsb, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end BFI 
            else if((op == 22) && (RN == PC_REG)) { //BFC //A8-46
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              //UNPREDICTABLE if msb < lsb
  
              uint8_t msb = (insn>>16) & 0x1F;
              uint8_t lsb = ((insn>>28) & 0x7 << 3) | ((insn>>22) & 0x3);
  
              //form mask
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (msb+1), LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (8-lsb), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end BFC 
            else if(((op == 24) || (op == 26)) && (superscriptA != 0)) { //USAT //A8-504
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t sat_imm   = (insn>>16) & 0x1F;
              uint32_t SHIFT_IMM = ((insn>>28) & 0x7 << 3) | ((insn>>22) & 0x3);
  
              if(b5) {
                if(SHIFT_IMM != 0) 
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 31, LREG_TMP1, 0, 0, 0);
              }
              else {
                if(SHIFT_IMM != 0)
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
              }
  
              //max
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, sat_imm, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
  
              if((SHIFT_IMM == 0) && !b5)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //need to do this to get LREG_ICC info
  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 1, LREG_TMP4, 0, 0, 0);
  
              //val < 0
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_Q_FLAG, 0, LREG_TMP4, 0, 0, 0); //Int Q Flag
  
              //val > max
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end USAT 
            else if((op == 24) && (superscriptA == 0)) { //USAT16 //A8-506
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t sat_imm = (insn>>16) & 0x1F;
  
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP5, 0, 0, 0);
  
              //max
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, sat_imm, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);
  
              //val < 0
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP6, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 1, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, 0, 1, LREG_TMP7, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_Q_FLAG, 0, LREG_TMP4, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
  
              //val > max
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP5, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end USAT16 
            else if(op == 28) { //UBFX //A8-466
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE

              uint8_t widthm1 = (insn>>16) & 0x1F;
              uint8_t lsb = (((insn >> 28) & 0x7) << 2) | ((insn >> 22) & 0x3);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, (63 - widthm1), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, RN, 0, lsb, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end UBFX 
            else //UNDEFINED
              OOPS("WARNING: Instruction in Data-processing (plain binary imm) is UNDEFINED.\n");
          } //end not always
          else { //always
            if((op == 0) && (RN != PC_REG)) { //ADD Wide (12-bit) (imm, Thumb) //A8-20
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              uint32_t IMM12 = (b10 << 11) | (((insn>>28) & 0x7) << 8) | ((insn>>16) & 0xFF);
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, IMM12, RD, 0, 0, 0);
            } //end ADD Wide (12-bit) (imm, Thumb) 
            else if((op == 0) && (RN == PC_REG)) { //ADR //A8-32
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              uint32_t IMM12 = (b10 << 11) | (((insn>>28) & 0x7) << 8) | ((insn>>16) & 0xFF);
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4+IMM12), RD, 0, 0, 0);
            } //end ADR 
            else if(op == 4) { //MOVW wide (16-bit) (imm) //A8-194
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              uint32_t IMM16 = ((insn & 0xF) << 12)| (b10 << 11) | (((insn >> 28) & 0x7) << 8) |((insn >>16) & 0xFF);
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, IMM16, RD, 0, 0, 0); //FIXME: RAT/ROB move?
            } //end MOVW wide (16-bit) (imm) 
            else if((op == 10) && (RN != PC_REG)) { //SUB Wide (12-bit) (imm, Thumb) //A8-418
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              uint32_t IMM12 = (b10 << 11) | (((insn>>28) & 0x7) << 8) | ((insn>>16) & 0xFF);
  
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RN, 0, IMM12, RD, 0, 0, 0);
            } //end SUB Wide (12-bit) (imm, Thumb) 
            else if((op == 10) && (RN == PC_REG)) { //ADR //A8-32
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              uint32_t IMM12 = (b10 << 11) | (((insn>>28) & 0x7) << 8) | ((insn>>16) & 0xFF);
  
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4-IMM12), RD, 0, 0, 0);
            } //end ADR 
            else if(op == 12) { //MOVT Top (16-bit) //A8-200
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              uint32_t IMM16 = ((insn & 0xF) << 12)| (b10 << 11) | (((insn >> 28) & 0x7) << 8) |((insn >>16) & 0xFF);
  
               CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP1, 0, 0, 0);
               CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, 0, (IMM16<<16), RD, 0, 0, 0);
            } //end MOVT Top (16-bit) 
            else if(((op == 16) || (op == 18)) && (superscriptA != 0)) { //SSAT //A8-362
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t sat_imm   = (insn>>16) & 0x1F;
              uint32_t SHIFT_IMM = ((insn>>28) & 0x7 << 3) | ((insn>>22) & 0x3);
  
              if(b5) {
                if(SHIFT_IMM != 0) 
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 31, LREG_TMP1, 0, 0, 0);
              }
              else {
                if(SHIFT_IMM != 0) 
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
              }
  
              if((SHIFT_IMM != 0) || (b5))
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, sat_imm, LREG_TMP2, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, sat_imm, LREG_TMP2, 0, 0, 0);
  
              //form mask
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, sat_imm, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
   
              //top>0
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP4, 0, 0, 0);
  
              if((SHIFT_IMM != 0) || (b5))
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, RN, 0, LREG_TMP1, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP4, LREG_Q_FLAG, 0, LREG_TMP4, 0, 0, 0); //Int Q Flag
  
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  //invert mask
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
   
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP1, 0, RD, 0, 0, 0);
            } //end SSAT 
            else if((op == 18) && (superscriptA == 0)) { //SSAT16 //A8-364
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t sat_imm = (insn>>16) & 0xF;
  
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP5, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, sat_imm, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP5, 0, sat_imm, LREG_TMP2, 0, 0, 0);
  
              //form mask
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, sat_imm, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
   
              //top>0 //bottom half
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
  
              //top>0 //top half
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP6, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
  
              //Q Flag bottom half
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP4, LREG_Q_FLAG, 0, LREG_TMP4, 0, 0, 0); //Int Q Flag
  
              //Q Flag top half
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP6, 0, 1, LREG_TMP7, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP7, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP8, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP8, 0, 32, LREG_TMP8, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP3, LREG_TMP8, 0, LREG_TMP4, 0, 0, 0);  //invert mask
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
   
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP6, LREG_TMP3, 0, LREG_TMP6, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP6, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP6, 0, 1, LREG_TMP6, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP6, LREG_TMP4, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, RD, 0, 0, 0);
            } //end SSAT16 
            else if(op == 20) { //SBFX //A8-308
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t widthm1 = (insn>>16) & 0x1F;
              uint8_t lsb = ((insn>>28) & 0x7 << 3) | ((insn>>22) & 0x3);
              uint8_t msb = lsb + widthm1;
    
              //form mask
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (msb+1), LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (8-lsb), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
    
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (31-msb), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, (31-widthm1), RD, 0, 0, 0);
            } //end SBFX 
            else if((op == 22) && (RN != PC_REG)) { //BFI //A8-48
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              //UNPREDICTABLE if msb < lsb
  
              uint8_t msb = (insn>>16) & 0x1F;
              uint8_t lsb = ((insn>>28) & 0x7 << 3) | ((insn>>22) & 0x3);

              //form mask
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (msb+1), LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (8-lsb), LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (msb-lsb+1), LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, lsb, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP1, 0, RD, 0, 0, 0);
            } //end BFI 
            else if((op == 22) && (RN == PC_REG)) { //BFC //A8-46
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              //UNPREDICTABLE if msb < lsb
  
              uint8_t msb = (insn>>16) & 0x1F;
              uint8_t lsb = ((insn>>28) & 0x7 << 3) | ((insn>>22) & 0x3);
  
              //form mask
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, (msb+1), LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, (8-lsb), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RD, LREG_TMP1, 0, RD, 0, 0, 0);
            } //end BFC 
            else if(((op == 24) || (op == 26)) && (superscriptA != 0)) { //USAT //A8-504
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t sat_imm   = (insn>>16) & 0x1F;
              uint32_t SHIFT_IMM = ((insn>>28) & 0x7 << 3) | ((insn>>22) & 0x3);
  
              if(b5) {
                if(SHIFT_IMM != 0) 
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 31, LREG_TMP1, 0, 0, 0);
              }
              else {
                if(SHIFT_IMM != 0)
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, SHIFT_IMM, LREG_TMP1, 0, 0, 0);
              }
  
              //max
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, sat_imm, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
  
              if((SHIFT_IMM == 0) && !b5)
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //need to do this to get LREG_ICC info
  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 1, LREG_TMP4, 0, 0, 0);
  
              //val < 0
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_Q_FLAG, 0, LREG_TMP4, 0, 0, 0); //Int Q Flag
  
              //val > max
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, LREG_TMP4, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, LREG_TMP3, 0, RD, 0, 0, 0);
            } //end USAT 
            else if((op == 24) && (superscriptA == 0)) { //USAT16 //A8-506
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t sat_imm = (insn>>16) & 0x1F;
  
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP5, 0, 0, 0);
  
              //max
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, 0, 0, 1, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, sat_imm, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);
  
              //val < 0
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP6, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 1, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, 0, 1, LREG_TMP7, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_Q_FLAG, 0, LREG_TMP4, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
  
              //val > max
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP5, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP3, LREG_TMP4, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, RD, 0, 0, 0);
            } //end USAT16 
            else if(op == 28) { //UBFX //A8-466
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t widthm1 = (insn>>16) & 0x1F;
              uint8_t lsb = (((insn >> 28) & 0x7) << 2) | ((insn >> 22) & 0x3);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, (63 - widthm1), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, RN, 0, lsb, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);

            } //end UBFX 
            else //UNDEFINED
              OOPS("WARNING: Instruction in Data-processing (plain binary imm) is UNDEFINED.\n");
          } //end always
      } //end Data-processing (plain binary imm)
      else if(b31) { //Branches and miscellaneous control //A6-20
        uint8_t op  = (insn>>4) & 0x7F;
        uint8_t op1 = (insn>>28) & 0x7;

        if(((op1 == 0) || (op1 == 2)) && !(b9 && b8 && b7)) { //Conditional branch B //A8-44 //ARMv6T2 //Encoding T3
          //NOT permitted in ITBLOCK
          uint32_t BROFF = (b10 << 20) | (b27 << 19) | (b29 << 18) | ((insn & 0x3F) << 12) | ((insn>>16) & 0x7FF) << 1;
          uint8_t  cond  = (insn>>6) & 0xF;

          if(b10)
            BROFF = (0x7FF << 21) | BROFF;

          CrackInst::setup(rinst, iBALU_LBRANCH, lbranchArray[cond], LREG_ICC, 0, static_cast<uint32_t>(PC+4+BROFF), 0, 0, 0, 0);
        } //end Conditional branch B 
        else if(((op1 == 0) || (op1 == 2)) && (op == 56) && (!b25 && !b24)) { //MSR (register) application level
          //Specifying PC_REG == RM has UNPREDICTABLE results
          //Specifying STACKPTR == RM has UNPREDICTABLE results
          uint8_t nzcvqg_mask = (insn>>26) & 0x3;

            switch(nzcvqg_mask) {
              case 0:
                //UNPREDICTABLE
                break;
              case 1: //only ge is modified
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_CPSR, 0, static_cast<uint32_t>(0xFFF0FFFF), LREG_TMP2, 0, 0, 0); //immediate is intended to work as such
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xF0000), LREG_TMP1, 0, 0, 0);
      
                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); //get GE

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_CPSR, 0, LREG_CPSR, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_CPSR, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_GE_FLAG, 0, 0, 0); //get GE
                }
                break;
              case 2: //only nzcvq is modified
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xF8, LREG_TMP5, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_CPSR, 0, static_cast<uint32_t>(0x7FFFFFF), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
      
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 28, LREG_TMP3, 0, 0, 0); //get LREG_ICC
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 27, LREG_TMP4, 0, 0, 0); //get Q

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
      
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                  CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP3, 0, LREG_ICC, 1, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_CPSR, 0, LREG_CPSR, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                  CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP3, 0, 0, LREG_ICC, 1, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_CPSR, 0, 0, 0);
                }
                break;
              case 3: //both nzcvq and g are modified
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xF80F, LREG_TMP5, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP5, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_CPSR, 0, static_cast<uint32_t>(0x7F0FFFF), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
      
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 28, LREG_TMP3, 0, 0, 0); //get LREG_ICC
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 27, LREG_TMP4, 0, 0, 0); //get Q
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP5, 0, 0, 0); //get GE

                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 15, LREG_TMP5, 0, 0, 0);
      
                  CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
      
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
      
                  CrackInst::setup(rinst, iAALU, negCmoveArray[cond], LREG_ICC, LREG_TMP3, 0, LREG_ICC, 1, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_CPSR, 0, LREG_CPSR, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 15, LREG_GE_FLAG, 0, 0, 0);
      
                  CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP3, 0, 0, LREG_ICC, 1, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_CPSR, 0, 0, 0);
                }
                break;
            }
        } //end MSR (register) application level
        else if(((op1 == 0) || (op1 == 2)) && ((op == 57) || ((op == 56) && ((!b25 && b24) || b25)))) { //MSR (register) system level
          OOPS("WARNING: Move to Special Register (MSR register), system level is NOT IMPLEMENTED.\n");
        }
        else if(((op1 == 0) || (op1 == 2)) && (op == 58)) { //Change Processor State, Hints //A6-21
          uint8_t op1 = (insn>>24) & 0x7;
          uint8_t op2 = (insn>>16) & 0xFF;
 
          if(op1 != 0) { //Change Processor State CPS //B6-3 //ARMv6T2
            OOPS("WARNING: Change Processor State (CPS) is NOT IMPLEMENTED.\n");
          }
          else if(op2 == 0) { //No Operation hint NOP //A8-222 //ARMv6T2
            //OOPS("WARNING: No Operation hint (NOP) is NOT IMPLEMENTED.\n");
            //Does nothing;
          }
          else if(op2 == 1) { //Yield hint YIELD //A8-812 //ARMv7
            OOPS("WARNING: Yield hint (YIELD) is NOT IMPLEMENTED.\n");
          }
          else if(op2 == 2) { //Wait For Event hint WFE //A8-808 //ARMv7
            OOPS("WARNING: Wait For Event hint (WFE) is NOT IMPLEMENTED.\n");
          }
          else if(op2 == 4) { //Wait For Interrupt hint WFI //A8-810 //ARMv7
            OOPS("WARNING: Wait For Interrupt hint (WFI) is NOT IMPLEMENTED.\n");
          }
          else if(op2 == 5) { //Send Event hint SEV //A8-316 //ARMv7
            OOPS("WARNING: Send Event hint (SEV) is NOT IMPLEMENTED.\n");
          }
          else if(b23 && b22 && b21 && b20) { //Debug hint DBG //A8-88 //ARMv7
            OOPS("WARNING: Debug hint (YIELD) is NOT IMPLEMENTED.\n");
          }
        }
        else if(((op1 == 0) || (op1 == 2)) && (op == 59)) { //Miscellaneous Control Instructions //A6-21
          uint8_t op = (insn>>20) & 0xF;

          if(op == 0) { //Leave ThumbEE state LEAVEX //A9-7 //ThumbEE
            OOPS("WARNING: Leave ThumbEE state (LEAVEX) is NOT IMPLEMENTED.\n");
          }
          else if(op == 1) { //Enter ThumbEE state ENTERX //A9-7 //ThumbEE
            OOPS("WARNING: Enter ThumbEE state (ENTERX) is NOT IMPLEMENTED.\n");
          }
          else if(op == 2) { //Clear Exclusive CLREX //A8-70 //ARMv7
            CrackInst::setup(rinst, iAALU, OP_U64_CLR_ADDR, 0, 0, 0, 0, 0, 0, 0); //NOTE: CLR_ADDR with 0 == clear everything
          }
          else if(op == 4) { //Data Synchronization Barrier DSB //A8-92 //ARMv7
            CrackInst::setup(rinst, iRALU, OP_iRALU_move, 0, 0, 0, 0, 0, 0, 0); 
          }
          else if(op == 5) { //Data Memory Barrier DMB //A8-90 //ARMv7
            CrackInst::setup(rinst, iRALU, OP_iRALU_move, 0, 0, 0, 0, 0, 0, 0); 
          }
          else if(op == 6) { //Instruction Synchronization Barrier ISB //A8-102 //ARMv7
            CrackInst::setup(rinst, iRALU, OP_iRALU_move, 0, 0, 0, 0, 0, 0, 0); 
          }
          else
            OOPS("WARNING: Instruction in Miscellaenous Control Instructions is UNDEFINED.\n");
        }
        else if(((op1 == 0) || (op1 == 2)) && (op == 60)) { //Branch and Exchange Jazelle BXJ //A8-64
          OOPS("WARNING: Branch and Exchange Jazelle (BXJ) is NOT IMPLEMENTED.\n");
        }
        else if(((op1 == 0) || (op1 == 2)) && (op == 61)) { //Exception Return SUBS PC, LR and related instructions //B6-25
          OOPS("WARNING: Exception Return (SUBS PC, LR) is UNPREDICTABLE.\n");
          //copying SPSR->LREG_CPSR is UNPREDICTABLE in USER or SYSTEM mode.
          //If NOT(LAST_IN_IT_BLOCK), UNPREDICTABLE
          uint32_t IMM8 = (insn>>16) & 0xFF;
          
          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LINK, 0, IMM8, LREG_TMP1, 0, 0, 0);
            
            if(cond != AL) {
              //CrackInst::setup(rinst, iAALU, OP_U32_ADD, SPSR, 0, 0, LREG_TMP2, 0, 0, 0); 
              //CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              //CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, 0, 0, LREG_CPSR, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iBALU_LBRANCH, lbranchArray[cond], LREG_TMP1, 0, 0, 0, 0, 0, 0);
            }
            else {
              //CrackInst::setup(rinst, iAALU, OP_U32_ADD, SPSR, 0, 0, LREG_CPSR, 0, 0, 0); //FIXME: RAT/ROB move? //copy SPSR->LREG_CPSR
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
              CrackInst::setup(rinst, iBALU_LJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);
            }
        } //end Exception Return SUBS PC, LR and related instructions
        else if(((op1 == 0) || (op1 == 2)) && (op == 62)) { //MRS application level //A8-206 //ARMv6T2

            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_ICC, 1, 15, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 28, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_Q_FLAG, 0, 1, LREG_TMP2, 0, 0, 0); //Int Q Flag
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 27, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_GE_FLAG, 0, 15, LREG_TMP2, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);

            if(cond != AL) {
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else 
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);

        } //end MRS application level //A8-206
        else if(((op1 == 0) || (op1 == 2)) && (op == 63)) { //MRS system level //B6-10 //ARMv6T2
          OOPS("WARNING: Move From Special Register (MRS), system level is NOT IMPLEMENTED.\n");
        }
        else if((op1 == 0) && (op == 127)) { //SMC //B6-18 //Security Extensions
          OOPS("WARNING: Secure Monitor Call (SMC [previously SMI]) is NOT IMPLEMENTED.\n");
        }
        else if((op1 == 2) && (op == 127)) { //Permanently UNDEFINED
          OOPS("WARNING: Instruction is PERMANENTLY UNDEFINED.\n");
        }
        else if((op1 == 1) || (op1 == 3)) { //Branch B //A8-44 //ARMv6T2 Encoding T4
          uint32_t BROFF = (b10 << 24) | (!(b10 ^ b29) << 23) | (!(b10 ^ b27) << 22) | ((insn & 0x3FF) << 12) | 
            ((insn>>16) & 0x7FF) << 1;
          int32_t temp = BROFF;
          temp  = ((temp << 7) >> 7);
          BROFF = uint32_t(temp);

            if(cond != AL) { //not always
              CrackInst::setup(rinst, iBALU_LBRANCH, lbranchArray[cond], LREG_ICC, 0, static_cast<uint32_t>(PC+4+BROFF), 0, 0, 0, 0);
            } //end not always
            else { //always
              CrackInst::setup(rinst, iBALU_LJUMP, OP_U64_JMP_IMM, 0, 0, static_cast<uint32_t>(PC+4+BROFF), 0, 0, 0, 0);
            } //end always

        } //end Branch B 
        else if((op1 == 4) || (op1 == 6)) { //Branch and Link with Exchange BLX (imm) //A8-58 //Encoding T2
          uint32_t BROFF = (b10 << 24) | (!(b29 ^ b10) << 23) | (!(b27 ^ b10) << 22) | 
                           ((insn & 0x3FF) << 12) | (((insn>>17) & 0x3FF) << 2);
          //printf("branch and link \n");
          int32_t temp = BROFF;
          temp  = ((temp << 7) >> 7);
          BROFF = uint32_t(temp);

            if(cond != AL) { //not always
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(((PC+4)) | 1), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LINK, 0, LINK, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, ARM, LREG_TMP1, 0, 0, 0); //Always changes to ARM
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_TTYPE, 0, LREG_TTYPE, 0, 0, 0);
              CrackInst::setup(rinst, iBALU_LJUMP, OP_U64_JMP_IMM, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4+BROFF), 0, 0, 0, 0);
            } //end not always
            else { //always
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(((PC+4)) | 1), LINK, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, ARM, LREG_TTYPE, 0, 0, 0); //Always changes to ARM
              CrackInst::setup(rinst, iBALU_LCALL, OP_U64_JMP_IMM, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4+BROFF), 0, 0, 0, 0);
            } //end always
        } //end Branch B 
        else if((op1 == 5) || (op1 == 7)) { //Branch and Link BL (imm) //A8-58 //Encoding T1
          uint32_t BROFF = (b10 << 24) | (!(b29 ^ b10) << 23) | (!(b27 ^ b10) << 22) | 
                           ((insn & 0x3FF) << 12) | (((insn>>16) & 0x7FF) << 1);

          int32_t temp = BROFF;
          temp  = ((temp << 7) >> 7);
          BROFF = uint32_t(temp);

            if(cond != AL) { //not always
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>((PC+4) | 1), LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LINK, 0, LINK, 0, 0, 0);

              CrackInst::setup(rinst, iBALU_LBRANCH, lbranchArray[cond], 0, 0, static_cast<uint32_t>(PC+4+BROFF), 0, 0, 0, 0);
            } //end not always
            else { //always
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>((PC+4) | 1), LINK, 0, 0, 0);
              CrackInst::setup(rinst, iBALU_LCALL, OP_U64_JMP_IMM, 0, 0, static_cast<uint32_t>(PC+4+BROFF), 0, 0, 0, 0);
            } //end always
        } //end Branch and Link BL (imm) 
        else
          OOPS("WARNING: Instruction in Branch and miscellaneous control space is UNDEFINED.\n");
       
      } //end Branches and miscellaneous control
      break;
    case 3:
      if(!b10 && !b9 && !b8 && !b4) { //Store single data item //A6-30
        uint8_t op1 = (insn>>5) & 0x7;
        uint8_t op2 = (insn>>22) & 0x3F;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          if(op1 == 4) {  //STRB (imm, Thumb) //A8-388 //Encoding T3
            //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
            if(RN == PC_REG) {//UNDEFINED
              OOPS("WARNING: Store Register Byte [STRB (imm, Thumb)] is UNDEFINED with RN == 0b1111.\n");
              return;
            }

            uint32_t IMM12 = (insn>>16) & 0xFFF;

            CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, IMM12, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, RT, 0, 0, 0, 0, 0);
          } //end STRB (imm, Thumb) 
          else if((op1 == 0) && ((b27 && b24) || (b27 && b26 && !b25 && !b24))) { //STRB (imm, Thumb //A8-388 //Encoding T4
            //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
            //If W && (RT == RN), UNPREDICTABLE
            uint8_t P = b26;
            uint8_t U = b25;
            uint8_t W = b24;

            uint32_t IMM8 = (insn>>16) & 0xFF;

            if((RN == PC_REG) || (!P && !W)) {//UNDEFINED
              OOPS("WARNING: Store Register Byte [STRB (imm, Thumb)] is UNDEFINED with RN == 0b1111.\n");
              return;
            }

            if(P) {
              if(U)
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0);
            }

            CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, RT, 0, 0, 0, 0, 0);

            if(W) {
              if(P)
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
              else {
                if(U)
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, IMM8, RN, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_SUB, RN, 0, IMM8, RN, 0, 0, 0);
              }
            }
          } //STRB (imm, THumb 
          else if((op1 == 0) && (b27 && b26 && b25 && !b24)) { //STRBT //A8-394
            OOPS("WARNING: Store Register Byte Unprivileged (STRBT) is NOT IMPLEMENTED.\n");
          } //end STRBT 
          else if((op1 == 0) && (op2 == 0)) { //STRB (register) //A8-392
            //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if(RN == PC_REG) {//UNDEFINED
              OOPS("WARNING: Store Register Byte [STRB (register)] is UNDEFINED with RN == 0b1111.\n");
              return;
            }

            uint32_t IMM2 = (insn>>20) & 0x3;

            if(IMM2 == 0) {
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, RT, 0, 0, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, IMM2, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, RT, 0, 0, 0, 0, 0);
            }
          } //end STRB (register) 
          else if(op1 == 5) { //STRH (imm, Thumb) //A8-408 //Encoding T3
            //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
            if(RN == PC_REG) {//UNDEFINED
              OOPS("WARNING: Store Register Byte [STRB (imm, Thumb)] is UNDEFINED with RN == 0b1111.\n");
              return;
            }

            uint32_t IMM12 = (insn>>16) & 0xFFF;

            CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, IMM12, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, RT, 0, 0, 0, 0, 0);
          } //end STRH (imm, Thumb) 
          else if((op1 == 1) && ((b27 && b24) || (b27 && b26 && !b25 && !b24))) { //STRH (imm, Thumb) //A8-408 //Encoding T4
            //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
            //If W && (RT == RN), UNPREDICTABLE
            uint8_t P = b26;
            uint8_t U = b25;
            uint8_t W = b24;

            uint32_t IMM8 = (insn>>16) & 0xFF;

            if((RN == PC_REG) || (!P && !W)) {//UNDEFINED
              OOPS("WARNING: Store Register Byte [STRB (imm, Thumb)] is UNDEFINED with RN == 0b1111.\n");
              return;
            }

            if(P) {
              if(U)
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0);
            }

            CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, RT, 0, 0, 0, 0, 0);

            if(W) {
              if(P)
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
              else {
                if(U)
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, IMM8, RN, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_SUB, RN, 0, IMM8, RN, 0, 0, 0);
              }
            }
          } //end STRH (imm, Thumb) 
          else if((op1 == 1) && (b27 && b26 && b25 && !b24)) { //STRHT //A8-414
            OOPS("WARNING: Store Register Halfword Unprivileged (STRHT) is NOT IMPLEMENTED.\n");
          } //end STRHT 
          else if((op1 == 1) && (op2 == 0)) { //STRH (register) //A8-412
            //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if(RN == PC_REG) {//UNDEFINED
              OOPS("WARNING: Store Register Byte [STRB (register)] is UNDEFINED with RN == 0b1111.\n");
              return;
            }

            uint32_t IMM2 = (insn>>20) & 0x3;

            if(IMM2 == 0) {
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, RT, 0, 0, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, IMM2, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, RT, 0, 0, 0, 0, 0);
            }
          } //end STRH (register)
          else if(op1 == 6) { //STR (imm, Thumb) //A8-382 //Encoding T3
            //If RT == PC_REG, UNPREDICTABLE
            if(RN == PC_REG) {//UNDEFINED
              OOPS("WARNING: Store Register Byte [STRB (imm, Thumb)] is UNDEFINED with RN == 0b1111.\n");
              return;
            }

            uint32_t IMM12 = (insn>>16) & 0xFFF;

            CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, IMM12, LREG_TMP1, 0, 0, 0);
            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, RT, 0, 0, 0, 0, 0);
          } //end STR (imm, Thumb)
          else if((op1 == 2) && ((b27 && b24) || (b27 && b26 && !b25 && !b24))) { //STR (imm, Thumb) //A8-382 //Encoding T4
            //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
            //If W && (RT == RN), UNPREDICTABLE
            uint8_t P = b26;
            uint8_t U = b25;
            uint8_t W = b24;

            uint32_t IMM8 = (insn>>16) & 0xFF;

            if((RN == PC_REG) || (!P && !W)) {//UNDEFINED
              OOPS("WARNING: Store Register Byte [STRB (imm, Thumb)] is UNDEFINED with RN == 0b1111.\n");
              return;
            }

            if(P) {
              if(U)
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0);
            }

            CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, RT, 0, 0, 0, 0, 0);

            if(W) {
              if(P)
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
              else {
                if(U)
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, IMM8, RN, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_SUB, RN, 0, IMM8, RN, 0, 0, 0);
              }
            }
          } //end STR (imm, Thumb)
          else if((op1 == 2) && (b27 && b26 && b25 && !b24)) { //STRT //A8-416
            OOPS("WARNING: Store Register Unprivileged (STRT) is NOT IMPLEMENTED.\n");
          }
          else if((op1 == 2) && (op2 == 0)) { //STR (register) //A8-386
            //If RT == PC_REG, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE

            if(RN == PC_REG) {//UNDEFINED
              OOPS("WARNING: Store Register Byte [STRB (register)] is UNDEFINED with RN == 0b1111.\n");
              return;
            }

            uint32_t IMM2 = (insn>>20) & 0x3;

            if(IMM2 == 0) {
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, RT, 0, 0, 0, 0, 0);
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, IMM2, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, RT, 0, 0, 0, 0, 0);
            }
          } //end STR (register)
      } //end Store single data item
      else if(!b10 && !b9 && b8 && !b4) { //Advanced SIMD element or structure load/store instructions //A7-27
        uint8_t B = (insn>>24) & 0xF;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          if(!b5) { //Stores
            uint8_t size = 0xFF; //force initialization;
            uint8_t type;
            uint8_t index = 0xFF; //force initializaiton
            uint8_t index_align;
            uint8_t writeback;
            uint8_t reg_index;
            uint8_t inc = 0xFF; //force initialization
            uint8_t regs = 0xFF; //force initialization;
            uint8_t i, j, k = 0xFF; //force initialization

            uint8_t VD2, VD3, VD4;

            if(!b7) {
              if((B == 2) || ((B==6) || (B==7)) || (B==10)) { //VST1 (mulitple single elements) //A8-768
                //If RN == PC_REG, UNPREDICTABLE
                size = (insn>>22) & 0x3;
                type = (insn>>24) & 0xF;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;
                  
                switch(type) {
                  case 2:
                    regs = 4;
                    break;
                  case 6:
                    regs = 3;
                    break;
                  case 7:
                    regs = 1;
                    break;
                  case 10:
                    regs = 2;
                    break;
                }

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                switch(size) {
                  case 0: //8-bits
                    for(i = 0; i < regs; i++) {
                      for(j = 0; j < 8; j++) {
                        k = i;

                        if(!j) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 8*j, LREG_TMP2, 0, 0, 0);  

                          if(i != 7)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                          if(++k < regs)
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        }
                      }
                    }
                    break;
                  case 1: //16-bits
                    for(i = 0; i < regs; i++) {
                      for(j = 0; j < 4; j++) {
                        k = i;

                        if(!j) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 16*j, LREG_TMP2, 0, 0, 0);  

                          if(i != 3)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                          if(++k < regs)
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        }
                      }
                    }
                    break;
                  case 2: //32-bits
                    bool first_use = true;

                    for(i = 0; i < regs; i++) {
                      for(j = 0; j < 2; j++) {
                        k = i;
                        if(!j) {
                          if(first_use) {
                            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            first_use = false;
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                          if(++k < regs)
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        }
                      }
                    }
                    break;
                }

                if(writeback) {
                  if(reg_index)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (8*regs), RN, 0, 0, 0);  
                }
              } //end VST1 (mulitple single elements)
              else if((B == 3) || ((B==8) || (B==9))) { //VST2 (mulitple 2-element structures) //A8-772
                //If RN == PC_REG, UNPREDICTABLE
                size = (insn>>22) & 0x3;
                type = (insn>>24) & 0xF;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;
                  
                switch(type) {
                  case 3:
                    regs = 2;
                    inc = 2;
                    break;
                  case 8:
                    regs = 1;
                    inc = 1;
                    break;
                  case 9:
                    regs = 1;
                    inc = 2;
                    break;
                  default:
                    I(0); // This should not happen
                    regs = 1;
                    inc = 2;
                }

                VD2 = VD + inc;
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                switch(size) {
                  case 0: //8-bits
                    for(i = 0; i < regs; i++) {
                      for(j = 0; j < 8; j++) {
                        k = i;

                        if(!j) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 8*j, LREG_TMP2, 0, 0, 0);  

                          if(i != 7)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iSALU_ADDR, OP_S64_SRL, VD2+i, 0, 8*j, LREG_TMP2, 0, 0, 0);  

                          if(i != 7)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                          if(++k < regs)
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        }
                      }
                    }
                    break;
                  case 1: //16-bits
                    for(i = 0; i < regs; i++) {
                      for(j = 0; j < 4; j++) {
                        k = i;

                        if(!j) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 16*j, LREG_TMP2, 0, 0, 0);  
                          
                          if(i != 3)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 16*j, LREG_TMP2, 0, 0, 0);  

                          if(i != 3)
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                          if(++k < regs)
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        }
                      }
                    }
                    break;
                  case 2: //32-bits
                    bool first_use = true;

                    for(i = 0; i < regs; i++) {
                      for(j = 0; j < 2; j++) {
                        k = i;
                        if(!j) {
                          if(first_use) {
                            CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                            first_use = false;
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                          if(++k < regs)
                            CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        }
                      }
                    }
                    break;
                }

                if(writeback) {
                  if(reg_index)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, (16*regs), RN, 0, 0, 0);  
                }
              } //end VST2 (mulitple 2-element structures)
              else if((B==4) || (B==5)) { //VST3 (mulitple 3-element structures) //A8-776
                //If RN == PC_REG, UNPREDICTABLE
                size = (insn>>22) & 0x3;
                type = (insn>>24) & 0xF;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;
                  
                switch(type) {
                  case 4:
                    inc = 1;
                    break;
                  case 5:
                    inc = 2;
                    break;
                }

                VD2 = VD + inc;
                VD3 = VD2 + inc;

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                switch(size) {
                  case 0: //8-bits
                    for(i = 0; i < 8; i++) {
                      j = i;

                      if(!i) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 8*j, LREG_TMP2, 0, 0, 0);  

                        if(i != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                        if(i != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                        if(i != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                        if(++k < 8)
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      }
                    }
                    break;
                  case 1: //16-bits
                    for(i = 0; i < 4; i++) {
                      j = i;
                      if(!i) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  
                        
                        if(i != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  

                        if(i != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  

                        if(i != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                        if(++j < 4) {
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        }
                      }
                    }
                    break;
                  case 2: //32-bits
                    bool first_use = true;

                    for(i = 0; i < 2; i++) {
                      if(!i) {
                        if(first_use) {
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          first_use = false;
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                      }
                    }
                    break;
                }

                if(writeback) {
                  if(reg_index)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 24, RN, 0, 0, 0);  
                }
              } //end VST3 (mulitple 3-element structures)
              else if((B==0) || (B==1)) { //VST4 (mulitple 4-element structures) //A8-780
                //If RN == PC_REG, UNPREDICTABLE
                size = (insn>>22) & 0x3;
                type = (insn>>24) & 0xF;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;
                  
                switch(type) {
                  case 4:
                    inc = 1;
                    break;
                  case 5:
                    inc = 2;
                    break;
                }

                VD2 = VD + inc;
                VD3 = VD2 + inc;
                VD4 = VD3 + inc;

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                switch(size) {
                  case 0: //8-bits
                    for(i = 0; i < 8; i++) {
                      j = i;

                      if(!i) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4+i, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                        if(i != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                        if(i != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                        if(i != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD4+i, 0, 8*i, LREG_TMP2, 0, 0, 0);  

                        if(i != 7)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                        if(++k < 8) // FIXME3: This k value is used without initialization????
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      }
                    }
                    break;
                  case 1: //16-bits
                    for(i = 0; i < 4; i++) {
                      j = i;
                      if(!i) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4+i, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  
                        
                        if(i != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  

                        if(i != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  

                        if(i != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD4+i, 0, 16*i, LREG_TMP2, 0, 0, 0);  

                        if(i != 3)
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  

                        if(++j < 4) {
                          CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                        }
                      }
                    }
                    break;
                  case 2: //32-bits
                    //bool first_use = true;
                    for(i = 0; i < 2; i++) {
                      if(!i) {
                        if(!i) {
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          //first_use = false;
                        }

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4+i, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ADDR, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD4+i, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);  
                      }
                    }
                    break;
                }

                if(writeback) {
                  if(reg_index)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 32, RN, 0, 0, 0);  
                }
              } //end VST4 (mulitple 4-element structures)
            }
            else {
              if((B==0) || (B==4)) { //VST1 (single element from 1 lane) //A8-770
                //If RN == PC_REG, UNPREDICTABLE
                size = (insn>>26) & 0x3;
                index_align = (insn>>20) & 0xF;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                switch(size) {
                  case 0: //8-bits
                    index = (index_align>>1) & 0x7;

                    if(index == 0)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 8*index, LREG_TMP2, 0, 0, 0);
                      if(index != 3)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, RN, 0, 0, 0);
                    }
                    break;
                  case 1: //16-bits
                    index = (index_align>>2) & 0x3;

                    if(index == 0)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16*index, LREG_TMP2, 0, 0, 0);
                      if(index != 3)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, RN, 0, 0, 0);
                    }
                    break;
                  case 2: //32-bits
                    index = (index_align>>3) & 0x1;

                    if(!index) {
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                    }
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);
                    }
                    break;
                }
              } //end VST1 (single element from 1 lane)
              else if((B==1) || (B==5) || (B==9)) { //VST2 (single 2-element structure from 1 lane) //A8-774
                //If RN == PC_REG, UNPREDICTABLE
                size = (insn>>26) & 0x3;
                index_align = (insn>>20) & 0xF;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                switch(size) {
                  case 0: //8-bits
                    index = (index_align>>1) & 0x7;

                    if(index == 0) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 8*index, LREG_TMP2, 0, 0, 0);

                      if(index != 7)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 8*index, LREG_TMP2, 0, 0, 0);

                      if(index != 7)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, RN, 0, 0, 0);
                    }
                    break;
                  case 1: //16-bits
                    index = (index_align>>2) & 0x3;
                    i = (index_align>>1) & 0x1;

                    if(!i)
                      inc = 1;
                    else
                      inc = 2;

                    VD2 = VD + inc;

                    if(index == 0) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16*index, LREG_TMP2, 0, 0, 0);

                      if(index != 3)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2, 0, 16*index, LREG_TMP2, 0, 0, 0);

                      if(index != 3)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);
                    }
                    break;
                  case 2: //32-bits
                    index = (index_align>>3) & 0x1;
                    i = (index_align>>2) & 0x1;

                    if(!i)
                      inc = 1;
                    else
                      inc = 2;

                    VD2 = VD + inc;

                    if(!index) {
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8, RN, 0, 0, 0);
                    }
                    break;
                }
              } //end VST2 (single 2-element structure from 1 lane)
              else if((B==2) || (B==6) || (B==10)) { //VST3 (single 3-element structure from 1 lane) //A8-778
                //If RN == PC_REG, UNPREDICTABLE
                size = (insn>>26) & 0x3;
                index_align = (insn>>20) & 0xF;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                switch(size) {
                  case 0: //8-bits
                    index = (index_align>>1) & 0x7;

                    VD3 = VD1 + 1;

                    if(index == 0) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 8*index, LREG_TMP2, 0, 0, 0);

                      if(index != 7)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 8*index, LREG_TMP2, 0, 0, 0);

                      if(index != 7)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3, 0, 8*index, LREG_TMP2, 0, 0, 0);

                      if(index != 7)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 3, RN, 0, 0, 0);
                    }
                    break;
                  case 1: //16-bits
                    index = (index_align>>2) & 0x3;
                    i = (index_align>>1) & 0x1;

                    if(!i)
                      inc = 1;
                    else
                      inc = 2;

                    VD2 = VD + inc;
                    VD3 = VD2 + inc;

                    if(index == 0) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16*index, LREG_TMP2, 0, 0, 0);

                      if(index != 3)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2, 0, 16*index, LREG_TMP2, 0, 0, 0);

                      if(index != 3)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3, 0, 16*index, LREG_TMP2, 0, 0, 0);

                      if(index != 3)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 6, RN, 0, 0, 0);
                    }
                    break;
                  case 2: //32-bits
                    index = (index_align>>3) & 0x1;
                    i = (index_align>>2) & 0x1;

                    if(!i)
                      inc = 1;
                    else
                      inc = 2;

                    VD2 = VD + inc;
                    VD3 = VD2 + inc;

                    if(!index) {
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 12, RN, 0, 0, 0);
                    }
                    break;
                }
              } //end VST3 (single 3-element structure from 1 lane)
              else if((B==3) || (B==7) || (B==11)) { //VST4 (single 4-element structure from 1 lane) //A8-782
                //If RN == PC_REG, UNPREDICTABLE
                size = (insn>>26) & 0x3;
                index_align = (insn>>20) & 0xF;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, RN, 0, 0, LREG_TMP1, 0, 0, 0); //store addr

                switch(size) {
                  case 0: //8-bits
                    index = (index_align>>1) & 0x7;

                    VD3 = VD1 + 1;
                    VD4 = VD3 + 1;

                    if(index == 0) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 8*index, LREG_TMP2, 0, 0, 0);

                      if(index != 7)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 8*index, LREG_TMP2, 0, 0, 0);

                      if(index != 7)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3, 0, 8*index, LREG_TMP2, 0, 0, 0);

                      if(index != 7)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD4, 0, 8*index, LREG_TMP2, 0, 0, 0);

                      if(index != 7)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U08_ST, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);
                    }
                    break;
                  case 1: //16-bits
                    index = (index_align>>2) & 0x3;
                    i = (index_align>>1) & 0x1;

                    if(!i)
                      inc = 1;
                    else
                      inc = 2;

                    VD2 = VD + inc;
                    VD3 = VD2 + inc;
                    VD4 = VD3 + inc;

                    if(index == 0) {
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16*index, LREG_TMP2, 0, 0, 0);

                      if(index != 3)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2, 0, 16*index, LREG_TMP2, 0, 0, 0);

                      if(index != 3)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3, 0, 16*index, LREG_TMP2, 0, 0, 0);

                      if(index != 3)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD4, 0, 16*index, LREG_TMP2, 0, 0, 0);

                      if(index != 3)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ST, OP_U16_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8, RN, 0, 0, 0);
                    }
                    break;
                  case 2: //32-bits
                    index = (index_align>>3) & 0x1;
                    i = (index_align>>2) & 0x1;

                    if(!i)
                      inc = 1;
                    else
                      inc = 2;

                    VD2 = VD + inc;
                    VD3 = VD2 + inc;
                    VD4 = VD3 + inc;

                    if(!index) {
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD3, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0); //store addr
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD4, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 16, RN, 0, 0, 0);
                    }
                    break;
                }
              } //end VST4 (single 4-element structure from 1 lane)
            }
          }
          else { //Loads
            if(!b7) {
              if((B == 2) || ((B==6) || (B==7)) || (B==10)) { //VLD1 (mulitple single elements) //A8-768
                //If RN == PC_REG, UNPREDICTABLE
                uint8_t size = (insn>>22) & 0x3;
                uint8_t type = (insn>>24) & 0xf;
                uint8_t writeback;
                uint8_t reg_index;
                uint8_t regs= 0xFF; //force initialization
                uint8_t i, j;
                bool first_use = true;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;
                  
                switch(type) {
                  case 2:
                    regs = 4;
                    break;
                  case 6:
                    regs = 3;
                    break;
                  case 7:
                    regs = 1;
                    break;
                  case 10:
                    regs = 2;
                    break;
                }

                switch(size) {
                  case 0: //8-bits
                    for(i = 0; i < regs; i++) {
                      j = i;

                      if(first_use) { 
                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP1, 0, 0, 0);  
                        first_use = false;
                      }
                      else {
                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD+i, 0, 0, 0);  

                      if(++j < regs)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                    }
                    break;
                  case 1: //16-bits
                    for(i = 0; i < regs; i++) {
                      j = i;

                      if(first_use) { 
                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP1, 0, 0, 0);  
                        first_use = false;
                      }
                      else {
                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD+i, 0, 0, 0);  

                      if(++j < regs)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  
                    }
                    break;
                  case 2: //32-bits
                    for(i = 0; i < regs; i++) {
                      j = i;

                      if(first_use) { 
                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP1, 0, 0, 0);  
                        first_use = false;
                      }
                      else {
                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD+i, 0, 0, 0);  

                      if(++j < regs)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);  
                    }
                    break;
                }

                if(writeback) {
                  if(reg_index)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8*regs, RN, 0, 0, 0);  
                }
              }
              else if((B == 3) || ((B==8) || (B==9))) { //VLD2 (mulitple 2-element structures) //A8-772
                //If RN == PC_REG, UNPREDICTABLE
                uint8_t size = (insn>>22) & 0x3;
                uint8_t type = (insn>>24) & 0xf;
                uint8_t writeback;
                uint8_t reg_index;
                uint8_t regs, inc;
                uint8_t i, j;
                bool first_use = true;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;
                  
                switch(type) {
                  case 3:
                    regs = 2;
                    inc = 2;
                    break;
                  case 8:
                    regs = 1;
                    inc = 1;
                    break;
                  case 9:
                    regs = 1;
                    inc = 2;
                    break;
                  default:
                    I(0); // This option should never be taken
                    regs = 1;
                    inc = 2;
                    break;
                }

                uint8_t VD2 = VD + inc;

                switch(size) {
                  case 0: //8-bits
                    for(i = 0; i < regs; i++) {
                      j = i;

                      if(first_use) {
                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP1, 0, 0, 0);  
                        first_use = false;
                      }
                      else {
                        CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 24, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 24, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 40, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 40, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 56, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, VD+i, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD2+i, 0, 0, 0);  

                      if(++j < regs)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                    }
                    break;
                  case 1: //16-bits
                    for(i = 0; i < regs; i++) {
                      j = i;

                      if(first_use) {
                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP1, 0, 0, 0);  
                        first_use = false;
                      }
                      else {
                        CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, VD+i, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD2+i, 0, 0, 0);  

                      if(++j < regs)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0);  
                    }
                    break;
                  case 2: //32-bits
                    for(i = 0; i < regs; i++) {
                      j = i;

                      if(first_use) {
                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP1, 0, 0, 0);  
                        first_use = false;
                      }
                      else {
                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);  
                      }

                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, VD+i, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD+i, 0, 0, 0);  

                      if(++j < regs)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);  
                    }
                    break;
                }

                if(writeback) {
                  if(reg_index)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 16*regs, RN, 0, 0, 0);  
                }
              }
              else if((B==4) || (B==5)) { //VLD3 (mulitple 3-element structures) //A8-776
                //If RN == PC_REG, UNPREDICTABLE
                uint8_t size = (insn>>22) & 0x3;
                uint8_t type = (insn>>24) & 0xf;
                uint8_t writeback;
                uint8_t reg_index;
                uint8_t inc;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;
                  
                switch(type) {
                  case 4:
                    inc = 1;
                    break;
                  case 5:
                    inc = 2;
                    break;
                }

                uint8_t VD2 = VD + inc;
                uint8_t VD3 = VD2 + inc;

                switch(size) {
                  case 0: //8-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 40, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 40, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 40, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 56, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 56, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  
                    break;
                  case 1: //16-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 48, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  
                    break;
                  case 2: //32-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 4, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 4, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 4, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 4, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  
                    break;
                }

                if(writeback) {
                  if(reg_index)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 24, RN, 0, 0, 0);  
                }
              } //end VLD3 (mulitple 3-element structures)
              else if((B==0) || (B==1)) { //VLD4 (mulitple 4-element structures) //A8-780
                //If RN == PC_REG, UNPREDICTABLE
                uint8_t size = (insn>>22) & 0x3;
                uint8_t type = (insn>>24) & 0xf;
                uint8_t writeback;
                uint8_t reg_index;
                uint8_t inc;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;
                  
                if (type == 0) {
                  inc = 1;
                } else {
                  inc = 2;
                }

                uint8_t VD2 = VD + inc;
                uint8_t VD3 = VD2 + inc;
                uint8_t VD4 = VD3 + inc;

                switch(size) {
                  case 0: //8-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 40, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 40, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 40, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 40, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, VD, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, VD2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, VD4, 0, 0, 0);  
                    break;
                  case 1: //16-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                    
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                    
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, VD, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, VD2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                    
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, VD4, 0, 0, 0);  
                    break;
                  case 2: //32-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, VD4, 0, 0, 0);  
                    break;
                }

                if(writeback) {
                  if(reg_index)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 32, RN, 0, 0, 0);  
                }
              } //end VLD4 (mulitple 4-element structures)
            }
            else {
              if((B==0) || (B==4) || (B==8)) { //VLD1 (single element to 1 lane) //A8-770
                //If RN == PC_REG, UNPREDICTABLE
                uint8_t size = (insn>>26) & 0x3;
                uint8_t index_align = (insn>>20) & 0xf;
                uint8_t writeback;
                uint8_t reg_index;
                uint8_t index = 0xFF; //force initialization

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;
                  
                switch(size) {
                  case 0: //8-bits
                    index = (index_align>>1) & 0x7;
                    
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8*index, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xff), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8*index, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, RN, 0, 0, 0);  
                    }
                    break;
                  case 1: //16-bits
                    index = (index_align>>2) & 0x3;
                    
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16*index, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xffff), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16*index, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, RN, 0, 0, 0);  
                    }
                    break;
                  case 2: //32-bits
                    index = (index_align>>3) & 0x1;
                    
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    if(!index) {
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);  
                    }
                    break;
                }
              } //end VLD1 (single element to 1 lane)
              else if((B==1) || (B==5) || (B==9)) { //VLD2 (single 2-element structure to 1 lane) //A8-774
                //If RN == PC_REG, UNPREDICTABLE
                uint8_t size = (insn>>26) & 0x3;
                uint8_t index_align = (insn>>20) & 0xf;
                uint8_t writeback;
                uint8_t reg_index;
                uint8_t index = 0xFF; //force initialization
                uint8_t i, inc;
                uint8_t VD2;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;
                  
                switch(size) {
                  case 0: //8-bits
                    index = (index_align>>1) & 0x7;

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8*index, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 8*index, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xff), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8*index, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD1, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, RN, 0, 0, 0);  
                    }
                    break;
                  case 1: //16-bits
                    index = (index_align>>2) & 0x3;
                    i = (index_align>>1) & 0x1;
                    
                    if(i)
                      inc = 2;
                    else
                      inc = 1;
                    
                    VD2 = VD + inc;

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16*index, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16*index, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xffff), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16*index, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);  
                    }
                    break;
                  case 2: //32-bits
                    index = (index_align>>3) & 0x1;
                    i = (index_align>>2) & 0x1;
                    
                    if(i)
                      inc = 2;
                    else
                      inc = 1;
                    
                    VD2 = VD + inc;

                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                    if(!index) {
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD2, 0, 0, 0);  
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD2, 0, 0, 0);  
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8, RN, 0, 0, 0);  
                    }
                    break;
                }
              } //end VLD2 (single 2-element structure to 1 lane)
              else if((B==2) || (B==6) || (B==10)) { //VLD3 (single 3-element structure to 1 lane) //A8-778
                //If RN == PC_REG, UNPREDICTABLE
                uint8_t size = (insn>>26) & 0x3;
                uint8_t index_align = (insn>>20) & 0xf;
                uint8_t writeback;
                uint8_t reg_index;
                uint8_t index = 0xFF; //force initialization
                uint8_t i, inc;
                uint8_t VD2, VD3;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;
                  
                switch(size) {
                  case 0: //8-bits
                    index = (index_align>>1) & 0x7;
                    VD2 = VD + 1;
                    VD3 = VD2 + 1;

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8*index, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8*index, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8*index, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xff), LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8*index, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 3, RN, 0, 0, 0);  
                    }
                    break;
                  case 1: //16-bits
                    index = (index_align>>2) & 0x3;
                    i = (index_align>>1) & 0x1;
                    
                    if(!i)
                      inc = 1;
                    else
                      inc = 2;
                    
                    VD2 = VD + inc;
                    VD3 = VD2 + inc;

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16*index, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16*index, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16*index, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xffff), LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16*index, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 6, RN, 0, 0, 0);  
                    }
                    break;
                  case 2: //32-bits
                    index = (index_align>>3) & 0x1;
                    i = (index_align>>2) & 0x1;
                    
                    if(!i)
                      inc = 1;
                    else
                      inc = 2;
                    
                    VD2 = VD + inc;
                    VD3 = VD2 + inc;

                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 4, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP7, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP7, 0, 32, LREG_TMP7, 0, 0, 0);  

                    if(!index) {
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP7, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP7, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 12, RN, 0, 0, 0);  
                    }
                    break;
                }
              } //end VLD3 (single 3-element structure to 1 lane)
              else if((B==3) || (B==7) || (B==11)) { //VLD4 (single 4-element structure to 1 lane) //A8-782
                //If RN == PC_REG, UNPREDICTABLE
                uint8_t size = (insn>>26) & 0x3;
                uint8_t index_align = (insn>>20) & 0xf;
                uint8_t writeback;
                uint8_t reg_index;
                uint8_t index;
                uint8_t i, inc;
                uint8_t VD2, VD3, VD4;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;
                  
                switch(size) {
                  case 0: //8-bits
                    index = (index_align>>1) & 0x7;
                    VD2 = VD + 1;
                    VD3 = VD2 + 1;
                    VD4 = VD3 + 1;

                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8*index, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8*index, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8*index, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8*index, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xff), LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 8*index, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, VD4, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);  
                    }
                    break;
                  case 1: //16-bits
                    index = (index_align>>2) & 0x3;
                    i = (index_align>>1) & 0x1;
                    
                    if(!i)
                      inc = 1;
                    else
                      inc = 2;
                    
                    VD2 = VD + inc;
                    VD3 = VD2 + inc;
                    VD4 = VD3 + inc;

                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16*index, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16*index, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16*index, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16*index, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, static_cast<uint32_t>(0xffff), LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16*index, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, VD4, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8, RN, 0, 0, 0);  
                    }
                    break;
                  case 2: //32-bits
                    index = (index_align>>3) & 0x1;
                    i = (index_align>>2) & 0x1;
                    
                    if(!i)
                      inc = 1;
                    else
                      inc = 2;
                    
                    VD2 = VD + inc;
                    VD3 = VD2 + inc;
                    VD4 = VD3 + inc;

                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP8, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP8, 0, 32, LREG_TMP8, 0, 0, 0);  

                    if(!index) {
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP8, 0, 32, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP6, 0, VD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP6, 0, VD2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, LREG_TMP5, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, VD3, 0, 0, 0);  
                    }
                    else {
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP8, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD2, LREG_TMP8, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD3, LREG_TMP8, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD4, LREG_TMP8, 0, LREG_TMP7, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, VD3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP7, 0, VD4, 0, 0, 0);  
                    }

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 16, RN, 0, 0, 0);  
                    }
                    break;
                }
              } //end VLD4 (single 4-element structure to 1 lane)
              else if(B==12) { //VLD1 (single element to all lanes) //A8-606
                //If RN == PC_REG, UNPREDICTABLE
                uint8_t size = (insn>>22) & 0x3;
                uint8_t writeback;
                uint8_t reg_index;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;

                switch(size) {
                  case 0: //8-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                    if(b21)
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, RN, 0, 0, 0);  
                    }
                    break;
                  case 1: //16-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                    if(b21)
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, RN, 0, 0, 0);  
                    }
                    break;
                  case 2: //32-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                    if(b21)
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);  
                    }
                    break;
                }
              } //end VLD1 (single element to all lanes)
              else if(B==13) { //VLD2 (single 2-element structure to all lanes) //A8-612
                //If RN == PC_REG, UNPREDICTABLE
                uint8_t size = (insn>>22) & 0x3;
                uint8_t writeback;
                uint8_t reg_index;
                uint8_t inc;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;

                if(b21)
                  inc = 2;
                else
                  inc = 1;

                uint8_t VD2 = VD + inc;

                switch(size) {
                  case 0: //8-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 8, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, RN, 0, 0, 0);  
                    }
                    break;
                  case 1: //16-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);  
                    }
                    break;
                  case 2: //32-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8, RN, 0, 0, 0);  
                    }
                    break;
                }
              } //end VLD2 (single 2-element structure to all lanes)
              else if(B==14) { //VLD3 (single 3-element structure to all lanes) //A8-618
                //If RN == PC_REG, UNPREDICTABLE
                uint8_t size = (insn>>22) & 0x3;
                uint8_t writeback;
                uint8_t reg_index;
                uint8_t inc;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;

                if(b21)
                  inc = 2;
                else
                  inc = 1;

                uint8_t VD2 = VD + inc;
                uint8_t VD3 = VD2 + inc;

                switch(size) {
                  case 0: //8-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD3, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 3, RN, 0, 0, 0);  
                    }
                    break;
                  case 1: //16-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD3, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 6, RN, 0, 0, 0);  
                    }
                    break;
                  case 2: //32-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, 0, 4, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP4, 0, 0, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VD3, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 12, RN, 0, 0, 0);  
                    }
                    break;
                }
              } //end VLD3 (single 3-element structure to all lanes)
              else if(B==15) { //VLD4 (single 4-element structure to all lanes) //A8-624
                //If RN == PC_REG, UNPREDICTABLE
                uint8_t size = (insn>>22) & 0x3;
                uint8_t writeback;
                uint8_t reg_index;
                uint8_t inc;

                if(RM != PC_REG)
                  writeback = 1;

                if((RM != PC_REG) && (RM != STACKPTR))
                  reg_index = 1;

                if(b21)
                  inc = 2;
                else
                  inc = 1;

                uint8_t VD2 = VD + inc;
                uint8_t VD3 = VD2 + inc;
                uint8_t VD4 = VD3 + inc;

                switch(size) {
                  case 0: //8-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 1, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD4, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, RN, 0, 0, 0);  
                    }
                    break;
                  case 1: //16-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 2, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD4, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 8, RN, 0, 0, 0);  
                    }
                    break;
                  case 2: //32-bits
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 4, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP5, 0, 4, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP5, 0, 0, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP5, 0, VD, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP5, 0, VD2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD4, 0, 0, 0);  

                    if(writeback) {
                      if(reg_index)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, RM, 0, RN, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, RN, 0, 16, RN, 0, 0, 0);  
                    }
                    break;
                }
              } //end VLD4 (single 4-element structure to all lanes)
            }
          }
      } //end Advanced SIMD element or structure load/store instructions
      else if(!b10 && !b9 && !b6 && !b5 && b4) { //Load byte, memory hints //A6-28
        uint8_t op1 = (insn>>7) & 0x3;
        uint8_t op2 = (insn>>22) & 0x3F;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          if(((op1 == 0) || (op1 == 1)) && (RN == PC_REG) && (RT != PC_REG)) { //LDRB (literal) //A8-130
            //If RT == STACKPTR, UNPREDICTABLE
            const uint32_t IMM12 = (insn>>16) & 0xFFF;

            if(b7) {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4+IMM12), LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4-IMM12), LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
          } //end LDRB (literal)
          else if((op1 == 1) && (RN != PC_REG) && (RT != PC_REG)) { //LDRB (imm, Thumb) //A8-26 //Encoding T2
            //If RT == STACKPTR, UNPREDICTABLE 
            const uint32_t IMM12 = (insn>>16) & 0xFFF;

            CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM12, LREG_TMP1, 0, 0, 0);  
            CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
          }
          else if((op1 == 0) && (RN != PC_REG) && (RT != PC_REG) && 
                  ((b27 && b24) || (b27 && b26 && !b25 && !b24))) { //LDRB (imm, Thumb) //A8-126 //Encoding T3
            //If RT == 13 or RT == PC_REG && (P == 0 or U == 1 || W == 1), UNPREDICTABLE
            //If W && RN == RT, UNPREDICTABLE 
            uint8_t P = b26;
            uint8_t U = b25;
            uint8_t W = b24;
            const uint32_t IMM8 = (insn>>16) & 0xFF;

            if(P) {
              if(U) 
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, RT, 0, 0, 0);

              if(W)
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
            }
            else {
              CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, RN, 0, 0, RT, 0, 0, 0);

              if(W) {
                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM8, RN, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, RN, 0, IMM8, RN, 0, 0, 0);
              }
            }
          } //end LDRB (imm, Thumb)
          else if((op1 == 0) && (b27 && b26 && b25 && !b24) && (RN != PC_REG) && (RT != PC_REG)) { //LDRBT //A8-134
            OOPS("WARNING: Load Register Byte unprivileged (LDRBT) is NOT IMPLEMENTED.\n");
          }
          else if((op1 == 0) && (op2 == 0) && (RN != PC_REG) && (RT != PC_REG)) { //LDRB (register) //A8-132 //Encoding T3
            //If RT == STACKPTR, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
            uint8_t IMM2 = (insn>>20) & 0x3;

            if(IMM2 == 0) {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RM, 0, IMM2, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_U08_LD, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
          } //end LDRB (register)
          else if(((op1 == 2) || (op1 == 3)) && (RN == PC_REG) && (RT != PC_REG)) { //LDRSB (literal) //A8-162
            //If RT == STACKPTR, UNPREDICTABLE
            const uint32_t IMM12 = (insn>>16) & 0xFFF;

            if(b7) {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4+IMM12), LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4-IMM12), LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
          } //end LDRSB (literal)
          else if( (RN != PC_REG) && (RT != PC_REG) && (op1 == 3)) { //LDRSB (imm) //A8-160 //Encoding T1
            //If RT == STACKPTR, UNPREDICTABLE
            const uint32_t IMM12 = (insn>>16) & 0xFFF;

            CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM12, LREG_TMP1, 0, 0, 0);  
            CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
          }
          else if((RN != PC_REG) && (RT != PC_REG) && (op1 == 2) && 
                 ((b27 && b24) || (b27 && b26 && !b25 && !b24))) { //LDRSB (imm) //A8-160 //Encoding T2
            //If RT == 13 or RT == PC_REG && (P == 0 or U == 1 || W == 1), UNPREDICTABLE
            //If W && RN == RT, UNPREDICTABLE 
            uint8_t P = b26;
            uint8_t U = b25;
            uint8_t W = b24;
            const uint32_t IMM8 = (insn>>16) & 0xFF;

            if(P) {
              if(U) 
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, LREG_TMP1, 0, 0, RT, 0, 0, 0);

              if(W)
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
            }
            else {
              CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, RN, 0, 0, RT, 0, 0, 0);

              if(W) {
                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM8, RN, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, RN, 0, IMM8, RN, 0, 0, 0);
              }
            }
          } //end LDRSB (imm)
          else if((op1 == 2) && (b27 && b26 && b25 && !b24) && (RN != PC_REG) && (RT != PC_REG)) { //LDRSBT //A8-166
            OOPS("WARNING: Load Register Signed Byte unprivileged (LDRSBT) is NOT IMPLEMENTED.\n");
          }
          else if((op1 == 2) && (op2 == 0) && (RN != PC_REG) && (RT != PC_REG)) { //LDRSB (register) //A8-164
            //If RT == STACKPTR, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
            uint8_t IMM2 = (insn>>20) & 0x3;

            if(IMM2 == 0) {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RM, 0, IMM2, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_S08_LD, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
          } //end LDRSB
          else if(RT == PC_REG) { //PLD, PLDW (imm), unallocated memory hints
            OOPS("WARNING: Preload Data (PLD), Preload Instrucion (PLI), or UNPREDICTABLE instruction is NOT IMPLEMENTED or UNPREDICTABLE.\n");
          }
      } //end Load halfword, memory hints
      else if(!b10 && !b9 && !b6 && b5 && b4) { //Load halfword, memory hints //A6-26
        uint8_t op1 = (insn>>7) & 0x3;
        uint8_t op2 = (insn>>22) & 0x3F;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          if(((op1 == 0) || (op1 == 1)) && (RN == PC_REG) && (RT != PC_REG)) { //LDRH (literal) //A8-154
            //If RT == STACKPTR, UNPREDICTABLE
            const uint32_t IMM12 = (insn>>16) & 0xFFF;

            if(b7) {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4+IMM12), LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4-IMM12), LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
          } //end LDRH (literal)
          else if((op1 == 1) && (RN != PC_REG) && (RT != PC_REG)) { //LDRH (imm, Thumb) //A8-154 //Encoding T2
            //If RT == STACKPTR, UNPREDICTABLE 
            const uint32_t IMM12 = (insn>>16) & 0xFFF;

            CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM12, LREG_TMP1, 0, 0, 0);  
            CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
          } //end LDRH (imm, Thumb)
          else if((op1 == 0) && (RN != PC_REG) && (RT != PC_REG) && 
                 ((b27 && b24) || (b27 && b26 && !b25 && !b24))) { //LDRH (imm, Thumb) //A8-154 //Encoding T3
            //If RT == 13 or RT == PC_REG && (P == 0 or U == 1 || W == 1), UNPREDICTABLE
            //If W && RN == RT, UNPREDICTABLE 
            uint8_t P = b26;
            uint8_t U = b25;
            uint8_t W = b24;
            const uint32_t IMM8 = (insn>>16) & 0xFF;

            if(P) {
              if(U) 
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);

              if(W)
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
            }
            else {
              CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, RN, 0, 0, RT, 0, 0, 0);

              if(W) {
                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM8, RN, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, RN, 0, IMM8, RN, 0, 0, 0);
              }
            }
          } //end LDRH (imm, Thumb)
          else if((op1 == 0) && (b27 && b26 && b25 && !b24) && (RN != PC_REG) && (RT != PC_REG)) { //LDRHT //A8-158
            OOPS("WARNING: Load Register Halfword unprivileged (LDRHT) is NOT IMPLEMENTED.\n");
          }
          else if((op1 == 0) && (op2 == 0) && (RN != PC_REG) && (RT != PC_REG)) { //LDRH (register) //A8-156
            //If RT == STACKPTR, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
            uint8_t IMM2 = (insn>>20) & 0x3;

            if(IMM2 == 0) {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RM, 0, IMM2, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_U16_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
          } //end LDRH (register)
          else if(((op1 == 2) || (op1 == 3)) && (RN == PC_REG) && (RT != PC_REG)) { //LDRSH (literal) //A8-170
            //If RT == STACKPTR, UNPREDICTABLE
            const uint32_t IMM12 = (insn>>16) & 0xFFF;

            if(b7) {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4+IMM12), LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4-IMM12), LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
          } //end LDRSH (literal)
          else if((op1 == 3) &&(RN != PC_REG) && (RT != PC_REG)) { //LDRSH (imm) //A8-168 //Encoding T1
            //If RT == STACKPTR, UNPREDICTABLE 
            const uint32_t IMM12 = (insn>>16) & 0xFFF;

            CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM12, LREG_TMP1, 0, 0, 0);  
            CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
          } //end LDRSH (imm)
          else if((op1 == 2) && (RN != PC_REG) && (RT != PC_REG) && 
                 ((b27 && b24) || (b27 && b26 && !b25 && !b24))) { //LDRSH (imm) //A8-168 //Encoding T2
            //If RT == 13 or RT == PC_REG && (P == 0 or U == 1 || W == 1), UNPREDICTABLE
            //If W && RN == RT, UNPREDICTABLE 
            uint8_t P = b26;
            uint8_t U = b25;
            uint8_t W = b24;
            const uint32_t IMM8 = (insn>>16) & 0xFF;

            if(P) {
              if(U) 
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);

              if(W)
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?
            }
            else {
              CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, RN, 0, 0, RT, 0, 0, 0);

              if(W) {
                if(U) 
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM8, RN, 0, 0, 0);
                else
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, RN, 0, IMM8, RN, 0, 0, 0);
              }
            }
          } //end LDRSH (imm)
          else if((op1 == 2) && (b27 && b26 && b25 && !b24) && (RN != PC_REG) && (RT != PC_REG)) { //LDRSHT //A8-174
            OOPS("WARNING: Load Register Signed Halfword unprivileged (LDRSHT) is NOT IMPLEMENTED.\n");
          }
          else if((op1 == 2) && (op2 == 0) && (RN != PC_REG) && (RT != PC_REG)) { //LDRSH (register) //A8-172
            //If RT == STACKPTR, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
            uint8_t IMM2 = (insn>>20) & 0x3;

            if(IMM2 == 0) {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RM, 0, IMM2, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iLALU_LD, OP_S16_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            }
          } //end LDRSH (register)
          else if(((op1 == 0) || (op1 == 1)) && (RN != PC_REG) && (RT != PC_REG)) { //UNPREDICTABLE
            OOPS("WARNING: Instruction in load halfword, memory hints is UNPREDICTABLE.\n");
          }
          else if(RT == PC_REG) { //PLD, PLDW (imm), unallocated memory hints
            OOPS("WARNING: Preload Data with intent to Write (PLWD [imm]) or unallocated memory hints is NOT IMPLEMENTED or UNPREDICTABLE.\n");
          }
      } //end Load halfword, memory hints
      else if(!b10 && !b9 && b6 && !b5 && b4) { //Load word //A6-25
        uint8_t op1 = (insn>>7) & 0x3;
        uint8_t op2 = (insn>>22) & 0x3F;

          if(cond != AL) { //not always
            CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
            CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
          } //end not always

          if((op1 == 1) && (RN != PC_REG)) { //LDR (imm, Thumb) //A8-118 //Encoding T3
            //If RT == PC_REG and In ITBLOCK and Is NOT LAST in ITBLOCK, UNPREDICTABLE
            uint32_t IMM12 = (insn>>16) & 0xFFF;

            CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM12, LREG_TMP1, 0, 0, 0);  

            if(RT != PC_REG)
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            else {
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, ARM, LREG_TTYPE, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
              CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);  
            }
          } //end LDR (imm, Thumb)
          else if((op1 == 0) && (((b27 && b24) && (RN != PC_REG)) ||
                 ((b27 && b26 && !b25 && !b24) && (RN != PC_REG)))) { //LDR (imm, Thumb) //A8-118 //Encoding T4
            //If W && RN == RT, UNPREDICTABLE 
            //If RT == PC_REG and In ITBLOCK and Is NOT LAST in ITBLOCK, UNPREDICTABLE
            uint8_t P = b26;
            uint8_t U = b25;
            uint8_t W = b24;
            const uint32_t IMM8 = (insn>>16) & 0xFF;
            bool completed = false;

            if(P) {
              if(U) 
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, RN, 0, IMM8, LREG_TMP1, 0, 0, 0);

              if(W)
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, 0, 0, RN, 0, 0, 0); //FIXME: RAT/ROB move?

              if(RT != PC_REG)
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);
              else {
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, ARM, LREG_TTYPE, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);  
              }

            }
            else {
              if(RT != PC_REG)
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, RT, 0, 0, 0);
              else {
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, RN, 0, 0, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, ARM, LREG_TTYPE, 0, 0, 0);  

                if(W) {
                  if(U) 
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM8, RN, 0, 0, 0);
                  else
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, RN, 0, IMM8, RN, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);  
                completed = true;
              }

              if(!completed) {
                if(W) {
                  if(U) 
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, 0, IMM8, RN, 0, 0, 0);
                  else
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, RN, 0, IMM8, RN, 0, 0, 0);
                }
              }
            }
          } //end LDR (imm, Thumb)
          else if((op1 == 0) && (b27 && b26 && b25 && !b24) && (RN != PC_REG)) { //LDRT //A8-176
            OOPS("WARNING: Load Register unprivileged (LDRT) is NOT IMPLEMENTED.\n");
          }
          else if((op1 == 0) && (op2 == 0) && (RN != PC_REG)) { //LDR (register) //A8-124
            //If RT == PC_REG and In ITBLOCK and Is NOT LAST in ITBLOCK, UNPREDICTABLE
            //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
            uint8_t IMM2 = (insn>>20) & 0x3;

            if(IMM2 == 0) {
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  

              if(RT != PC_REG)
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
              else {
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, ARM, LREG_TTYPE, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);  
              }
            }
            else {
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RM, 0, IMM2, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  

              if(RT != PC_REG)
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
              else {
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, ARM, LREG_TTYPE, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
                CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);  
              }
            }
          } //end LDR (register)
          else if(((op1 == 0) || (op1 == 1)) && (RN == PC_REG)) { //LDR (literal) //A8-122
            //If RT == PC_REG and In ITBLOCK and Is NOT LAST in ITBLOCK, UNPREDICTABLE
            const uint32_t IMM12 = (insn>>16) & 0xFFF;

            if(b7)
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4+IMM12), LREG_TMP1, 0, 0, 0);  
            else
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((PC&0xFFFFFFFC)+4-IMM12), LREG_TMP1, 0, 0, 0);  

            if(RT != PC_REG)
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, RT, 0, 0, 0);  
            else {
              CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TTYPE, 0, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, ARM, LREG_TTYPE, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFFFFFE, LREG_TMP1, 0, 0, 0); // clear bit 0
              CrackInst::setup(rinst, iBALU_RJUMP, OP_U64_JMP_REG, LREG_TMP1, 0, 0, 0, 0, 0, 0);  
            }
          } //end LDR (literal)
      } //end Load word
      else if(!b10 && !b9 && b6 && b5 && b4) { //UNDEFINED
        OOPS("WARNING: This instruction is UNDEFINED.\n");
      }
      else if(!b10 && b9 && !b8) { //Data-processing (register) //A6-33
        uint8_t op1 = (insn>>4) & 0xF;
        uint8_t op2 = (insn>>20) & 0xF;

          if(cond != AL) { //not always
            if(((op1 == 0) || (op1 == 1)) && (op2 == 0)) { //SLL (register) //A8-180
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SLL (register)
            else if(((op1 == 2) || (op1 == 3)) && (op2 == 0)) { //SRL (register) //A8-184
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SRL (register)
            else if(((op1 == 4) || (op1 == 5)) && (op2 == 0)) { //SRA (register) //A8-42
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SRA (register)
            else if(((op1 == 6) || (op1 == 7)) && (op2 == 0)) { //ROTR (register) //A8-280
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end ROTR (register)
            else if((op1 == 0) && b23 && (RN != PC_REG)) { //SXTAH //A8-483
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              switch(rotate) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  break;
              }
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SXTAH
            else if((op1 == 0) && b23 && (RN == PC_REG)) { //SXTH //A8-444
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              switch(rotate) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  break;
              }

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SXTH
            else if((op1 == 1) && b23 && (RN != PC_REG)) { //UXTAH //A8-518
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if(rotate != 0) {
                switch(rotate) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                }
              }
  
              if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end UXTAH
            else if((op1 == 1) && b23 && (RN == PC_REG)) { //UXTH //A8-524
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if(rotate != 0) {
                switch(rotate) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                }
              }
  
              if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end UXTH
            else if((op1 == 2) && b23 && (RN != PC_REG)) { //SXTAB16 //A8-436
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              switch(rotate) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
              }
  
              CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SXTAB16
            else if((op1 == 2) && b23 && (RN == PC_REG)) { //SXTB16 //A8-442
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              switch(rotate) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
              }

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SXTB16
            else if((op1 == 3) && b23 && (RN != PC_REG)) { //UXTAB16 //A8-516
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if(rotate != 0) {
                switch(rotate) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                }
              }
  
              if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end UXTAB16
            else if((op1 == 3) && b23 && (RN == PC_REG)) { //UXTB16 //A8-522
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if(rotate != 0) {
                switch(rotate) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                }
              }
  
              if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end UXTB16
            else if((op1 == 4) && b23 && (RN != PC_REG)) { //SXTAB //A8-434
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if((rotate != 0) && (rotate != 3)) {
                if(rotate == 1)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                else if(rotate == 2)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
              }
              else if(rotate == 3)
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 24, LREG_TMP1, 0, 0, 0);
              else if(rotate == 0) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
              }
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SXTAB
            else if((op1 == 4) && b23 && (RN == PC_REG)) { //SXTB //A8-440
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if((rotate != 0) && (rotate != 3)) {
                if(rotate == 1)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                else if(rotate == 2)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
              }
              else if(rotate == 3)
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 24, LREG_TMP1, 0, 0, 0);
              else if(rotate == 0) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
              }

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end SXTB16
            else if((op1 == 5) && b23 && (RN != PC_REG)) { //UXTAB //A8-514
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if(rotate != 0) {
                switch(rotate) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                }
              }
  
              if(rotate != 0) 
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end UXTAB
            else if((op1 == 5) && b23 && (RN == PC_REG)) { //UXTB //A8-520
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if(rotate != 0) {
                switch(rotate) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                }
              }
  
              if(rotate != 0) 
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end UXTB
            else if(b7 && !b23 && !b22) { //Parallel addition and subtraction, signed //A6-35
              uint8_t op1 = (insn>>4) & 0x7;
              uint8_t op2 = (insn>>20) & 0x3;
  
              if(op2 == 0) { //Signed parallel addition and subtraction
                if(op1 == 0) { //SADD8 //A8-298
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end SADD8
                else if(op1 == 1) { //SADD16 //A8-296
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end SADD16
                else if(op1 == 2) { //SASX //A8-300
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 3, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end SASX
                else if(op1 == 4) { //SSUB8 //A8-370
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end SSUB8
                else if(op1 == 5) { //SSUB16 //A8-368
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end SSUB16
                else if(op1 == 6) { //SSAX //A8-366
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 3, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end SSAX
              } //end Signed parallel addition and subtraction
              else if(op2 == 1) { //Saturating instructions
                if(op1 == 0) { //QADD8 //A8-254
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S08_SADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end QADD8
                else if(op1 == 1) { //QADD16 //A8-252
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_SSUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end QADD16
                else if(op1 == 2) { //QASX //A8-256
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SSUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end QASX
                else if(op1 == 4) { //QSUB8 //A8-268
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S08_SSUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end QSUB8
                else if(op1 == 5) { //QSUB16 //A8-266
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_SSUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end QSUB16
                else if(op1 == 6) { //QSAX //A8-262
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SSUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end QSAX
              } //end Saturating instructions
              else if(op2 == 2) { //Halving instructions
                if(op1 == 0) { //SHADD8 //A8-328
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end SHADD8
                else if(op1 == 1) { //SHADD16 //A8-318
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end SHADD16
                else if(op1 == 2) { //SHASX //A8-322
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end SHASX
                else if(op1 == 4) { //SHSUB8 //A8-328
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end SHSUB8
                else if(op1 == 5) { //SHSUB16 //A8-326
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end SHSUB16
                else if(op1 == 6) { //SHSAX //A8-324
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                } //end SHSAX
              } //end Halving instructions
            } //end Parallel addition and subtraction, signed
            else if(b7 && !b23 && b22) { //Parallel addition and subtraction, unsigned //A6-36
              uint8_t op1 = (insn>>4) & 0x7;
              uint8_t op2 = (insn>>20) & 0x3;
  
              if(op2 == 0) { //Unsigned parallel and subtraction
                if(op1 == 0) { //UADD8 //A8-462
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 1) { //UADD16 //A8-460
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 2) { //UASX //A8-464
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 4) { //USUB8 //A8-512
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 5) { //USUB16 //A8-510
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 6) { //USAX //A8-508
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
              }
              else if(op2 == 1) { //Saturating instructions
                if(op1 == 0) { //UQADD8 //A8-490
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U08_SADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 1) { //UQADD16 //A8-488
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U16_SADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 2) { //UQASX //A8-492
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_SADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_SSUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 4) { //UQSUB8 //A8-498
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U08_SSUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 5) { //UQSUB16 //A8-496
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U16_SSUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 6) { //UQSAX //A8-494
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_SSUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_SADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
              }
              else if(op2 == 2) { //Halving instructions
                if(op1 == 0) { //UHADD8 //A8-472
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U08_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 1) { //UHADD16 //A8-470
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U16_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 2) { //UHASX //A8-474
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_SUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 4) { //UHSUB8 //A8-480
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U08_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 5) { //UHSUB16 //A8-478
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U16_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op1 == 6) { //UHSAX //A8-476
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
              }
            }
            else if(b7 && !b6 && b23 && !b22) { //Miscellaneous operations //A6-37
              uint8_t op1 = (insn>>4) & 0x3;
              uint8_t op2 = (insn>>20) & 0x3;
       
              if(op1 == 0) {
                if(op2 == 0) { //QADD //A8-250
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  
                  //Get carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, RD, 0, 0, LREG_TMP2, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);            

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op2 == 1) { //QDADD //A8-258
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SADD, RN, RN, 0, LREG_TMP1, 0, 0, 0);
  
                  //Get carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SADD, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
  
                  //Get carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                  
                  //if either operation overflowed
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op2 == 2) { //QSUB //A8-264
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SSUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  
                  //Get carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, RD, 0, 0, LREG_TMP2, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);            

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else { //QDSUB //A8-260
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SADD, RN, RN, 0, LREG_TMP1, 0, 0, 0);
  
                  //Get carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S32_SSUB, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
  
                  //Get carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP3, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                  
                  //if either operation overflowed
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, LREG_Q_FLAG, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, 1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
              }
              else if(op1 == 1)  {
                if(op2 == 0) { //REV //A8-272
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op2 == 1) { //REV16 //A8-274
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else if(op2 == 2) { //RBIT //A8-270
                  //Algorithm from Bit Twiddling (graphics.stanford.edu/~seander/bithack.htlm)
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x55555556, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0x55555555), LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x33333334, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x33333333), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x0F0F0F10, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x0f0f0f0f), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x00FF0100, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00ff00ff), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
                else { //REVSH //A8-276
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
                }
              }
              else if((op1 == 2) && (op2 == 0))  { //SEL //A8-312
                //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP3, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_GE_FLAG, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, static_cast<uint32_t>(0xFF00), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF00), LREG_TMP3, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_GE_FLAG, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, static_cast<uint32_t>(0xFF0000), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF0000), LREG_TMP3, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_GE_FLAG, 0, 2, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_GE_FLAG, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
              }
              else if((op1 == 3) && (op2 == 0))  { //CLZ //A8-72
                //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
  
                //reverse bit patten
                if(cond != AL) {
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
                }

                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, RM, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_CLZ, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);

                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0);
              } //end CLZ
            }
            else if(((insn>>28) & 0xF) != PC_REG)
              OOPS("Instruction in Data-processing (register) space is UNDEFINED.\n");
            else 
              OOPS("Instruction in Data-processing (register) space is UNDEFINED.\n");
          } //end not always
          else { //always
            if(((op1 == 0) || (op1 == 1)) && (op2 == 0)) { //SLL (register) //A8-180
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t Sbit = b4;
  
              CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, RM, 0, RD, Sbit, 0, 0);  
            } //end SLL (register)
            else if(((op1 == 2) || (op1 == 3)) && (op2 == 0)) { //SRL (register) //A8-184
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t Sbit = b4;
  
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, RM, 0, RD, Sbit, 0, 0);  
            } //end SRL (register)
            else if(((op1 == 4) || (op1 == 5)) && (op2 == 0)) { //SRA (register) //A8-42
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t Sbit = b4;
  
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, RM, 0, RD, Sbit, 0, 0);  
            } //end SRA (register)
            else if(((op1 == 6) || (op1 == 7)) && (op2 == 0)) { //ROTR (register) //A8-280
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              uint8_t Sbit = b4;
  
              CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, RM, 0, RD, Sbit, 0, 0);  
            } //end ROTR (register)
            else if((op1 == 0) && b23 && (RN != PC_REG)) { //SXTAH //A8-483
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              switch(rotate) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  break;
              }
  
                CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, RD, 0, 0, 0);
            } //end SXTAH
            else if((op1 == 0) && b23 && (RN == PC_REG)) { //SXTH //A8-444
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              switch(rotate) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, RD, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                  break;
              }
            } //end SXTH
            else if((op1 == 1) && b23 && (RN != PC_REG)) { //UXTAH //A8-518
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if(rotate != 0) {
                switch(rotate) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                }
              }
  
              if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, RD, 0, 0, 0);
            } //end UXTAH
            else if((op1 == 1) && b23 && (RN == PC_REG)) { //UXTH //A8-524
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if(rotate != 0) {
                switch(rotate) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                }
              }
  
              if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, RD, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, RD, 0, 0, 0);
            } //end UXTH
            else if((op1 == 2) && b23 && (RN != PC_REG)) { //SXTAB16 //A8-436
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              switch(rotate) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                  break;
              }
  
              CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP1, 0, RD, 0, 0, 0);
            } //end SXTAB16
            else if((op1 == 2) && b23 && (RN == PC_REG)) { //SXTB16 //A8-442
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              switch(rotate) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, RD, 0, 0, 0);
                  break;
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, RM, 0, 8, RD, 0, 0, 0);
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, RD, 0, 0, 0);
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 8, RD, 0, 0, 0);
                  break;
              }
            } //end SXTB16
            else if((op1 == 3) && b23 && (RN != PC_REG)) { //UXTAB16 //A8-516
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if(rotate != 0) {
                switch(rotate) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                }
              }
  
              if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, RD, 0, 0, 0);
            } //end UXTAB16
            else if((op1 == 3) && b23 && (RN == PC_REG)) { //UXTB16 //A8-522
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if(rotate != 0) {
                switch(rotate) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                }
              }
  
              if(rotate != 0)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, RD, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, RD, 0, 0, 0);
            } //end UXTB16
            else if((op1 == 4) && b23 && (RN != PC_REG)) { //SXTAB //A8-434
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if((rotate != 0) && (rotate != 3)) {
                if(rotate == 1)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                else if(rotate == 2)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
              }
              else if(rotate == 3)
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 24, LREG_TMP1, 0, 0, 0);
              else if(rotate == 0) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
              }
  
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RN, LREG_TMP1, 0, RD, 0, 0, 0);
            } //end SXTAB
            else if((op1 == 4) && b23 && (RN == PC_REG)) { //SXTB //A8-440
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if((rotate != 0) && (rotate != 3)) {
                if(rotate == 1)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                else if(rotate == 2)
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
              }
              else if(rotate == 3)
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 24, RD, 0, 0, 0);
              else if(rotate == 0) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 24, RD, 0, 0, 0);
              }
            } //end SXTB16
            else if((op1 == 5) && b23 && (RN != PC_REG)) { //UXTAB //A8-514
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if(rotate != 0) {
                switch(rotate) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                }
              }
  
              if(rotate != 0) 
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP1, 0, RD, 0, 0, 0);
            } //end UXTAB
            else if((op1 == 5) && b23 && (RN == PC_REG)) { //UXTB //A8-520
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              uint8_t rotate = (insn>>20) & 0x3;
  
              if(rotate != 0) {
                switch(rotate) {
                  case 1:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                    break;
                  case 2:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0);
                    break;
                  case 3:
                    CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 24, LREG_TMP1, 0, 0, 0);
                    break;
                }
              }
  
              if(rotate != 0) 
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), RD, 0, 0, 0);
              else
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF), RD, 0, 0, 0);
            } //end UXTB
            else if(b7 && !b23 && !b22) { //Parallel addition and subtraction, signed //A6-35
              uint8_t op1 = (insn>>4) & 0x7;
              uint8_t op2 = (insn>>20) & 0x3;
  
              if(op2 == 0) { //Signed parallel addition and subtraction
                if(op1 == 0) { //SADD8 //A8-298
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
                } //end SADD8
                else if(op1 == 1) { //SADD16 //A8-296
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
                } //end SADD16
                else if(op1 == 2) { //SASX //A8-300
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 3, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
                } //end SASX
                else if(op1 == 4) { //SSUB8 //A8-370
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
                } //end SSUB8
                else if(op1 == 5) { //SSUB16 //A8-368
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 3, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
                } //end SSUB16
                else if(op1 == 6) { //SSAX //A8-366
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP2, 0, 15, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP4, 0, 15, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 3, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
                } //end SSAX
              } //end Signed parallel addition and subtraction
              else if(op2 == 1) { //Saturating instructions
                if(op1 == 0) { //QADD8 //A8-254
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S08_SADD, RN, RM, 0, RD, 0, 0, 0);  
                } //end QADD8
                else if(op1 == 1) { //QADD16 //A8-252
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_SSUB, RN, RM, 0, RD, 0, 0, 0);  
                } //end QADD16
                else if(op1 == 2) { //QASX //A8-256
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SSUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
                } //end QASX
                else if(op1 == 4) { //QSUB8 //A8-268
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S08_SSUB, RN, RM, 0, RD, 0, 0, 0);  
                } //end QSUB8
                else if(op1 == 5) { //QSUB16 //A8-266
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_SSUB, RN, RM, 0, RD, 0, 0, 0);  
                } //end QSUB16
                else if(op1 == 6) { //QSAX //A8-262
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SSUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
                } //end QSAX
              } //end Saturating instructions
              else if(op2 == 2) { //Halving instructions
                if(op1 == 0) { //SHADD8 //A8-328
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
                } //end SHADD8
                else if(op1 == 1) { //SHADD16 //A8-318
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
                } //end SHADD16
                else if(op1 == 2) { //SHASX //A8-322
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
                } //end SHASX
                else if(op1 == 4) { //SHSUB8 //A8-328
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S08_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
                } //end SHSUB8
                else if(op1 == 5) { //SHSUB16 //A8-326
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
                } //end SHSUB16
                else if(op1 == 6) { //SHSAX //A8-324
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
                } //end SHSAX
              } //end Halving instructions
            } //end Parallel addition and subtraction, signed
            else if(b7 && !b23 && b22) { //Parallel addition and subtraction, unsigned //A6-36
              uint8_t op1 = (insn>>4) & 0x7;
              uint8_t op2 = (insn>>20) & 0x3;
  
              if(op2 == 0) { //Unsigned parallel and subtraction
                if(op1 == 0) { //UADD8 //A8-462
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
                }
                else if(op1 == 1) { //UADD16 //A8-460
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
                }
                else if(op1 == 2) { //UASX //A8-464
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
                }
                else if(op1 == 4) { //USUB8 //A8-512
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
                }
                else if(op1 == 5) { //USUB16 //A8-510
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0); //bottom 16-bit LREG_ICC
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
                }
                else if(op1 == 6) { //USAX //A8-508
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP4, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_GE_FLAG, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, RD, 0, 0, 0);
                }
              }
              else if(op2 == 1) { //Saturating instructions
                if(op1 == 0) { //UQADD8 //A8-490
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U08_SADD, RN, RM, 0, RD, 0, 0, 0);  
                }
                else if(op1 == 1) { //UQADD16 //A8-488
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U16_SADD, RN, RM, 0, RD, 0, 0, 0);  
                }
                else if(op1 == 2) { //UQASX //A8-492
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_SADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_SSUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
                }
                else if(op1 == 4) { //UQSUB8 //A8-498
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U08_SSUB, RN, RM, 0, RD, 0, 0, 0);  
                }
                else if(op1 == 5) { //UQSUB16 //A8-496
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U16_SSUB, RN, RM, 0, RD, 0, 0, 0);  
                }
                else if(op1 == 6) { //UQSAX //A8-494
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_SSUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_SADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
                }
              }
              else if(op2 == 2) { //Halving instructions
                if(op1 == 0) { //UHADD8 //A8-472
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U08_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
                }
                else if(op1 == 1) { //UHADD16 //A8-470
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U16_ADD, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
                }
                else if(op1 == 2) { //UHASX //A8-474
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_SUB, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_ADD, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
                }
                else if(op1 == 4) { //UHSUB8 //A8-480
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U08_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
                }
                else if(op1 == 5) { //UHSUB16 //A8-478
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U16_SUB, RN, RM, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
                }
                else if(op1 == 6) { //UHSAX //A8-476
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_ADD, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_U16_SUB, RN, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S16_SRA, LREG_TMP1, 0, 1, RD, 0, 0, 0);  
                }
              }
            }
            else if(b7 && !b6 && b23 && !b22) { //Miscellaneous operations //A6-37
              uint8_t op1 = (insn>>4) & 0x3;
              uint8_t op2 = (insn>>20) & 0x3;
       
              if(op1 == 0) {
                if(op2 == 0) { //QADD //A8-250
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SADD, RN, RM, 0, RD, 0, 0, 0);  
                  
                  //Get carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, RD, 0, 0, LREG_TMP2, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_Q_FLAG, 0, 0, 0);  //Int Q Flag
                }
                else if(op2 == 1) { //QDADD //A8-258
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SADD, RN, RN, 0, LREG_TMP1, 0, 0, 0);
    
                  //Get carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SADD, RM, LREG_TMP1, 0, RD, 0, 0, 0);
    
                  //Get carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, RD, 0, 0, LREG_TMP1, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);
               
                  //if either operation overflowed
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP1, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag 
                }
                else if(op2 == 2) { //QSUB //A8-264
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SSUB, RN, RM, 0, RD, 0, 0, 0);  
                  
                  //Get carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, RD, 0, 0, LREG_TMP2, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
                }
                else { //QDSUB //A8-260
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                  //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SADD, RN, RN, 0, LREG_TMP1, 0, 0, 0);
    
                  //Get carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
  
                  CrackInst::setup(rinst, iAALU, OP_S32_SSUB, RM, LREG_TMP1, 0, RD, 0, 0, 0);
      
                  //Get carry
                  CrackInst::setup(rinst, iAALU, OP_S64_GETICC, RD, 0, 0, LREG_TMP1, 0, 0, 0);            
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);
                 
                  //if either operation overflowed
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP1, 0, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag 
                }
              }
              else if(op1 == 1)  {
                if(op2 == 0) { //REV //A8-272
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                }
                else if(op2 == 1) { //REV16 //A8-274
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, RD, 0, 0, 0);
                }
                else if(op2 == 2) { //RBIT //A8-270
                  //Algorithm from Bit Twiddling (graphics.stanford.edu/~seander/bithack.htlm)
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x55555556, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0x55555555), LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x33333334, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x33333333), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x0F0F0F10, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x0f0f0f0f), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 0x00FF0100, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00ff00ff), LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, RD, 0, 0, 0);
                }
                else { //REVSH //A8-276
                  //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                  //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
  
                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, RM, 0, 8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
                }
              }
              else if((op1 == 2) && (op2 == 0))  { //SEL //A8-312
                //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
                //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
  
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP3, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_GE_FLAG, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, static_cast<uint32_t>(0xFF00), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF00), LREG_TMP3, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_GE_FLAG, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, static_cast<uint32_t>(0xFF0000), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, static_cast<uint32_t>(0xFF0000), LREG_TMP3, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_GE_FLAG, 0, 2, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_GE_FLAG, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, RD, 0, 0, 0);
              }
              else if((op1 == 3) && (op2 == 0))  { //CLZ //A8-72
                //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
                //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
  
                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, RM, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_CLZ, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
  
                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RD, 0, 0, 0);

              } //end CLZ
            }
            else if(((insn>>28) & 0xF) != PC_REG)
              OOPS("Instruction in Data-processing (register) space is UNDEFINED.\n");
            else 
              OOPS("Instruction in Data-processing (register) space is UNDEFINED.\n");
          } //end always
      } //end Data-processing (register)
      else if(!b10 && b9 && b8 && !b7) { //Multiply, multiply accumulate, and absoulte difference //A6-38
        uint8_t op1 = (insn>>4) & 0x7;
        uint8_t op2 = (insn>>20) & 0x3;
     
          if(cond != AL) { //not always
            if((op1 == 0) && (op2 == 0) && (RT != PC_REG)) { //MLA //A8-190
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RT, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            } //end MLA
            else if((op1 == 0) && (op2 == 0) && (RT == PC_REG)) { //MUL //A8-212
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 0) && (op2 == 1)) { //MLS //A8-192
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RT, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 1) && (RT != PC_REG)) { //SMLA<x> <y> //A8-330
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              if(!b21) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
              }
              else 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0);
              
              if(!b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              else 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP2, 0, 0, 0);
              
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RT, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0); //get overflow
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 1) && (RT == PC_REG)) { //SMUL<x> <y> //A8-354
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(!b21) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
              }
              else 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0);

              if(!b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              else 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 2) && !b21 && (RT != PC_REG)) { //SMLAD //A8-332
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RT, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //get overflow

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 2) && !b21 && (RT == PC_REG)) { //SMUAD //A8-332
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //get overflow

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 3) && !b21 && (RT != PC_REG)) { //SMLAW <y> //A8-340
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              if(!b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RT, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0); //get overflow
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 3) && !b21 && (RT == PC_REG)) { //SMULW <y> //A8-358
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(!b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 4) && !b21 && (RT != PC_REG)) { //SMLSD //A8-342
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RT, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //get overflow

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_GE_FLAG, 0, LREG_GE_FLAG, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 4) && !b21 && (RT == PC_REG)) { //SMUSD //A8-360
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 5) && !b21 && (RT != PC_REG)) { //SMMLA //A8-346
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RT, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 31, LREG_TMP2, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              }

              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 5) && !b21 && (RT == PC_REG)) { //SMMUL //A8-350
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 31, LREG_TMP2, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              }

              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 6) && !b21) { //SMMLS //A8-348
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RT, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP2, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 31, LREG_TMP2, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              }

              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 7) && (op2 == 0) && (RT != PC_REG)) { //USADA8 //A8-502
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RT, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 7) && (op2 == 0) && (RT == PC_REG)) { //USAD8 //A8-500
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else 
              OOPS("Instruction in Multiply, multiply accumulate, and absoulte difference space is UNDEFINED.\n");
          } //end not always
          else { //always
            if((op1 == 0) && (op2 == 0) && (RT != PC_REG)) { //MLA //A8-190
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RT, LREG_TMP1, 0, RD, 0, 0, 0);
            } //end MLA
            else if((op1 == 0) && (op2 == 0) && (RT == PC_REG)) { //MUL //A8-212
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
            }
            else if((op1 == 0) && (op2 == 1)) { //MLS //A8-192
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, RT, LREG_TMP1, 0, RD, 0, 0, 0);
            }
            else if((op1 == 1) && (RT != PC_REG)) { //SMLA<x> <y> //A8-330
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              if(!b21) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
              }
              else 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0);
              
              if(!b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              else 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP2, 0, 0, 0);
              
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RT, LREG_TMP1, 0, RD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //get carry
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            }
            else if((op1 == 1) && (RT == PC_REG)) { //SMUL<x> <y> //A8-354
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(!b21) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
              }
              else 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0);

              if(!b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              else 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
            }
            else if((op1 == 2) && !b21 && (RT != PC_REG)) { //SMLAD //A8-332
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RT, LREG_TMP1, 0, RD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //get carry
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            }
            else if((op1 == 2) && !b21 && (RT == PC_REG)) { //SMUAD //A8-332
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP2, 0, RD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //get carry
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            }
            else if((op1 == 3) && !b21 && (RT != PC_REG)) { //SMLAW <y> //A8-340
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              if(!b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RT, LREG_TMP1, 0, RD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //get carry
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            }
            else if((op1 == 3) && !b21 && (RT == PC_REG)) { //SMULW <y> //A8-358
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(!b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 16, RD, 0, 0, 0);
            }
            else if((op1 == 4) && !b21 && (RT != PC_REG)) { //SMLSD //A8-342
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RT, LREG_TMP1, 0, RD, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0); //get carry
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 1, LREG_Q_FLAG, 0, 0, 0); //Int Q Flag
            }
            else if((op1 == 4) && !b21 && (RT == PC_REG)) { //SMUSD //A8-360
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP1, 0, RD, 0, 0, 0);
            }
            else if((op1 == 5) && !b21 && (RT != PC_REG)) { //SMMLA //A8-346
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RT, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 31, LREG_TMP2, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              }

              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RD, 0, 0, 0);
            }
            else if((op1 == 5) && !b21 && (RT == PC_REG)) { //SMMUL //A8-350
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 31, LREG_TMP2, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              }

              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RD, 0, 0, 0);
            }
            else if((op1 == 6) && !b21) { //SMMLS //A8-348
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RT, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP2, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 31, LREG_TMP2, 0, 0, 0);  

                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              }

              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RD, 0, 0, 0);
            }
            else if((op1 == 7) && (op2 == 0) && (RT != PC_REG)) { //USADA8 //A8-502
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, RT, LREG_TMP1, 0, RD, 0, 0, 0);
            }
            else if((op1 == 7) && (op2 == 0) && (RT == PC_REG)) { //USAD8 //A8-500
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE

              CrackInst::setup(rinst, iAALU, OP_S64_AND, RN, 0, 0xFF, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, RM, 0, 0xFF, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 8, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 8, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 16, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 16, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RN, 0, 24, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SRL, RM, 0, 24, LREG_TMP3, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP3, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, LREG_TMP4, 0, RD, 0, 0, 0);
            }
            else 
              OOPS("Instruction in Multiply, multiply accumulate, and absoulte difference space is UNDEFINED.\n");
          } //end always
      } //end Multiply, multiply accumulate, and absoulte difference
      else if(!b10 && b9 && b8 && b7) { //Long multiply, long multiply accumulate, and divide //A6-39
        uint8_t op1 = (insn>>4) & 0x7;
        uint8_t op2 = (insn>>20) & 0xF;
     
          if(cond != AL) { //not always
            if((op1 == 0) && (op2 == 0)) { //SMULL //A8-356 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RT, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 1) && (op2 == PC_REG)) { //SDIV //A8-310 //ARMv7-R //UNDEFINED in ARMv7-A
              OOPS("WARNING: Signed Divide (SDIV) in Long multiply, long multiply accumulate, and divide is UNDEFINED.\n");
            }
            else if((op1 == 2) && (op2 == 0)) { //UMULL //A8-486 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RT, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 3) && (op2 == PC_REG)) { //UDIV //A8-468 //ARMv7-R //UNDEFINED in ARMv7-A
              OOPS("WARNING: Unsigned Divide (UDIV) in Long multiply, long multiply accumulate, and divide is UNDEFINED.\n");
            }
            else if((op1 == 4) && (op2 == 0)) { //SMLAL //A8-334 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, RT, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RT, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 4) && b23 && !b22) { //SMLAL<x> <y> //A8-336 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              if(!b21) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0);
              
              if(!b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP2, 0, 0, 0);
              
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              
              //Construct 64-bit accumulate
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, RT, 0, LREG_TMP2, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RT, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 4) && ((op2 == 12) || (op2 == 13))) { //SMLALD //A8-338 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }

              //form 64-bit accumulator
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S64_OR, RT, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 

              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RT, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 5) && ((op2 == 12) || (op2 == 13))) { //SMLSLD //A8-344 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }

              //form 64-bit accumulator
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S64_OR, RT, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 

              CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RT, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 6) && (op2 == 0)) { //UMLAL //A8-484 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, RT, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RT, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else if((op1 == 6) && (op2 == 6)) { //UMAAL //A8-482 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, RD, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, RT, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, RT, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, RD, 0, RD, 0, 0, 0);
            }
            else
              OOPS("WARNING: Instruction in Long multiply, long multiply accumulate, and divide is UNDEFINED.\n");
          } //end not always
          else { //always
            if((op1 == 0) && (op2 == 0)) { //SMULL //A8-356 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RD, 0, 0, 0);
            }
            else if((op1 == 1) && (op2 == PC_REG)) { //SDIV //A8-310 //ARMv7-R //UNDEFINED in ARMv7-A
              OOPS("WARNING: Signed Divide (SDIV) in Long multiply, long multiply accumulate, and divide is UNDEFINED.\n");
            }
            else if((op1 == 2) && (op2 == 0)) { //UMULL //A8-486 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RD, 0, 0, 0);
            }
            else if((op1 == 3) && (op2 == PC_REG)) { //UDIV //A8-468 //ARMv7-R //UNDEFINED in ARMv7-A
              OOPS("WARNING: Unsigned Divide (UDIV) in Long multiply, long multiply accumulate, and divide is UNDEFINED.\n");
            }
            else if((op1 == 4) && (op2 == 0)) { //SMLAL //A8-334 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, RT, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RD, 0, 0, 0);
            }
            else if((op1 == 4) && b23 && !b22) { //SMLAL<x> <y> //A8-336 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              if(!b21) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0);
              
              if(!b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
              }
              else
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP2, 0, 0, 0);
              
              CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              
              //Construct 64-bit accumulate
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, RT, 0, LREG_TMP2, 0, 0, 0);
  
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, RD, 0, 0, 0);
            }
            else if((op1 == 4) && ((op2 == 12) || (op2 == 13))) { //SMLALD //A8-338 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }

              //form 64-bit accumulator
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S64_OR, RT, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 

              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, RD, 0, 0, 0);
            }
            else if((op1 == 5) && ((op2 == 12) || (op2 == 13))) { //SMLSLD //A8-344 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              if(b20) {
                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }
              else {
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RN, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SLL, RM, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0); 

                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0); //product1
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RN, 0, 16, LREG_TMP1, 0, 0, 0); 
                CrackInst::setup(rinst, iAALU, OP_S32_SRA, RM, 0, 16, LREG_TMP3, 0, 0, 0); 
                CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0); //product2
              }

              //form 64-bit accumulator
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP3, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S64_OR, RT, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0); 

              CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP1, 0, 32, RD, 0, 0, 0);
            }
            else if((op1 == 6) && (op2 == 0)) { //UMLAL //A8-484 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0); 
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, RD, 0, 32, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, RT, 0, LREG_TMP2, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RD, 0, 0, 0);
            }
            else if((op1 == 6) && (op2 == 6)) { //UMAAL //A8-482 //ARMv6T2
              //If RD == STACKPTR or RD == PC_REG, UNPREDICTABLE
              //If RM == STACKPTR or RM == PC_REG, UNPREDICTABLE
              //If RN == STACKPTR or RN == PC_REG, UNPREDICTABLE
              //If RT == STACKPTR or RT == PC_REG, UNPREDICTABLE
              //If RT == RD, UNPREDICTABLE

              CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, RN, RM, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, RD, 0, LREG_TMP1, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, RT, 0, LREG_TMP1, 0, 0, 0);

              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP2, 0, RT, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, RD, 0, 0, 0);
            }
            else
              OOPS("WARNING: Instruction in Long multiply, long multiply accumulate, and divide is UNDEFINED.\n");
          } //end always
      } //end Long multiply, long multiply accumulate, and divide
      else if(b10) { //Coprocessor instruction //A6-40
        uint8_t op1 = (insn>>4) & 0x3F;
        uint8_t op = b20;
        uint8_t coproc = (insn>>24) & 0xF;

        if(((!b9 && !b8 && !b7 && b5) || (!b9 && !b8 && b7) || (!b9 && b8)) && ((coproc == 10) || (coproc == 11))) { //Advanced SIMD, VFP Extension register load/store A7-26
          OOPS("WARNING: Instruction is UNDEFINED.\n");
        }
        else if(((!b9 && !b8 && !b7 && b5 && !b4) || (!b9 && !b8 && b7 && !b4) || (!b9 && b8 && !b4)) && !((coproc == 10) || (coproc == 11))) { //Store Coprocessor STC/STC2 //A8-372
          OOPS("WARNING: STC/STC2 is NOT IMPLEMENTED.\n");
        } //end Store Coprocessor STC/STC2 
        else if(((!b9 && !b8 && !b7 && b5 && b4) || (!b9 && !b8 && b7 && b4) || (!b9 && b8 && b4)) && !((coproc == 10) || (coproc == 11)) && (RN != PC_REG)) { //Load Coprocessor (imm)LDC/LDC2 //A8-106
          OOPS("WARNING: LDC/LDC2 (imm) is NOT IMPLEMENTED.\n");
        } //end Load Coprocessor (imm)LDC/LDC2
        else if(((!b9 && !b8 && !b7 && b5 && b4) || (!b9 && !b8 && b7 && b4) || (!b9 && b8 && b4)) && !((coproc == 10) || (coproc == 11)) && (RN == PC_REG)) { //Load Coprocessor (imm) LDC/LDC2 (literal) //A8-108
          OOPS("WARNING: LDC/LDC2 (literal) is NOT IMPLEMENTED.\n");
        } //end Load Coprocessor (imm) LDC/LDC2 (literal)
        else if(!b9 && !b8 && !b7 && !b6 && !b5) { //UNDEFINED
          OOPS("WARNING: Instruction in Coprocessor Instructions is UNDEFINED.\n");
        }
        else if((!b9 && !b8 && !b7 && b6 && !b5) && ((coproc == 10) || (coproc == 11))) { //Advanced SIMD,VFP 64-bit transfers between ARM core and extension registers //A7-32
          OOPS("WARNING: Instruction in Coprocessor Instructions is UNDEFINED.\n");
        }
        else if((op1 == 4) & !((coproc == 10) || (coproc == 11))) { //MCRR/MCRR2 //A8-188
          OOPS("WARNING: MCRR/MCRR2 is NOT IMPLMENTED.\n");
        } //end MCRR/MCRR2
        else if((op1 == 5) & !((coproc == 10) || (coproc == 11))) { //MRRC2 //A8-204 //Encoding T2
          //If RT == PC_REG or RN == PC_REG or RN == RT, UNPREDICTABLE
          //If RT == STACKPTR or RN == STACKPTR, UNPREDICTABLE
          //uint8_t coproc = (insn>>24) & 0xF;
          //uint8_t CRM = (insn>>16) & 0xF;
          //uint8_t opc1 = (insn>>5) & 0x7;
          //uint8_t opc2 = (insn>>21) & 0x7;

        } //end MRRC/MRRC2
        else if((b9 && !b8) && !op && ((coproc == 10) || (coproc == 11))) { //VFP data-processing Instructions //A7-24
          OOPS("WARNING: Instruction in Coprocessor Instructions is UNDEFINED.\n");
        }
        else if((b9 && !b8) && !op && !((coproc == 10) || (coproc == 11))) { //Coprocessor data-processing Instructions CDP/CDP2 //A8-68
          OOPS("WARNING: CDP/CDP2 is NOT IMPLEMENTED.\n");
        } //end Coprocessor data-processing Instructions
        else if((b9 && !b8) && op && ((coproc == 10) || (coproc == 11))) { //8/16/32-bit transfers btwn ARM core and extension registers //A7-31
          OOPS("WARNING: Instruction in Coprocessor Instructions is UNDEFINED.\n");
        }
        else if((b9 && !b8 && !b4) && op && !((coproc == 10) || (coproc == 11))) { //MCR/MCR2 //A8-186
          OOPS("WARNING: MCR/MCR2 is NOT IMPLEMENTED.\n");
        } //end MCR/MCR2
        else if((b9 && !b8 && b4) && op && !((coproc == 10) || (coproc == 11))) { //MRC2 //A8-202 //Encoding T2
          uint8_t coproc = (insn>>24) & 0xF;
          uint8_t CRN = insn & 0xF;
          uint8_t CRM = (insn>>16) & 0xF;
          uint8_t opc1 = (insn>>5) & 0x7;
          uint8_t opc2 = (insn>>21) & 0x7;

          //If RT == STACKPTR, UNPREDICTABLE

            if(cond != AL) { //not always
              CrackInst::setup(rinst, iAALU, OP_S64_COPYPCL, 0, 0, static_cast<uint32_t>(PC+4), LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
              CrackInst::setup(rinst, iBALU_RBRANCH, negrbranchArray[cond], LREG_TMP3, LREG_TMP3, 0, 0, 0, 0, 0);
            } //end not always

            if(RT != PC_REG) {
              if(coproc == 15) { //System Coprocessor
                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);
    
                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
    
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, 0, CRN, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, 0, CRM, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((opc1 << 3) | opc2), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_MRC, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

    
                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, RT, 0, 0, 0);
              }
            }
            else { //Write to LREG_ICC
              if(coproc == 15) {
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);
    
                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
    
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, 0, CRN, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, 0, CRM, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, static_cast<uint32_t>((opc1 << 3) | opc2), LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, LREG_TMP1, LREG_TMP2, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_MRC, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

    
                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_PUTICC, LREG_TMP1, 0, 0, LREG_ICC, 1, 0, 0);
              }
            }
        } //end MRC2
        else if(b9 && b8) { //Advanced SIMD data-processing instructions //A7-10
          if(!b7) { //Three reg of the same length //A7-12
            uint8_t A = (insn>>24) & 0xF;
            uint8_t C = (insn>>4) & 0x3;

            uint8_t size = (insn>>4) & 0x3;

            switch(A) {
              case 0:
                if(!b20) { //Vector Halving Add VHADD //A8-600
                  switch(size) {
                    case 0:
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 1:
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 2:
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                        } //end always
                      break;
                  }
                }
                else { //Vector Saturating Add VQADD //A8-700
                  switch(size) {
                    case 0: //8-bit

                        if(cond != AL) { //not always
                          //First Byte
                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Second Byte 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Third Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fourth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fifth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Sixth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Seventh Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Eighth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP7, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          //First Byte
                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Second Byte 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Third Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fourth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fifth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Sixth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Seventh Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Eighth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end always
                      break;
                    case 1: //16-bit
                        if(cond != AL) { //not always
                          //First Halfword
                          CrackInst::setup(rinst, iAALU, OP_U16_SADD, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U16_SADD, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Second Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Third Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fourth Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP7, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          //First Halfword
                          CrackInst::setup(rinst, iAALU, OP_U16_SADD, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U16_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Second Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Third Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fourth Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end always
                      break;
                    case 2: //32-bit
  
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U32_SADD, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U32_SADD, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U32_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP7, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U32_SADD, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U32_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U32_SADD, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_SADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end always
                      break;
                    case 3: //64-bit
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_SADD, VN, VM, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U64_SADD, VN1, VM1, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP5, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, VD1, 0, VD1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_SADD, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U64_SADD, VN1, VM1, 0, VD1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end always
                      break;
                  }
                }
                break;
              case 1:
                if(!b20) { //Vector Rounding Halving Add //VRHADD //A8-734
                  switch(size) {
                    case 0:
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1:
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
  
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2:
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
  
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        }
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                else {
                  switch(C) {
                    case 0: //Vector XOR VEOR //A8-596
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_XOR, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_XOR, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_XOR, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S64_XOR, VN1, VM1, 0, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 1: //Vector Bitwise Select VBSL //A8-550
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, VD, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VM, VD, 0, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VM1, VD1, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VM1, VD1, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //Vector Bitwise Insert if True VBIT //A8-550
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VN, VM, 0, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 3: //Vector Bitwise Insert if False VBIF //A8-550
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, VM, 0, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, VM1, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                break;
              case 2:
                if(!b20) { //Vector Halving Sub VHSUB //A8-600
                  switch(size) {
                    case 0:
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 1:
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 2:
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN1, VM1, 0, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, VD1, 0, 0, 0);  
                        } //end always
                      break;
                  }
                }
                else { //Vector Saturating Sub VQSUB //A8-724
                  switch(size) {
                    case 0: //8-bit
  
                        if(cond != AL) { //not always
                          //First Byte
                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Second Byte 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Third Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fourth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fifth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Sixth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Seventh Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Eighth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP7, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          //First Byte
                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Second Byte 
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Third Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fourth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fifth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Sixth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Seventh Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Eighth Byte
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end always
                      break;
                    case 1: //16-bit
  
                        if(cond != AL) { //not always
                          //First Halfword
                          CrackInst::setup(rinst, iAALU, OP_U16_SSUB, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U16_SSUB, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Second Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Third Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fourth Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP7, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          //First Halfword
                          CrackInst::setup(rinst, iAALU, OP_U16_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U16_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Second Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Third Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          //Fourth Halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U16_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end always
                      break;
                    case 2: //32-bit
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U32_SSUB, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U32_SSUB, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U32_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP7, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U32_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U32_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_U32_SSUB, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_SSUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 2, LREG_TMP3, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP3, 0, 1, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end always
                      break;
                    case 3: //64-bit
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_SSUB, VN, VM, 0, LREG_TMP6, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U64_SSUB, VN1, VM1, 0, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP6, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP7, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_SSUB, VN, VM, 0, VD, 0, 0, 0);  

                          if(b22)
                            CrackInst::setup(rinst, iAALU, OP_U64_SSUB, VN1, VM1, 0, VD1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 2, LREG_TMP1, 0, 0, 0); //get carry
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 1, LREG_TMP1, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_GETICC, VD1, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 2, LREG_TMP2, 0, 0, 0); //get carry
                            CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 1, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          }

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 27, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                        } //end always
                      break;
                  }
                }
                break;
              case 3:
                if(!b20) { //Vector Compare Greater Than VCGT VCGT(reg) //A8-560
                  switch(size) { 
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                else { //Vecor Compare Greater Than or Equal VCGTE(reg) //A8-556
                  switch(size) { 
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                break;
              case 4:
                if(!b20) { //Vector Shift Left VSHL (reg) //A8-752
                  switch(size) {
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP6, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 3: //64-bit
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                else { //Vector Saturating Shift Left  VQSHL (reg) //A8-718
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | (b22<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQSHL, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                  }
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    

                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    } //end always
                }
                break;
              case 5:
                if(!b20) { //Vector Rounding Shift Left VRSHL //A8-736
                  switch(size) {
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP8, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP8, 0, 32, LREG_TMP8, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP8, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP8, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP8, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP8, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP8, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP8, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP8, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP8, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 1, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP8, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 3: //64-bit
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM1, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRA, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, 0, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_POS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 1, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, 1, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, LREG_TMP5, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP7, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP7, 0, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM1, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                else { //Vector Saturating Rounding Shift Left VQRSHL //A8-714
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | (b22<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQRSHL, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                  }
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    

                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    } //end always
                }
                break;
              case 6: //Vector Max or Min VMAX/VMIN (int) //A8-630
                switch(size) {
                  case 0: //8-bit
                    if(!b20) { //Max
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    }
                    else { //Min
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    }
                    break;
                  case 1: //16-bit
                    if(!b20) { //Max
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    }
                    else { //Min
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    }
                    break;
                  case 2: //32-bit
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                    if(!b20) { //Max
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    }
                    else { //Min
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    }
                    break;
                }
                break;
              case 7:
                if(!b20) { //Vector Absolute difference VABD (signed, int) //A8-528 //Encoding T1
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | (b22<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VABD, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b22)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    } //end always
                }
                else { //Vector Absoulte difference and accumulate VABA //A8-526 //Encoding T1
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | (b22<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b12<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VABA, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b22)
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    } //end always
                }
                break;
              case 8:
                if(!b20) { //Vector Sub VSUB (int) //A8-788
                  switch(size) {
                    case 0:
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, VM, 0, VD, 0, 0, 0);  

                          if(b6) 
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 1:
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN, VM, 0, VD, 0, 0, 0);  

                          if(b6) 
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 2:
  
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN, VM, 0, VD, 0, 0, 0);  

                          if(b6) 
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 3:
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, VN, VM, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b6) {
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, VN1, VM1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_SUB, VN, VM, 0, VD, 0, 0, 0);  

                          if(b6) 
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, VN1, VM1, 0, VD1, 0, 0, 0);  
                        } //end always
                      break;
                  }
                }
                else { //Vector Compare Equal VCEQ (reg) //A8-552 //Encoding T1
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                break;
              case 9:
                if(!b20) { //Vector Multiply Subtract VMLS (int) //A8-634
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                  }
                }
                else { //Vector multiply VMUL (polynomial) //A8-662 //Encoding T1
                  if(size == 0) {
                    // push r0 (it will have SYSMEM for the syscall (arg1), r7
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 12, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b22<<1) | 1), 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VD1, 0, 0, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                    }
                    else {
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    }

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VMULPOLY, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);

                    // pop LREG_R0, r7
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                        if(b22)
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                      } //end always
                  }
                }
                break;
              case 10: //Vector Pairwise Max or Min VPMAX/VPMIN (int) A8-690
                if(!b20) { //Max
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_UG, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                  }
                }
                else { //Min
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U08_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NOTC_OR_Z, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        } //end always
                      break;
                  }
                }
                break;
              case 11:
                if(!b20) { //Vector Saturating Rounding Doubling Multiply Returning High half VQRDMULH //A8-712 //Encoding T1
                  // push r0 (it will have SYSMEM for the syscall (arg1), r7
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((0<<5) | (0<<4) | (1<<3) | (b22<<2) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                  }
                  else {
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((0<<4) | (1<<3) | size), 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQDMULH, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                  if(b22) {
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                  }
                  else
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                  // pop r0, r7
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                  CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    

                  CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    } //end always
                }
                break;
              case 13:
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                if(!b20 && !b5) { //Vector Pairwise Add VPADD (fp) //A8-686
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    } //end not always
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                }
                else if(!b20 && b5) { //Vector Absolute Difference VABD (fp) //A8-530
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
  
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    } //end always
                } 
                else if(b20 && !b5) { //Vector Multiply VMUL (fp) //A8-664
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    } //end always
                }
                break;
              case 14:
                if(!b20 && !b5) { //Vector Compare greater than or equal VCGE (reg) //A8-556 //Encoding T2
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    } //end always
                }
                if(!b20 && b5) { //Vector Compare greater than VCGT (reg) //A8-560  //Encoding T2
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    } //end always
                }
                else if(b20) { //Vector Absolute Compare Greater or Less Than (or Equal) //VACGE/VACGT/VACLE/VACLT //A8-534
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  

                  if(!b5) 
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  

                  if(!b5) 
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  

                        if(!b5) 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  

                        if(!b5) 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  

                        if(!b5) 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP3, 0, LREG_R0, 0, 0, 1);  

                        if(!b5) 
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        else
                          CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      }
                    } //end always
                }
                break;
              case 15:
                if(!b20) { //Vector Pairwise Max or Min VPMAX/VPMIN (fp) //A8-692
                  CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_R0, 0, 0, 1);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_R0, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                  if(!b5) { //VMAX
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_CS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                  }
                  else { //VMIN
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                    } //end not always
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                }
                break;
            }
          } //end Three reg of the same length
          else if(b7 && !b5 && !b4 && !b3) { //One reg and a modified imm //A7-21
            uint8_t cmode = (insn>>24) & 0xF;
            uint32_t VECTOR_IMM = (((insn>>12) & 0x1) << 7) | ((insn & 0x7) << 4) | ((insn>>16) & 0xF);

            switch(cmode) {
              case 0:
              case 1:
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                break;
              case 2:
              case 3:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 40, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 4:
              case 5:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 6:
              case 7:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 8:
              case 9:
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 10:
              case 11:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 12:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 13:
                //UNPREDICTABLE if VECTOR_IMM == 0;
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                break;
              case 14:
                if(!b21) {
                  CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, VECTOR_IMM, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                }
                else {
                  if(b12) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);  
                  }
                  else 
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0, LREG_TMP1, 0, 0, 0);  

                  if(b2) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b1) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b0) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b19) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b18) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b17) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }

                  if(b16) {
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF), LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }
                }
                break;
              case 15:
                if(!b21) {
                  if(b2) {
                    uint32_t mod_imm = (b12<<15) | (0x1F << 13) | ((insn & 0x3) << 7) | (((insn>>16) & 0xF) << 3);
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(mod_imm), LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }
                  else {
                    uint32_t mod_imm = (b24 << 15) | (1 << 14) | ((insn & 0x3) << 7) | (((insn>16) & 0xF) << 3);
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(mod_imm), LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  }
                }
                else{
                  OOPS("WARNING: Instruction is UNDEFINED in 1reg and a modified immediate space.\n");
                }
                break;
            }

            if(!b21) {
              if(b24 && (b27 && b26)) { //Vector Or VORR (imm) //A8-678
  
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, VD, LREG_TMP1, 0, VD, 0, 0, 0);  

                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, VD1, LREG_TMP1, 0, VD1, 0, 0, 0);  
                  } //end always
              }
              else { //Vector move VMOV (imm) //A8-640 //Encoding T1
  
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //FIXME: RAT/ROB move?
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //FIXME: RAT/ROB move?
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VD, 0, 0, 0); //FIXME: RAT/ROB move?

                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VD1, 0, 0, 0); //FIXME: RAT/ROB move?
                  } //end always
              }
            }
            else {
              if(!b24 || (b27 && b26)) { //Vector not VMVN (imm) //A8-668
                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_S64_XOR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                  } //end always
              }
              else if(b24 || !(b27 && b26)) { //Vector Bit Clear VBIC (imm) //A8-546
  
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                    if(b6) {
                      CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                        if(b6) {
                          CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP1, 0, VD, 0, 0, 0);  

                        if(b6) 
                          CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP1, 0, VD1, 0, 0, 0);  
                      } //end always
                  } //end always
              }
              else if(cmode == 14) { //Vector move VMOV (imm) //A8-640
  
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //FIXME: RAT/ROB move?
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP2, 0, 0, 0); //FIXME: RAT/ROB move?
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VD, 0, 0, 0); //FIXME: RAT/ROB move?

                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VD1, 0, 0, 0); //FIXME: RAT/ROB move?
                  } //end always
              }
              else if(b27 && b26 && b25 && b24) { //UNDEFINED
                OOPS("WARNING: Instruction in One reg and a modified imm is UNDEFINED.\n");
              }
            }
          } //end One reg and a modified imm 
          else if(b7 && b20) { //Two reg and a shift amount //A7-17
            uint8_t A = (insn>>24) & 0xF;
            uint32_t IMM6 = (b23 << 7) | (insn & 0x3F);
            uint8_t shift_amount = 0; 
            uint8_t round; 
            uint8_t size = 0xFF; //force initialization  

            switch(A) {
              case 0: //Vector Shift Right VSHR //A8-756
                if(b23) //64-bits
                  shift_amount = 64-IMM6;
                else if (!b23 && b5) //32-bits
                  shift_amount = 64-IMM6;
                else if(!b23 && !b5 && b4) //16-bits
                  shift_amount = 32-IMM6;
                else if(!b23 && !b5 && !b4 && b3) //8-bits
                  shift_amount = 16-IMM6;

                if(b23) { //64-bits
  
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, shift_amount, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                    } //end always
                }
                else if (!b23 && b5) { //32-bits
  
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, shift_amount, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                    } //end always
                }
                else if(!b23 && !b5 && b4) { //16-bits
  
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM, 0, shift_amount, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                    } //end always
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
  
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM, 0, shift_amount, VD, 0, 0, 0);

                      if(b22)
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM1, 0, shift_amount, VD1, 0, 0, 0);
                    } //end always
                }
                break;
              case 1: //Vector Shift right and accumulate VSRA //A8-764
                if(b23) //64-bits
                  shift_amount = 64-IMM6;
                else if (!b23 && b5) //32-bits
                  shift_amount = 64-IMM6;
                else if(!b23 && !b5 && b4) //16-bits
                  shift_amount = 32-IMM6;
                else if(!b23 && !b5 && !b4 && b3) //8-bits
                  shift_amount = 16-IMM6;

                if(b23) { //64-bits
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if (!b23 && b5) { //32-bits
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && b4) { //16-bits
                  CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                  
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                break;
              case 2: //Vector Rounding Shift right VRSHR //A8-738
                if(b23) //64-bits
                  shift_amount = 64-IMM6;
                else if (!b23 && b5) //32-bits
                  shift_amount = 64-IMM6;
                else if(!b23 && !b5 && b4) //16-bits
                  shift_amount = 32-IMM6;
                else if(!b23 && !b5 && !b4 && b3) //8-bits
                  shift_amount = 16-IMM6;

                round = 1 << (shift_amount -1);

                if(b23) { //64-bits
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if (!b23 && b5) { //32-bits
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && b4) { //16-bits
                  CrackInst::setup(rinst, iAALU, OP_U16_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
  
                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                  CrackInst::setup(rinst, iAALU, OP_U08_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, shift_amount, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, shift_amount, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                break;
              case 3: //Vector rounding shift right and accumulate VRSRA //A8-746
                if(b23) //64-bits
                  shift_amount = 64-IMM6;
                else if (!b23 && b5) //32-bits
                  shift_amount = 64-IMM6;
                else if(!b23 && !b5 && b4) //16-bits
                  shift_amount = 32-IMM6;
                else if(!b23 && !b5 && !b4 && b3) //8-bits
                  shift_amount = 16-IMM6;

                round = 1 << (shift_amount -1);

                if(b23) { //64-bits
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if (!b23 && b5) { //32-bits
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && b4) { //16-bits
                  CrackInst::setup(rinst, iAALU, OP_U16_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                  CrackInst::setup(rinst, iAALU, OP_U08_ADD, VM, 0, round, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, VM1, 0, round, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                break;
              case 4: //Vector shift right and insert VSRI //A8-766
                if(b23) //64-bits
                  shift_amount = 64-IMM6;
                else if (!b23 && b5) //32-bits
                  shift_amount = 64-IMM6;
                else if(!b23 && !b5 && b4) //16-bits
                  shift_amount = 32-IMM6;
                else if(!b23 && !b5 && !b4 && b3) //8-bits
                  shift_amount = 16-IMM6;

                if(b23) { //64-bits
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0); 
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0); 

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if (!b23 && b5) { //32-bits
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && b4) { //16-bits
                  CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_SRL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                break;
              case 5: //Vector shift left and insert VSLI //A8-760
                if(b23) //64-bits
                  shift_amount = IMM6;
                else if (!b23 && b5) //32-bits
                  shift_amount = IMM6 - 32;
                else if(!b23 && !b5 && b4) //16-bits
                  shift_amount = IMM6 - 16;
                else if(!b23 && !b5 && !b4 && b3) //8-bits
                  shift_amount = IMM6 - 8;

                if(b23) { //64-bits
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if (!b23 && b5) { //32-bits
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && b4) { //16-bits
                  CrackInst::setup(rinst, iAALU, OP_S16_SLL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S16_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                  CrackInst::setup(rinst, iAALU, OP_S08_SLL, VM, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S08_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      }
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                      if(b22) {
                        CrackInst::setup(rinst, iAALU, OP_S08_SLL, VM1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S08_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_ANDN, VD1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                      }
                    } //end always
                }
                break;
              case 6: //Vector Saturating shift left VQSHLU (imm) //A8-720
                if(b23) { //64-bits
                  size = 3;
                  shift_amount = IMM6;
                }
                else if(!b23 && b5) { //32-bits
                  size = 2;
                  shift_amount = IMM6 - 32;
                }
                else if(!b23 && !b5 && b4) { //16-bits
                  size = 1;
                  shift_amount = IMM6 - 16;
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                  size = 0;
                  shift_amount = IMM6 - 8;
                }

                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                if(b22) {
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<11) | (b24<<10) | (shift_amount<<4) | (0<<3) | (b22<<2) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<11) | (b24<<10) | (shift_amount<<4) | (0<<3) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQSHL, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                if(b22) {
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                    if(b22)
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                  } //end always
                break;
              case 7: //Vector Saturating shift left VQSHL (imm) //A8-720
                if(b23) { //64-bits
                  size = 3;
                  shift_amount = IMM6;
                }
                else if(!b23 && b5) { //32-bits
                  size = 2;
                  shift_amount = IMM6 - 32;
                }
                else if(!b23 && !b5 && b4) { //16-bits
                  size = 1;
                  shift_amount = IMM6 - 16;
                }
                else if(!b23 && !b5 && !b4 && b3) { //8-bits
                  size = 0;
                  shift_amount = IMM6 - 8;
                }

                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                if(b22) {
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<11) | (b24<<10) | (shift_amount<<4) | (b12<<3) | (b22<<2) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                }
                else {
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<11) | (b24<<10) | (shift_amount<<4) | (b12<<3) | size), 0, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 28, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQSHL, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                if(b22) {
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                }
                else
                  CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    

                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                    }
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                    if(b22)
                      CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                  } //end always
                break;
              case 8:
              case 9:
                //Vector saturating Shift right unsigned narrow VQSHRN/VQSHRUN //A8-716
                //Vector saturating shift right, rounded unsigned narrow //VQSHRN/VQSHRUN //A8-716

                if(b5) { //64-bits
                  size = 3;
                  shift_amount = 64 - IMM6;
                } else if(!b5 && b4) { //32-bits
                  size = 2;
                  shift_amount = 32 - IMM6;
                } else if(!b5 && !b4 && b3) { //16-bits
                  size = 1;
                  shift_amount = 16 - IMM6;
                } else{
                  I(0); // This option should never be taken
                  size = 1;
                  shift_amount = 16 - IMM6;
                }

                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QM, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b24<<10) | (shift_amount<<4) | (b12<<3) | (b22<<2) | size), 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QM1, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQSHRN, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 20, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end always
                break;
              case 10:
                if(!b22 && !b23 && (shift_amount != 0)) { //Vector shift long VSHLL //A8-754 //A8-654 //Encoding T1
                  if(b5) //32-bits
                    shift_amount = IMM6 - 32;
                  else if(!b5 && b4) //16-bits
                    shift_amount = IMM6 - 16;
                  else if(!b5 && !b4 && b3) //8-bits
                    shift_amount = IMM6 - 8;

                  if(b5) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, QD, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, QD1, 0, 0, 0);
                      } //end always
                  }
                  else if(!b5 && b4) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      } //end always
                  }
                  else if(!b5 && !b4 && b3) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, shift_amount, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, shift_amount, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      } //end always
                  }
                }
                else if(!b22 && !b23 && (shift_amount == 0)) { //Vector move long VMOVL //A8-654
                  uint8_t imm3 = (insn>>19) & 0x7;

                  if(imm3 == 1) { //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      } //end always
                  }
                  else if(imm3 == 2) { //16-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                      } //end always
                  }
                  else if(imm3 == 4) { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, QD, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, QD1, 0, 0, 0);
                      } //end always
                  }
                }
                break;
              case 14:
              case 15:
                if(!b23) { //Vector convert VCVT (btwn fp and fixed-point, advanced SIMD) //A8-580
                  OOPS("WARNING: VCVT (between fp and fixed-point, Advanced SIMD) is NOT IMPLEMENTED.\n");
                }
                break;
            }
          } //end Two reg and a shift amount
          else if(((b7 && !b5) || (b7 && b5 && !b4)) && (!b22 && !b20)) { //Three reg of different lengths //A7-15
            uint8_t A = (insn>>24) & 0xF;
            uint8_t size = (insn>>4) & 0x3;
            uint32_t round = 1 << ((8 << size) - 1);
 
            switch(A) {
              case 0: //Vector Add long or wide VADDL/VADDW //A8-542
              case 1:
                if(b24) { //VADDW
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 24, LREG_TMP7, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN, 0, 32, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, QN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, QN1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, QN, LREG_TMP1, 0, QD, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, QN1, LREG_TMP1, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                  }
                }
                else { //VADDL
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 24, LREG_TMP7, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF00, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP7, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 24, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF00, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF00, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF00, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                  }
                }
                break;
              case 2: //Vector Sub Long or wide VSUBL/VSUBW //A8-794
              case 3:
                if(b24) { //VSUBW
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 24, LREG_TMP7, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN, 0, 32, LREG_TMP1, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, QN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN, 0, 32, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QN1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, QN, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, QN1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, QN, LREG_TMP1, 0, QD, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, QN1, LREG_TMP1, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                  }
                }
                else { //VSUBL
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 24, LREG_TMP7, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF00, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP7, 0, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 24, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF00, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF00, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 8, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF00, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 8, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP6, 0, 16, LREG_TMP6, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP6, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF00, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S32_SRL, VM, 0, 32, LREG_TMP4, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                        } //end always
                      break;
                  }
                }
                break;
              case 4: //Vector Rounding Add and Narrow, return High half VRADDHN //A8-540
                switch(size) {
                  case 0: //16-bit elements narrowed down to 8-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S16_ADD, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                    CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, 0, round, LREG_TMP1, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S16_ADD, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 
                    CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP2, 0, round, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 0

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0); //Byte 1
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 2
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 3
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 4
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0); //Byte 5
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 8, LREG_TMP3, 0, 0, 0); //Byte 6
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0); //Byte 7
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                    break;
                  case 1: //32-bit elements narrowed down to 16-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, 0, round, LREG_TMP1, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 
                    CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP2, 0, round, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 0

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0); //Halfword 1
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 2
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0); //Halfword 1
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                    break;
                  case 2: //64-bit elements narrowed down to 32-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, round, LREG_TMP1, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP2, 0, round, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //Word 1
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                      } //end always
                    break;
                  }
                break;
              case 5: //Vector Absolute difference and accumulate VABAL //A8-526
                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1U<<4) | (b12<<3) | (0<<2) | size), 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 16, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 24, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QD1, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VABA, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                // pop LREG_R0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, QD, 0, QD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, QD, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, QD1, 0, 0, 0);
                  } //end always
                break;
              case 6: //Vector Rounding Sub and narrow, return high half VRSHUBHN //A8-748
                switch(size) {
                  case 0: //16-bit elements narrowed down to 8-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 24, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S16_SUB, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                    CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, 0, round, LREG_TMP1, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S16_SUB, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 
                    CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, round, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S16_SRL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 0

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0); //Byte 1
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 2
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 24, LREG_TMP4, 0, 0, 0); //Byte 3
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP3, 0, 0, 0); //Byte 4
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0x00FF0000), LREG_TMP3, 0, 0, 0); //Byte 5
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 8, LREG_TMP3, 0, 0, 0); //Byte 6
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 24, LREG_TMP3, 0, 0, 0); //Byte 7
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                    break;
                  case 1: //32-bit elements narrowed down to 16-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, 0, round, LREG_TMP1, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 
                    CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, round, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S32_SRL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 0

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 16, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0); //Halfword 1
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP3, 0, 0, 0); //Halfword 2
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 16, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0); //Halfword 1
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);
                    break;
                  case 2: //64-bit elements narrowed down to 32-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, QN, QM, 0, LREG_TMP1, 0, 0, 0); //low half of quadword
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, round, LREG_TMP1, 0, 0, 0); 
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, QN1, QM1, 0, LREG_TMP2, 0, 0, 0); //high half of quadword 
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP2, 0, round, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0); //Word 1
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0); 

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                      } //end not always
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);
                    break;
                  }
                break;
              case 7: //Vector absolute difference VABDL (int) //A8-528
                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1U<<4) | (b12<<3) | (0<<2) | size), 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VABD, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, QD, 0, QD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, QD, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, QD1, 0, 0, 0);
                  } //end always
                break;
              case 8: //Vector multiply accumulate or sub VMLAL/VMLSL (int) //A8-634 //Encoding T2
              case 10:
                if(b25) { //VMLSL
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, QD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, QD1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_SUB, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, QD, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, QD1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_SUB, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, QD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, QD1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, QD1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                        } //end always
                      break;
                  }
                }
                else { //VMLAL
                  switch(size) {
                    case 0: //8-bits
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, QD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, QD1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U16_ADD, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 1: //16-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, QD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, QD1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U32_ADD, QD1, LREG_TMP1, 0, QD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 2: //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, QD, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, QD1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, QD, LREG_TMP1, 0, QD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_U64_ADD, QD1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                        } //end always
                      break;
                  }
                }
                break;
              case 12: //Vector multiply VMULL (int) //A8-662 //Encoding T2
                switch(size) {
                  case 0: //8-bits
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 8, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 24, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                      } //end always
                    break;
                  case 1: //16-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);  
                      } //end always
                    break;
                  case 2: //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP2, LREG_TMP3, 0, QD1, 0, 0, 0);  
                      } //end always
                    break;
                }
                break;
            }
          } //end Three reg of different lengths
          else if(((b7 && !b5) || (b7 && b5 && !b4)) && (b22 && !b20)) { //2 reg and a scalar //A7-16
            uint8_t A = (insn>>24) & 0xF;
            uint8_t size = (insn>>4) & 0x3;
            uint8_t index = 0xFF; //force initialization;

            switch(A) {
              case 0: //Vector Multiply Accumulate or Sub VMLA/VMLAL/VMLS/VMLSL (by scalar) //A8-638 //Encoding T1
              case 1:
              case 4:
              case 5:
                VM = ((insn>>16) & 0x7) + LREG_FP0;
                index = (b21<<1) | b19;

                if(!b26) { //VMLA
                  if(b24) { //fp
                    if(size == 1) { //16-bits
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD1, 0, 0, 0);  
                        } //end always
                    }
                    else { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      if(!b21)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        } //end always
                    }
                  }
                  else {
                    if(size == 1) { //16-bits
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                        } //end always
                    }
                    else { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(!b21)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                        } //end always
                    }
                  }
                }
                else { //VMLS
                  if(b24) { //fp
                    if(size == 1) { //16-bits
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD1, 0, 0, 0);  
                        } //end always
                    }
                    else { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                      if(!b21)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 1);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                        } //end always
                    }
                  }
                  else {
                    if(size == 1) { //16-bits
                      switch(index) {
                        case 0: //1st halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 1: //2nd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 2: //3rd halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          break;
                        case 3: //4th halfword
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                          break;
                      }

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                        } //end always
                    }
                    else { //32-bits
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                      if(!b21)
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      else
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                        } //end always
                    }
                  }
                }
                break;
              case 2: //Vector Multiply Accumulate or Sub VMLAL/VMLSL (by scalar) //A8-638 //Encoding T2
              case 6:
                VM = ((insn>>16) & 0x7) + LREG_FP0;
                index = (b21<<1) | b19;

                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                if(!b26) { //VMLA
                  if(size == 1) { //16-bits
                    switch(index) {
                      case 0: //1st halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1: //2nd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2: //3rd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3: //4th halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, QD, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, QD1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                      } //end always
                  }
                  else { //32-bits
                    if(!b21)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, QD, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, QD1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                      } //end always
                  }
                }
                else { //VMLS
                  if(size == 1) { //16-bits
                    switch(index) {
                      case 0: //1st halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1: //2nd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2: //3rd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3: //4th halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, QD, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, QD1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_SMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_SUB, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                      } //end always
                  }
                  else { //32-bits
                    if(!b21)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, QD, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, QD, 0, QD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, QD1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, LREG_TMP1, QD, 0, QD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, QD1, 0, QD1, 0, 0, 0);  
                      } //end always
                  }
                }
                break;
              case 8: //Vector multiply VMUL (by scalar) //A8-666 //Encoding T1
              case 9:
                VM = ((insn>>16) & 0x7) + LREG_FP0;
                index = (b21<<1) | b19;

                if(b24) { //fp
                  if(size == 1) { //16-bits
                    switch(index) {
                      case 0: //1st halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1: //2nd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2: //3rd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3: //4th halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD1, 0, 0, 0);  
                      } //end always
                  }
                  else { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                    if(!b21)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULS, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      } //end always
                  }
                }
                else {
                  if(size == 1) { //16-bits
                    switch(index) {
                      case 0: //1st halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 1: //2nd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 2: //3rd halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        break;
                      case 3: //4th halfword
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD1, 0, 0, 0);  
                      } //end always
                  }
                  else { //32-bits
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                    if(!b21)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    else
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  


                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VN1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN1, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                      } //end always
                  }
                }
                break;
              case 10: //Vector multiply long VMUL/VMULL (by scalar) //A8-666
                VM = ((insn>>16) & 0x7) + LREG_FP0;
                index = (b21<<1) | b19;

                CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                if(size == 1) { //16-bits
                  switch(index) {
                    case 0: //1st halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      break;
                    case 1: //2nd halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      break;
                    case 2: //3rd halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      break;
                    case 3: //4th halfword
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                      break;
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 16, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 48, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);  
                    } //end always
                }
                else { //32-bits
                  if(!b21)
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                  else
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VN, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  

                    if(cond != AL) { //not always
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                    } //end not always
                    else { //always
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VN, 0, 32, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_MULT, OP_C_UMUL, LREG_TMP3, LREG_TMP2, 0, QD1, 0, 0, 0);  
                    } //end always
                }
                break;
              case 12: //Vector saturating doubling multiply returning high half VQDMULH //A8-704 //Encoding T2
                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                if(size == 1) {
                  VM     = ((insn>>16) & 0x7) + LREG_FP0;
                  index  = (b21 << 1) | b19;
                }
                else if(size == 2)
                  index  = b21;

                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((index<<5) | (1<<4) | (0<<3) | (b12<<2) | size), 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQDMULH, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end always
                break;
              case 13: //Vector saturating rounding doubling multiply returning high half VQRDMULH //A8-712 //Encoding T2
                // push r0 (it will have SYSMEM for the syscall (arg1), r7
                if(size == 1) {
                  VM     = ((insn>>16) & 0x7) + LREG_FP0;
                  index  = (b21 << 1) | b19;
                } else if(size == 2) {
                  index  = b21;
                } else {
                  index  = 0;
                  I(0); // This should never happen
                }

                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((index<<5) | (1<<4) | (1<<3) | (b12<<2) | size), 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VN1, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 44, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 52, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQDMULH, 8, 0, 0, 0);
                CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag

                // pop r0, r7
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end not always
                  else { //always
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                  } //end always
                break;
            }
          } //end 2 reg and a scalar
          else if((b7 && b5 && b4) && !b20 && !b27) { //2 reg, misc //A7-19
            uint8_t A = insn & 0x3;
            uint8_t B = (insn>>22) & 0x1F;
            uint8_t size = (insn>>2) & 0x3;
            uint8_t op = (insn>>23) & 0x3;

            switch(A) {
              case 0:
                switch(B) {
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                    //VREV16/32/64 in halfwords/words/doublewords //A8-732
                    switch(op) {
                      case 0: //by doubleword
                        switch(size) { 
                          case 0: //8-bits
                            CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM, 0, 8, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  

                              if(cond != AL) { //not always
                                CrackInst::setup(rinst, iAALU, OP_S64_ROTR, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                                if(b22) {
                                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM1, 0, 8, LREG_TMP1, 0, 0, 0);  
                                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  
                                  CrackInst::setup(rinst, iAALU, OP_S64_ROTR, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                                }
                              } //end not always
                              else { //always
                                CrackInst::setup(rinst, iAALU, OP_S64_ROTR, LREG_TMP1, 0, 32, QD, 0, 0, 0);  

                                if(b22) {
                                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM1, 0, 8, LREG_TMP1, 0, 0, 0);  
                                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  
                                  CrackInst::setup(rinst, iAALU, OP_S64_ROTR, LREG_TMP1, 0, 32, QD1, 0, 0, 0);  
                                }
                              } //end always
                            break;
                          case 1: //16-bits
                            CrackInst::setup(rinst, iAALU, OP_S32_ROTR, VM, 0, 16, LREG_TMP1, 0, 0, 0);  

                              if(cond != AL) { //not always
                                CrackInst::setup(rinst, iAALU, OP_S64_ROTR, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                                if(b22) {
                                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, VM1, 0, 16, LREG_TMP1, 0, 0, 0);  
                                  CrackInst::setup(rinst, iAALU, OP_S64_ROTR, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                                }
                              } //end not always
                              else { //always
                                CrackInst::setup(rinst, iAALU, OP_S64_ROTR, LREG_TMP1, 0, 32, QD, 0, 0, 0);  

                                if(b22) {
                                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, VM1, 0, 16, LREG_TMP1, 0, 0, 0);  
                                  CrackInst::setup(rinst, iAALU, OP_S64_ROTR, LREG_TMP1, 0, 32, QD1, 0, 0, 0);  
                                }
                              } //end always
                            break;
                          case 2: //32-bits
                              if(cond != AL) { //not always
                                CrackInst::setup(rinst, iAALU, OP_S64_ROTR, VM, 0, 32, LREG_TMP1, 0, 0, 0);  
                                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                                if(b22) {
                                  CrackInst::setup(rinst, iAALU, OP_S64_ROTR, VM1, 0, 32, LREG_TMP1, 0, 0, 0);  
                                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                                }
                              } //end not always
                              else { //always
                                CrackInst::setup(rinst, iAALU, OP_S64_ROTR, VM, 0, 32, QD, 0, 0, 0);  

                                if(b22)
                                  CrackInst::setup(rinst, iAALU, OP_S64_ROTR, VM1, 0, 32, QD1, 0, 0, 0);  
                              } //end always
                            break;
                        }
                        break;
                      case 1: //by word
                        switch(size) { 
                          case 0: //8-bits
                            CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM, 0, 8, LREG_TMP1, 0, 0, 0);  

                              if(cond != AL) { //not always
                                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  
                                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                                if(b22) {
                                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM1, 0, 8, LREG_TMP1, 0, 0, 0);  
                                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);  
                                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                                }
                              } //end not always
                              else { //always
                                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, QD, 0, 0, 0);  

                                if(b22) {
                                  CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM1, 0, 8, LREG_TMP1, 0, 0, 0);  
                                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, LREG_TMP1, 0, 16, QD1, 0, 0, 0);  
                                }
                              } //end always
                            break;
                          case 1: //16-bits
                              if(cond != AL) { //not always
                                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, VM, 0, 16, LREG_TMP1, 0, 0, 0);  
                                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                                CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                                if(b22) {
                                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, VM1, 0, 16, LREG_TMP1, 0, 0, 0);
                                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                                }
                              } //end not always
                              else { //always
                                CrackInst::setup(rinst, iAALU, OP_S32_ROTR, VM, 0, 16, QD, 0, 0, 0);  

                                if(b22)
                                  CrackInst::setup(rinst, iAALU, OP_S32_ROTR, VM1, 0, 16, QD1, 0, 0, 0);  
                              } //end always
                            break;
                        }
                        break;
                      case 2: //by halfword
                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM, 0, 8, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM1, 0, 8, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM, 0, 8, QD, 0, 0, 0);  

                            if(b22)
                              CrackInst::setup(rinst, iAALU, OP_S16_ROTR, VM1, 0, 8, QD1, 0, 0, 0);  
                          } //end always
                        break;
                    }
                    break;
                  case 8: //Vector Pairwise add long VPADDL //A8-688
                  case 9:
                  case 10:
                  case 11:
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                            }
                          } //end always
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                        break;
                    }
                    break;
                  case 16: //Vector Count leading sign bits VCLS //A8-566
                  case 17:
                    //OOPS("WARNING: Vector Count Leading Sign Bits (VCLS) is NOT IMPLEMENTED.\n");
                    // push r0 (it will have SYSMEM for the syscall (arg1), r7
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b22<<2) | size), 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                    }
                    else 
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, size, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VCLS, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                    // pop r0, r7
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                        if(b22)
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                      } //end always
                    break;
                  case 18: //Vector count leading zeros VCLZ //A8-570
                  case 19:
                    //OOPS("WARNING: Vector Count Leading Zeros (VCLZ) is NOT IMPLEMENTED.\n");
                    // push r0 (it will have SYSMEM for the syscall (arg1), r7
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b22<<2) | size), 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                    }
                    else 
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, size, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VCLZ, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                    // pop r0, r7
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                        if(b22)
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                      } //end always
                    break;
                  case 20: //Vector Count VCNT //A8-574
                  case 21:
                    //OOPS("WARNING: Vector Count (VCNT) is NOT IMPLEMENTED.\n");
                    // push r0 (it will have SYSMEM for the syscall (arg1), r7
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b22<<2) | size), 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                    }
                    else 
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, size, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VCNT, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                    // pop r0, r7
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                        if(b22)
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                      } //end always
                    break;
                  case 22: //Vector Bitwise NOT VMVN (reg) //A8-670
                  case 23:
                    //Size of the elements does not matter
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_XOR, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S64_XOR, VM1, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_XOR, VM, LREG_TMP1, 0, VD, 0, 0, 0);  

                        if(b22)
                          CrackInst::setup(rinst, iAALU, OP_S64_XOR, VM1, LREG_TMP1, 0, VD1, 0, 0, 0);  
                      } //end always
                    break;
                  case 24: //Vector Pairwise add and accumulate long VPADAL //A8-682
                  case 25:
                  case 26:
                  case 27:
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U08_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U16_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD1, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, VD1, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                        break;
                    }
                    break;
                  case 28: //Vector Saturating Absolute VQABS //A8-698
                  case 29:
                    // push r0 (it will have SYSMEM for the syscall (arg1), r7
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<3) | (b22<<2) | size), 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                    }
                    else 
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((1<<3) | size), 0, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VABS, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag
                    }
                    else 
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP4, 0, 0, 0); //Q flag

                    // pop r0, r7
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    

                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);

                        if(b22)
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                      } //end always
                    break;
                  case 30: //Vector Saturating Negate VQNEG //A8-710
                  case 31:
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            if(!b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                            }
                            else {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            if(!b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                            }
                            else {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S08_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                            }
                          } //end always
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            if(!b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                            }
                            else {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            if(!b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                            }
                            else {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S16_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                            }
                          } //end always
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S32_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            if(!b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                            }
                            else {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S32_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S32_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            if(!b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                            }
                            else {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S32_SSUB, 0, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP1, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S32_SSUB, 0, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_GETICC, LREG_TMP2, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 2, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 1, LREG_TMP5, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                            }
                          } //end always
                        break;
                    }
                  break;
                }
                break;
              case 1:
                if(!b25 && !b24 && !b23) { //Vector Compare Greater than zero //VCGT (imm 0) //A8-562
                  switch(size) { 
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      if(b26) { //fp
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                      }
                      break;
                  }
                }
                else if(!b25 && !b24 && b23) { //Vector compare greater than or equal to zero VCGE (imm 0) //A8-558
                  switch(size) { 
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      if(b26) { //fp
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_L, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                      }
                      break;
                  }
                }
                else if(!b25 && b24 && !b23) { //Vector compare equal to zero VCEQ (imm 0) //A8-554
                  switch(size) { 
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      if(b26) { //fp
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP1, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP2, LREG_R0, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LGU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                      }
                      break;
                  }
                }
                else if(!b25 && b24 && b23) { //Vector compare less than or equal to zero VCLE (imm 0) //A8-564
                  switch(size) { 
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      if(b26) { //fp
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP1, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP1, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP1, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LU, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_G, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                      }
                      break;
                  }
                }
                else if(b25 && !b24 && !b23) { //Vector compare less than zero VCLT (imm 0) //A8-568
                  switch(size) { 
                    case 0: //8-bit
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, VN, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 1: //16-bit
                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                      break;
                    case 2: //32-bit
                      CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                      if(b26) { //fp
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP1, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP1, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP1, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_R0, LREG_TMP2, 0, LREG_R0, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_LUE, LREG_R0, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                      }
                      else {
                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_U64_CMOV_GE, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                      }
                      break;
                  }
                }
                else if(b25 && b24 && !b23) { //Vector absolute VABS //A8-532 //Encoding T1
                  if(b26) { //fp
                    CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iCALU_FPALU, OP_C_FABSS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP2, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);
                        }
                      } //end always
                  }
                  else {
                    // push r0 (it will have SYSMEM for the syscall (arg1), r7
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                    if(b22) {
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b22<<2) | size), 0, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, VM1, 0, 0, 0, 0, 0);
                    }
                    else 
                      CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, size, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VABS, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);

                    if(b22)
                      CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 24, LREG_TMP3, 0, 0, 0);

                    // pop r0, r7
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);

                        if(b22)
                          CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                      } //end always
                  }
                }
                else if(b25 && b24 && b23) { //Vector negate VNEG //A8-672 //Encoding T1
                  switch(size) { 
                    case 0: //8-bits
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM, 0, 0, VD, 0, 0, 0);  

                          if(b22) 
                            CrackInst::setup(rinst, iAALU, OP_S08_SUB, VM1, 0, 0, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 1: //16-bits
                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM, 0, 0, VD, 0, 0, 0);  

                          if(b22) 
                            CrackInst::setup(rinst, iAALU, OP_S16_SUB, VM1, 0, 0, VD1, 0, 0, 0);  
                        } //end always
                      break;
                    case 2: //32-bits
                      if(b26) { //fp
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 1);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iCALU_FPALU, OP_C_FNEGS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                            }
                          } //end always
                      }
                      else {
                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                            if(b6) {
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM, 0, 0, VD, 0, 0, 0);  

                            if(b6) 
                              CrackInst::setup(rinst, iAALU, OP_S32_SUB, VM1, 0, 0, VD1, 0, 0, 0);  
                          } //end always
                      }
                      break;
                  }
                }
                break;
              case 2:
                switch(B) {
                  case 0: //Vector Swap VSWP //A8-796
                  case 1:
                    //If VD == VM, then UNKNOWN
                    CrackInst::setup(rinst, iAALU, OP_S64_ADD, VD, 0, 0, LREG_TMP1, 0, 0, 0);  

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VM, 0, VM, 0, 0, 0);

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VD1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD1, 0, VD1, 0, 0, 0);

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VM1, 0, VM1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM, 0, 0, VD, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VM, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VD1, 0, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, VM1, 0, 0, VD1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, VM1, 0, 0, 0);  
                        }
                      } //end always
                    break;
                  case 2: //Vector Transpose VTRN //A8-800
                  case 3:
                    switch(size) {
                      case 0: //8-bit
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0x00FF00FF), LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, static_cast<uint32_t>(0xFF00FF00), LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP5, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VD, 0, VD, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VM, 0, VM, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VD1, 0, VD1, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 8, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VM1, 0, VM1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VM, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 8, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 8, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VM1, 0, 0, 0);  
                            }
                          } //end always
                        break;
                      case 1: //16-bit
                        CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP5, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VD, 0, VD, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VM, 0, VM, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VD1, 0, VD1, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VM1, 0, VM1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 16, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VM, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP1, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, VD1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VM1, 0, 0, 0);  
                            }
                          } //end always
                        break;
                      case 2: //32-bit
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP4, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP1, 0, LREG_TMP5, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VD, 0, VD, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VM, 0, VM, 0, 0, 0);

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP1, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VD, 0, VD, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VM1, 0, VM1, 0, 0, 0);
                            }
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VM, 0, 0, 0);  

                            if(b22) {
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD1, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VD1, LREG_TMP1, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, VD1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP2, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, VM1, 0, 0, 0);  
                            }
                          } //end always
                        break;
                    }
                    break;
                  case 4: //Vector Unzip VUZP //A8-804
                  case 5:
                    switch(size) {
                      case 0: //8-bit
                        if(!b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  

                            if(cond != AL) { //not always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VM, 0, VM, 0, 0, 0);
                            } //end not always
                            else { //always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VM, 0, 0, 0);  
                            } //end always
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM, 0, 0xFF, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 56, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QD1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 24, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 40, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  

                            if(cond != AL) { //not always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD, 0, QD, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QM, 0, QM, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 24, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 40, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QM1, 0, QM1, 0, 0, 0);
                            } //end not always
                            else { //always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, QM, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 24, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 40, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 24, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 24, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 40, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 40, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 56, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, QM1, 0, 0, 0);  
                            } //end always
                        }
                        break;
                      case 1: //16-bit
                        if(!b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  

                            if(cond != AL) { //not always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VM, 0, VM, 0, 0, 0);
                            } //end not always
                            else { //always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, VD, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VM, 0, 0, 0);  
                            } //end always
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM, 0, 0, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 48, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QD1, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  

                            if(cond != AL) { //not always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD, 0, QD, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QM, 0, QM, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, QD1, 0, QD1, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QM1, 0, QM1, 0, 0, 0);
                            } //end not always
                            else { //always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, QM, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, static_cast<uint32_t>(0xFFFF), LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 48, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, QM1, 0, 0, 0);  
                            } //end always
                        }
                        break;
                      case 2: //32-bit
                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP6, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_ADD, QM, 0, 0, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 32, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QD1, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                            if(cond != AL) { //not always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, QD, 0, QD, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QM, 0, QM, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, QD1, 0, QD1, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QM1, 0, QM1, 0, 0, 0);
                            } //end not always
                            else { //always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, QM, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, QD1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, QM1, 0, 0, 0);  
                            } //end always
                        }
                        break;
                    }
                  break;
                  case 6: //Vector Zip VZIP //A8-806
                  case 7:
                    switch(size) {
                      case 0: //8-bit
                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, VD, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, VM, 0, 32, LREG_TMP6, 0, 0, 0);  

                            if(cond != AL) { //not always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VM, 0, VM, 0, 0, 0);
                            } //end not always
                            else { //always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 48, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VM, 0, 0, 0);  
                            } //end always
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 16, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 16, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP6, 0, 0, 0);  

                            if(cond != AL) { //not always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 48, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_ADD, QD1, 0, 0, LREG_TMP5, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QM, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, QM, 0, QM, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QM1, 0, QM1, 0, 0, 0);
                            } //end not always
                            else { //always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 48, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_ADD, QD1, 0, 0, LREG_TMP5, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QM, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0x00FF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF00, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x00FF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 8, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF00, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 16, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QM1, 0, 0, 0);  
                            } //end always
                        }
                        break;
                      case 1: //16-bit
                        CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 0xFFFF, LREG_TMP7, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 16, LREG_TMP7, 0, 0, 0);  

                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VD, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VD, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  

                            if(cond != AL) { //not always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VM, 0, VM, 0, 0, 0);
                            } //end not always
                            else { //always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, static_cast<uint32_t>(0x0000FFFF), LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, LREG_TMP7, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP4, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VM, 0, 0, 0);  
                            } //end always
                        }
                        else {
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 32, LREG_TMP5, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP6, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 16, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            if(cond != AL) { //not always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_ADD, QD1, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QD1, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, QM, 0, QM, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, LREG_TMP7, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QM1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QM1, 0, QM1, 0, 0, 0);
                            } //end not always
                            else { //always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_ADD, QD1, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0xFFFF, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 16, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QD1, 0, 0, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QM, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 32, LREG_TMP5, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP3, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP5, 0, 16, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, LREG_TMP7, 0, LREG_TMP3, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QM1, 0, 0, 0);  
                            } //end always
                        }
                        break;
                      case 2: //32-bit
                        if(b22) {
                          CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP7, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP7, 0, 32, LREG_TMP7, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QD, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD, 0, 32, LREG_TMP3, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, QD1, 0, 32, LREG_TMP5, 0, 0, 0);  

                            if(cond != AL) { //not always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QD1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP6, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, QM, 0, QM, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, QD1, 0, QD1, 0, 0, 0);
                              CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP6, QM1, 0, QM1, 0, 0, 0);
                            } //end not always
                            else { //always
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QD1, LREG_TMP7, 0, LREG_TMP1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 32, LREG_TMP4, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP6, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QM, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, QD1, 0, 0, 0);  
                              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, QM1, 0, 0, 0);  
                            } //end always
                        }
                        break;
                    }
                    break;
                  case 8: //Vector move and narrow VMOVN //A8-656
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 8, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 24, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 40, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 48, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 56, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                          } //end not always
                          else
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 16, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, QM1, 0, 32, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0xFFFF, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 48, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                          } //end not always
                          else
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, QM1, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                          } //end not always
                          else
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  
                        break;
                    }
                    break;
                  case 9: //Vector saturating move and unsigned narrow VQMOVN/VQMOVUN //A8-708
                  case 10: //Vector saturating move and narrow VQMOVN/VQMOVUN //A8-708
                  case 11:
                    // push r0 (it will have SYSMEM for the syscall (arg1), r7
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 1, 0, 0, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U32_SUB, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_ST_L, STACKPTR , 8, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iRALU, OP_iRALU_move, LREG_SYSMEM, 0, 0, 1, 0, 0, 0);
 
                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 4, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QM, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_TMP1, 0, 8, LREG_TMP1, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, 0, ((b22<<3) | (b23<<2) | size), 0, 0, 0, 0);

                    CrackInst::setup(rinst, iSALU_ADDR, OP_U64_ADD, LREG_SYSMEM, 0, 36, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U64_ST_L, LREG_TMP1, QM1, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, 0, 0, CINST_VQMOVN, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iSALU_ST, OP_U32_STSC, LREG_SYSMEM, 8, 0, 0, 0, 0, 0);

                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 16, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 20, LREG_TMP3, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, LREG_SYSMEM, 0, 32, LREG_TMP4, 0, 0, 0); //Q flag

                    // pop r0, r7
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 8, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
                    CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, STACKPTR , 0, 0, 1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U32_ADD, STACKPTR , 0, 4, STACKPTR, 0, 0, 0);
    
                    CrackInst::setup(rinst, iLALU_LD, OP_U64_LD_L, LREG_TMP4, 0, 0, LREG_TMP4, 0, 0, 0); //FP Q flag
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 27, LREG_TMP4, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_TMP4, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP2, 0, 0, VD, 0, 0, 0);
                        CrackInst::setup(rinst, iLALU_LD, OP_U32_LD_L, LREG_TMP3, 0, 0, VD1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_FSR, 0, LREG_FSR, 0, 0, 0);
                      } //end always
                    break;
                  case 12: //Vector shift left long (max shift) VSHLL //A8-754 //Encoding T2
                    switch(size) {
                      case 0: //8-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF00, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF0000, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 40, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 24, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 40, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 56, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                          } //end always
                        break;
                      case 1: //16-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S32_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 48, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, QD1, 0, 0, 0);
                          } //end always
                        break;
                      case 2: //32-bits
                        CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF;
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);

                          if(cond != AL) { //not always
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD, 0, QD, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, QD1, 0, QD1, 0, 0, 0);
                          } //end not always
                          else { //always
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, QD, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, QD1, 0, 0, 0);
                          } //end always
                        break;
                    }
                    break;
                  case 24: //Vector convert VCVT (btwn half-precision and single-precision, advanced SIMD) //A8-586 //NEEDTODO
                  case 28:
                    OOPS("WARNING: Vector Convert (VCVT) btwn 1/2 precision and single-precision NOT IMPLEMENTED.\n");
                    break;
                }
                break;
              case 3:
                if(b26 && !b25 && !b23) { //Vector Reciprocal Estimate VRECPE //A8-728
                  //FIXME: need to do ERROR checking

                  if(size == 2) {
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                    if(!b24) { //int
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                      //f64
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                      //reciprocal estimate algorithm from QEMU and ARM Architecture Reference Manual
                      //q = (int)(a * 512.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                      //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                      //0.5
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                      //s = (int)(256.0 * r + 0.5)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      //0.5
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                      //return double(s) / 256.0
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 21, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFFFF, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 28, LREG_TMP7, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP7, 0, LREG_TMP8, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP8, 0, LREG_TMP8, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      //f64
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                      //reciprocal estimate algorithm from QEMU and ARM Architecture Reference Manual
                      //q = (int)(a * 512.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                      //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                      //0.5
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                      //s = (int)(256.0 * r + 0.5)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      //0.5
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                      //return double(s) / 256.0
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 21, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFFFF, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 28, LREG_TMP7, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP8, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            //reciprocal estimate algorithm from QEMU and ARM Architecture Reference Manual
                            //q = (int)(a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //s = (int)(256.0 * r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 21, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFFFF, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 28, LREG_TMP7, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP7, 0, LREG_TMP8, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP8, 0, LREG_TMP8, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            //reciprocal estimate algorithm from QEMU and ARM Architecture Reference Manual
                            //q = (int)(a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //s = (int)(256.0 * r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 21, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFFFF, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 28, LREG_TMP7, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP8, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP8, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            //reciprocal estimate algorithm from QEMU and ARM Architecture Reference Manual
                            //q = (int)(a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //s = (int)(256.0 * r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 21, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFFFF, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 28, LREG_TMP7, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP7, 0, LREG_TMP8, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP8, 0, LREG_TMP8, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            //reciprocal estimate algorithm from QEMU and ARM Architecture Reference Manual
                            //q = (int)(a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //s = (int)(256.0 * r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 21, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFFFF, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 28, LREG_TMP7, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP7, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP2, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 32, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP6, LREG_TMP8, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    } //end int
                    else { //fp
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                      //f64
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 29, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                      //a-exp
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);  

                      //result exp
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 253, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  

                      //reciprocal estimate algorithm from QEMU and ARM ARM
                      //q = (int)(a * 512.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                      //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                      //0.5
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                      //s = (int)(256.0 * r + 0.5)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      //0.5
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                      //return double(s) / 256.0
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                      //sign
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 31, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 23, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 29, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFF, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP8, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      //f64
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 29, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                      //a-exp
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);  

                      //result exp
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 253, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  

                      //reciprocal estimate algorithm from QEMU and ARM ARM
                      //q = (int)(a * 512.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                      //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                      //0.5
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                      //s = (int)(256.0 * r + 0.5)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      //0.5
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                      //return double(s) / 256.0
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                      //sign
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 31, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 23, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 29, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFF, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP7, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 32, LREG_TMP7, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP7, LREG_TMP8, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 29, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            //a-exp
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);  

                            //result exp
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 253, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  

                            //reciprocal estimate algorithm from QEMU and ARM ARM
                            //q = (int)(a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //s = (int)(256.0 * r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                            //sign
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 31, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 23, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 29, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFF, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP8, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 29, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            //a-exp
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);  

                            //result exp
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 253, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  

                            //reciprocal estimate algorithm from QEMU and ARM ARM
                            //q = (int)(a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //s = (int)(256.0 * r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                            //sign
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 31, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 23, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 29, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFF, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 32, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP7, LREG_TMP8, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP7, LREG_TMP8, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 29, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            //a-exp
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);  

                            //result exp
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 253, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  

                            //reciprocal estimate algorithm from QEMU and ARM ARM
                            //q = (int)(a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //s = (int)(256.0 * r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                            //sign
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 31, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 23, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 29, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFF, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP8, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 52, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 29, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            //a-exp
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);  

                            //result exp
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 253, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);  

                            //reciprocal estimate algorithm from QEMU and ARM ARM
                            //q = (int)(a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDS, 0, 0, 512, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //r = (int)(1.0 / ((double(q) + 0.5) / 512.0))
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //s = (int)(256.0 * r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 52, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP6, 0, 0, LREG_TMP6, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);  
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP6, LREG_TMP7, 0, LREG_TMP6, 0, 0, 1);  

                            //sign
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 31, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 23, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP6, 0, 29, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0x7FFFFF, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP7, 0, 32, LREG_TMP7, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP7, LREG_TMP8, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    } //end fp
                  }
                } //end VRECPE
                else if(b26 && !b25 && b23) { //Vector Reciprocal square root estimate //A8-742
                  //FIXME: need to do ERROR checking

                  if(size == 2) {
                    CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                    //reciprocal square root estimate algorithm taken from QEMU and ARM Architecture Reference Manual
                    if(!b24) { //int
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x3FFFFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 52, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 28, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                      //0.5
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                      //if(0.25 <= val < 0.5)
                      //q = (int) (a * 512.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                      //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                      //else
                      //q = (int) (a * 256.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                      //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                      //s= (int)(256.0*r + 0.5)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                      //return double(s) / 256.0
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0x8, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0xC, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  
                      
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x3FFFFFFF, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 52, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 28, LREG_TMP5, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                      //if(0.25 <= val < 0.5)
                      //q = (int) (a * 512.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                      //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                      //else
                      //q = (int) (a * 256.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                      //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                      //s= (int)(256.0*r + 0.5)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                      //return double(s) / 256.0
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0x8, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP5, 0, 0, 0); //FIXME: RAT/ROB move?
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0xC, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP3, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);  
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x3FFFFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 52, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 28, LREG_TMP5, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                            //if(0.25 <= val < 0.5)
                            //q = (int) (a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            //else
                            //q = (int) (a * 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                            //s= (int)(256.0*r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0x8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0xC, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x3FFFFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 52, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 28, LREG_TMP5, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            //if(0.25 <= val < 0.5)
                            //q = (int) (a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            //else
                            //q = (int) (a * 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                            //s= (int)(256.0*r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0x8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP5, 0, 0, 0); //FIXME: RAT/ROB move?
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0xC, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP3, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP2, 0, VD, 0, 0, 0);  

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x3FFFFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 52, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 28, LREG_TMP5, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                            //if(0.25 <= val < 0.5)
                            //q = (int) (a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            //else
                            //q = (int) (a * 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                            //s= (int)(256.0*r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0x8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0xC, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP3, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x3FFFFFFF, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 21, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 52, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 28, LREG_TMP5, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            //if(0.25 <= val < 0.5)
                            //q = (int) (a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            //else
                            //q = (int) (a * 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                            //s= (int)(256.0*r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 21, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFFFF, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0x8, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP1, 0, 0, LREG_TMP5, 0, 0, 0); //FIXME: RAT/ROB move?
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP4, 0, 0xC, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 28, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP4, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NE, LREG_TMP3, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP2, 0, 32, LREG_TMP2, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP2, 0, VD1, 0, 0, 0);  
                          }
                        } //end always
                    } //end int
                    else { //fp
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                      //f64
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 60, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 29, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 28, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  

                      //result exp
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 380, LREG_TMP5, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iCALU_DIV, OP_C_UDIV, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);

                      //0.5
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                      //if(0.25 <= val < 0.5)
                      //q = (int) (a * 512.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                      //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                      //else
                      //q = (int) (a * 256.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                      //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                      //s= (int)(256.0*r + 0.5)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                      //return double(s) / 256.0
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 29, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFF, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP7, 0, 0, 0);
                      
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP2, 0, 0, 0);  

                      //f64
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 60, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 29, LREG_TMP5, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 28, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  

                      //result exp
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 380, LREG_TMP5, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iCALU_DIV, OP_C_UDIV, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);

                      //0.5
                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                      CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0); //FIXME:RAT/ROB move?

                      //if(0.25 <= val < 0.5)
                      //q = (int) (a * 512.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                      //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                      //else
                      //q = (int) (a * 256.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                      //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                      //s= (int)(256.0*r + 0.5)
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                      //return double(s) / 256.0
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                      CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 29, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFF, LREG_TMP3, 0, 0, 0);
                      CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);
                      
                      CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                        if(cond != AL) { //not always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP2, VD, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 60, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 29, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 28, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  

                            //result exp
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 380, LREG_TMP5, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iCALU_DIV, OP_C_UDIV, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);

                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                            //if(0.25 <= val < 0.5)
                            //q = (int) (a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            //else
                            //q = (int) (a * 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                            //s= (int)(256.0*r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 29, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFF, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP7, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 60, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 29, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 28, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  

                            //result exp
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 380, LREG_TMP5, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iCALU_DIV, OP_C_UDIV, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);

                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0); //FIXME:RAT/ROB move?

                            //if(0.25 <= val < 0.5)
                            //q = (int) (a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            //else
                            //q = (int) (a * 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                            //s= (int)(256.0*r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 29, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFF, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                          }
                        } //end not always
                        else { //always
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD, 0, 0, 0);

                          if(b22) {
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 60, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 29, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 28, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  

                            //result exp
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 380, LREG_TMP5, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iCALU_DIV, OP_C_UDIV, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);

                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                            //if(0.25 <= val < 0.5)
                            //q = (int) (a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            //else
                            //q = (int) (a * 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                            //s= (int)(256.0*r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 29, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFF, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP7, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP2, 0, 0, 0);  

                            //f64
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 60, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 52, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, 0, 0x7FFFFF, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP5, 0, 29, LREG_TMP5, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP4, LREG_TMP5, 0, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FD, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x8, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 28, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_E, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 0);  

                            //result exp
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x7F800000, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP2, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 380, LREG_TMP5, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP5, LREG_TMP4, 0, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iCALU_DIV, OP_C_UDIV, LREG_TMP4, 0, 2, LREG_TMP4, 0, 0, 0);

                            //0.5
                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, 0, 0, 0x3FE, LREG_TMP6, 0, 0, 0);  
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 52, LREG_TMP6, 0, 0, 0);  

                            CrackInst::setup(rinst, iAALU, OP_S64_ADD, LREG_TMP7, 0, 0, LREG_TMP2, 0, 0, 0); //FIXME:RAT/ROB move?

                            //if(0.25 <= val < 0.5)
                            //q = (int) (a * 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 512.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 512, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP5, LREG_TMP7, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP5, 0, 0, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP5, 0, LREG_TMP5, 0, 0, 1);
                            //else
                            //q = (int) (a * 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            //r = 1.0 / (sqrt(((double)q+0.5) / 256.0)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP7, LREG_TMP6, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP7, LREG_TMP8, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSQRTD, LREG_TMP7, 0, 0, LREG_TMP7, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 1, LREG_TMP8, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP8, LREG_TMP7, 0, LREG_TMP7, 0, 0, 1);

                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSUBS, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP3, LREG_TMP7, 0, LREG_TMP3, 0, 0, 1);

                            //s= (int)(256.0*r + 0.5)
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, 0, 0, 256, LREG_TMP5, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPMULT, OP_C_FMULD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FADDD, LREG_TMP3, LREG_TMP6, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FDTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                            //return double(s) / 256.0
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOD, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                            CrackInst::setup(rinst, iCALU_FPDIV, OP_C_FDIVD, LREG_TMP3, LREG_TMP5, 0, LREG_TMP3, 0, 0, 1);

                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP4, 0, 0xFF, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 23, LREG_TMP4, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 29, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP3, 0, 0x7FFFFF, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP3, LREG_TMP4, 0, LREG_TMP3, 0, 0, 0);

                            CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                            CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD1, 0, 0, 0);
                          }
                        } //end always
                    } //end fp
                  }
                }
                else if(b26 && b25) { //Vector convert VCVT (btwn fp and int, advanced SIMD) //A8-576
                  //FIXME: un/signed conversions
                  //FIXME: round to zero vs round to nearest;
                  //FIXME: exceptions

                  VM = ((b21 << 4) | ((insn>>16) & 0xF)) + LREG_FP0;
                  VD = ((b6 << 4) | ((insn>>28) & 0xF)) + LREG_FP0;

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, 0, 0, 1, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP1, 0, 32, LREG_TMP1, 0, 0, 0); //0xFFFFFFFF;

                  if(b24) { //to int
                    //round to zero
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                    if(b23) //unsigned
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                    else //signed
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);

                    if(b7) //unsigned
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                    else //signed
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          //round to zero
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                          if(b7) //unsigned
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                          else //signed
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);

                          if(b7) //unsigned
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                          else //signed
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD, 0, 0, 0);

                        if(b22) {
                          //round to zero
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                          if(b7) //unsigned
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                          else //signed
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);

                          if(b7) //unsigned
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                          else //signed
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FSTOI, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD1, 0, 0, 0);
                        }
                      } //end always
                  }
                  else { //to FP
                    //round to nearest
                    CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                    if(b23) //unsigned
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                    else //signed
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP3, 0, 0, 0);

                    if(b23) //unsigned
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                    else //signed
                      CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                    CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);

                      if(cond != AL) { //not always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                        CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD, 0, VD, 0, 0, 0);

                        if(b22) {
                          //round to zero
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                          if(b23) //unsigned
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                          else //signed
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);

                          if(b23) //unsigned
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                          else //signed
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP3, 0, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP3, VD1, 0, VD1, 0, 0, 0);
                        }
                      } //end not always
                      else { //always
                        CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD, 0, 0, 0);

                        if(b22) {
                          //round to zero
                          CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP1, 0, LREG_TMP2, 0, 0, 0);

                          if(b23) //unsigned
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);
                          else //signed
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP3, 0, 0, 0);

                          if(b23) //unsigned
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);
                          else //signed
                            CrackInst::setup(rinst, iCALU_FPALU, OP_C_FITOS, LREG_TMP3, 0, 0, LREG_TMP3, 0, 0, 1);

                          CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);
                          CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP2, LREG_TMP3, 0, VD1, 0, 0, 0);
                        }
                      } //end always
                  }
                }
                break;
            }
          } //2 reg, misc
          else if((b7 && b5 && b4) && !b20 && (b27 && !b26)) { //Vector Table Lookup VTBL/VTBX //A8-798
            uint8_t len = (insn>>24) & 0x3;
            uint8_t VN2 = VN1+1;
            uint8_t VN3 = VN2+1;

            switch(len) {
              case 0:
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);

                if(!b22) //VTBL zeroes out by if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                else { //VTBLX leaves byte in VD unchanged if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 3, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);

                for(int i = 1; i < 7; i++) {
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, i*8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);

                  if(!b22) //VTBL zeroes out by if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                  else { //VTBLX leaves byte in VD unchanged if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, i, LREG_TMP1, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 3, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, i*8, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);

                if(!b22) //VTBL zeroes out by if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                else { //VTBLX leaves byte in VD unchanged if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 7, LREG_TMP1, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 3, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, VD, 0, 0, 0);
                break;
              case 1:
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                if(!b22) //VTBL zeroes out by if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                else { //VTBLX leaves byte in VD unchanged if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);

                for(int i = 1; i < 7; i++) {
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, i*8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                  if(!b22) //VTBL zeroes out by if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                  else { //VTBLX leaves byte in VD unchanged if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, i, LREG_TMP1, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, i*8, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                if(!b22) //VTBL zeroes out by if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                else { //VTBLX leaves byte in VD unchanged if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 7, LREG_TMP1, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP5, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP5, 0, VD, 0, 0, 0);
                break;
              case 2:
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN2, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 24, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                if(!b22) //VTBL zeroes out by if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                else { //VTBLX leaves byte in VD unchanged if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);

                for(int i = 1; i < 7; i++) {
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, i*8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN2, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                  if(!b22) //VTBL zeroes out by if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                  else { //VTBLX leaves byte in VD unchanged if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, LREG_TMP1, 0, i, LREG_TMP1, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, i*8, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN2, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 24, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                if(!b22) //VTBL zeroes out by if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                else { //VTBLX leaves byte in VD unchanged if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 7, LREG_TMP1, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, VD, 0, 0, 0);
                break;
              case 3:
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN2, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 24, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN3, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 32, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                if(!b22) //VTBL zeroes out by if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                else { //VTBLX leaves byte in VD unchanged if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0, LREG_TMP1, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP5, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP5, 0, 0xFF, LREG_TMP5, 0, 0, 0);

                for(int i = 1; i < 7; i++) {
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, i*8, LREG_TMP1, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN2, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 24, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN3, 0, LREG_TMP2, 0, 0, 0);

                  CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 32, LREG_TMP3, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                  if(!b22) //VTBL zeroes out by if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                  else { //VTBLX leaves byte in VD unchanged if out of range
                    CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, i, LREG_TMP1, 0, 0, 0);
                  }

                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, i*8, LREG_TMP6, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP5, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP2, VN, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN1, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 16, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN2, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 24, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VN3, 0, LREG_TMP2, 0, 0, 0);

                CrackInst::setup(rinst, iAALU, OP_S64_SUB, LREG_TMP1, 0, 32, LREG_TMP3, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_TMP3, LREG_TMP2, 0, LREG_TMP2, 0, 0, 0);

                if(!b22) //VTBL zeroes out by if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, 0, 0, LREG_TMP2, 0, 0, 0);
                else { //VTBLX leaves byte in VD unchanged if out of range
                  CrackInst::setup(rinst, iAALU, OP_U64_CMOV_NEG, LREG_TMP2, VD, 0, LREG_TMP2, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, OP_U64_ADD, 0, 0, 7, LREG_TMP1, 0, 0, 0);
                }

                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0x7, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP4, 0, 3, LREG_TMP4, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP2, LREG_TMP4, 0, LREG_TMP6, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP6, 0, 0xFF, LREG_TMP6, 0, 0, 0);
                CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP6, 0, 56, LREG_TMP6, 0, 0, 0);

                  if(cond != AL) { //not always
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD, 0, VD, 0, 0, 0);
                  } //end not always
                  else
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP5, LREG_TMP6, 0, VD, 0, 0, 0);
                break;
            }
          } //Vector Table Lookup VTBL/VTBX
          else if((b7 && b5 && b4) && !b20 && (b27 && b26 && !b25 && !b24)) { //Vector Duplicate VDUP (scalar) //A8-592
            uint8_t index;

            if(b0) { //8-bits
              index = (insn>>17) & 0x7;

              switch(index) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                  break;
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 8, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 24, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                  break;
                case 4:
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                  break;
                case 5:
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 40, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                  break;
                case 6:
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                  break;
                case 7:
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 56, LREG_TMP1, 0, 0, 0);  
                  break;
              }

              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VD, 0, VD, 0, 0, 0);

                  if(b22) {
                    switch(index) {
                      case 0:
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 1:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 2:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 3:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 4:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 5:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 6:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 7:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP1, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                  }
                } //end not always
                else { //always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                  if(b22) {
                    switch(index) {
                      case 0:
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 1:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 8, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 2:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 3:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 24, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 4:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 5:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 40, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 6:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 7:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 56, LREG_TMP1, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 8, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                  }
                } //end always
            }
            else if(b1) { //16-bits
              index = (insn>>18) & 0x3;

              switch(index) {
                case 0:
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                  break;
                case 1:
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 16, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                  break;
                case 2:
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                  break;
                case 3:
                  CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 48, LREG_TMP1, 0, 0, 0);  
                  break;
              }

              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VD, 0, VD, 0, 0, 0);

                  if(b22) {
                    switch(index) {
                      case 0:
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 1:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 2:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 3:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP1, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                  }
                } //end not always
                else { //always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                  if(b22) {
                    switch(index) {
                      case 0:
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 1:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 16, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 2:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP1, 0, 0, 0);  
                        CrackInst::setup(rinst, iAALU, OP_S64_AND, LREG_TMP1, 0, 0xFFFF, LREG_TMP1, 0, 0, 0);  
                        break;
                      case 3:
                        CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 48, LREG_TMP1, 0, 0, 0);  
                        break;
                    }

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 16, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                  }
                } //end always
            }
            else if(b2) { //32-bits
              CrackInst::setup(rinst, iAALU, OP_U64_SUB, 0, 0, 1, LREG_TMP3, 0, 0, 0);  
              CrackInst::setup(rinst, iAALU, OP_S64_SRL, LREG_TMP3, 0, 32, LREG_TMP3, 0, 0, 0);  

              if(!b3)
                CrackInst::setup(rinst, iAALU, OP_S64_AND, VM, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
              else 
                CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM, 0, 32, LREG_TMP1, 0, 0, 0);  

              CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  

                if(cond != AL) { //not always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP5, 0, 0, 0);  
                  CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP5, 0, LREG_TMP5, 0, 0, 0);
                  CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP5, VD, 0, VD, 0, 0, 0);

                  if(b22) {
                    if(!b3)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                    else 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, LREG_TMP1, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_COPYICC, LREG_ICC, LREG_TMP1, 0, LREG_TMP1, 0, 0, 0);
                    CrackInst::setup(rinst, iAALU, cmoveArray[cond], LREG_TMP1, VD1, 0, VD1, 0, 0, 0);
                  }
                } //end not always
                else { //always
                  CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD, 0, 0, 0);  

                  if(b22) {
                    if(!b3)
                      CrackInst::setup(rinst, iAALU, OP_S64_AND, VM1, LREG_TMP3, 0, LREG_TMP1, 0, 0, 0);  
                    else 
                      CrackInst::setup(rinst, iAALU, OP_S64_SRL, VM1, 0, 32, LREG_TMP1, 0, 0, 0);  

                    CrackInst::setup(rinst, iAALU, OP_S64_SLL, LREG_TMP1, 0, 32, LREG_TMP2, 0, 0, 0);  
                    CrackInst::setup(rinst, iAALU, OP_S64_OR, LREG_TMP1, LREG_TMP2, 0, VD1, 0, 0, 0);  
                  }
                } //end always
            }
          } //end Vector Duplicate VDUP (scalar)
        } //Advanced SIMD data-processing instructions
      } //end Coprocessor instruction
      break;
  }

  return;
}
