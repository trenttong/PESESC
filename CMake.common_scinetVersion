# Use this file ONLY for global CFLAG options
IF(CC MATCHES "clang")
  SET (CMAKE_C_COMPILER                  "clang")
  SET (CMAKE_C_FLAGS                     "-Wall -std=c99")
  SET (CMAKE_C_FLAGS_DEBUG               "-g")
  SET (CMAKE_C_FLAGS_MINSIZEREL          "-Os -DNDEBUG")
  SET (CMAKE_C_FLAGS_RELEASE             "-O4 -DNDEBUG")
  SET (CMAKE_C_FLAGS_RELWITHDEBINFO      "-O2 -g")

  SET (CMAKE_CXX_COMPILER                  "clang++")
  SET (CMAKE_CXX_FLAGS                     "-Wall")
  SET (CMAKE_CXX_FLAGS_DEBUG               "-g")
  SET (CMAKE_CXX_FLAGS_MINSIZEREL          "-Os -DNDEBUG")
  SET (CMAKE_CXX_FLAGS_RELEASE             "-flto -O4 -DNDEBUG")
  SET (CMAKE_CXX_FLAGS_RELWITHDEBINFO      "-O2 -g")
ELSE(CC MATCHES "clang")
  IF(CMAKE_HOST_ARCH MATCHES "i386") 
    SET(CMAKE_CXX_FLAGS "-g -m32 -march=i686 -ftree-vectorize -msse3 -Wno-deprecated -Wall")
    SET(CMAKE_C_FLAGS   "-g -m32 -march=i686 -ftree-vectorize -msse3 -Wall")
  ELSE(CMAKE_HOST_ARCH MATCHES "i386")
    SET(CMAKE_CXX_FLAGS "-g -pipe -march=native -Wno-deprecated -Wall")
    SET(CMAKE_C_FLAGS   "-g -pipe -march=native -Wall")
  ENDIF(CMAKE_HOST_ARCH MATCHES "i386")

  # Uncomment this two lines to activate line coverage
  #SET(CMAKE_CXX_FLAGS_RELEASE "-g -ftest-coverage -fprofile-arcs")
  #SET(CMAKE_C_FLAGS_RELEASE "-g -ftest-coverage -fprofile-arcs")

  SET(CMAKE_CXX_FLAGS_RELEASE "-O2 -DNDEBUG")
  SET(CMAKE_C_FLAGS_RELEASE   "-O2 -DNDEBUG")

  SET(CMAKE_CXX_FLAGS_DEBUG "-O0 -DDEBUG=1")
  SET(CMAKE_C_FLAGS_DEBUG   "-O0 -DDEBUG=1")
ENDIF(CC MATCHES "clang")

IF(CMAKE_BUILD_TYPE MATCHES "Debug") 
  SET(CMAKE_BUILD_TYPE "Debug")
ELSE(CMAKE_BUILD_TYPE MATCHES "Debug")
  SET(CMAKE_BUILD_TYPE "Release")
ENDIF(CMAKE_BUILD_TYPE MATCHES "Debug")


##############
# Full-system/user-mode
IF(ENABLE_QEMU_USER AND ENABLE_QEMU_SYSTEM)
  MESSAGE(ERROR "QEMU user-mode and full-system can not be compiled at the same time")
ENDIF(ENABLE_QEMU_USER AND ENABLE_QEMU_SYSTEM)

IF(ENABLE_QEMU_USER)
  SET(ENABLE_QEMU_USER 1)
  SET(ENABLE_QEMU_SYSTEM 0)
ELSE(ENABLE_QEMU_USER)
  IF(ENABLE_QEMU_SYSTEM)
    SET(ENABLE_QEMU_USER 0)
    SET(ENABLE_QEMU_SYSTEM 1)
  ELSE(ENABLE_QEMU_SYSTEM)
    # Default use user-mode
    SET(ENABLE_QEMU_USER 1)
    SET(ENABLE_QEMU_SYSTEM 0)
  ENDIF(ENABLE_QEMU_SYSTEM)
ENDIF(ENABLE_QEMU_USER)

IF(ENABLE_QEMU_SYSTEM)
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DENABLE_QEMU_SYSTEM")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DENABLE_QEMU_SYSTEM")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DENABLE_QEMU_SYSTEM")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DENABLE_QEMU_SYSTEM")
ENDIF(ENABLE_QEMU_SYSTEM)
IF(ENABLE_QEMU_USER)
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DENABLE_QEMU_USER")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DENABLE_QEMU_USER")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DENABLE_QEMU_USER")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DENABLE_QEMU_USER")
ENDIF(ENABLE_QEMU_USER)

SET(qemu_BUILD "${CMAKE_CURRENT_BINARY_DIR}/../qemu")
SET(qemu_SOURCE "${esesc_SOURCE_DIR}/emul/qemu")

#############
# ISA
IF(ESESC_QEMU_ISA MATCHES "armel")
# If the ISA is ARM, we have to check if it is a 32 bit or 64 bit system. 
  SET(ESESC_QEMU_ISA_ARMEL 1)
  SET(ESESC_QEMU_ISA_SPARC32 0)

  IF(ENABLE_QEMU_SYSTEM)

    SET(CMAKE_QEMU_LIBS -Wl,--whole-archive ${qemu_BUILD}/arm-linux-user/libqemu_esesc.a -Wl,--no-whole-archive)

  ELSE(ENABLE_QEMU_SYSTEM)

    IF(CMAKE_HOST_ARCH MATCHES "i386") 
        SET(ENABLE_I386 1)
        # 32bit CUDA when the emulated architecture is a 32bit ISA
        SET(ESESC_QEMU_ISA_ARM_32bit 1)
        SET(CMAKE_QEMU_LIBS -g -m32 -march=i686
          -Wl,-T,${qemu_BUILD}/config-host.ld
          -Wl,-T,${qemu_SOURCE}/i386.ld
          ${qemu_BUILD}/arm-linux-user/libqemu_esesc.a /lib32/libdl.so.2 /lib32/libpcre.so.3 -Wl,-rpath,/usr/lib32 )
     
    ELSE(CMAKE_HOST_ARCH MATCHES "i386")
        # this could be ARM or X86 or native 32bit for 32bit Linux distros. CUDA emulation does not work with 64bit
        SET(ESESC_QEMU_ISA_ARM_64bit 1)
        IF(CMAKE_HOST_ARCH MATCHES "armel") 
            SET(CMAKE_QEMU_LIBS 
              -Wl,-T,${qemu_BUILD}/config-host.ld
              -Wl,-T,${qemu_SOURCE}/arm.ld
              ${qemu_BUILD}/arm-linux-user/libqemu_esesc.a)
        ELSE(CMAKE_HOST_ARCH MATCHES "armel") 
            SET(CMAKE_QEMU_LIBS 
              -Wl,-T,${qemu_BUILD}/config-host.ld
              -Wl,-T,${qemu_SOURCE}/x86_64.ld
              ${qemu_BUILD}/arm-linux-user/libqemu_esesc.a)
        ENDIF(CMAKE_HOST_ARCH MATCHES "armel") 
    ENDIF(CMAKE_HOST_ARCH MATCHES "i386")
    
    # Check if the enable CUDA flag is set
    IF(ENABLE_CUDA)
      SET(ENABLE_I386 1) #redundant
      SET(ENABLE_CUDA 1)
      SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${CUDA_LIBRARIES} qemuint gpuint)
    ELSE(ENABLE_CUDA)
      SET(ENABLE_CUDA 0)
    ENDIF(ENABLE_CUDA)
  
  ENDIF(ENABLE_QEMU_SYSTEM)

  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DESESC_QEMU_ISA_ARMEL=1")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DESESC_QEMU_ISA_ARMEL=1")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DESESC_QEMU_ISA_ARMEL=1")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DESESC_QEMU_ISA_ARMEL=1")

IF(ENABLE_SCQEMU)

  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DSCOORE=1 -DENABLE_SCQEMU -I${CMAKE_BINARY_DIR}")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DSCOORE=1 -DENABLE_SCQEMU -I${CMAKE_BINARY_DIR}")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DSCOORE=1 -DENABLE_SCQEMU -I${CMAKE_BINARY_DIR}")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DSCOORE=1 -DENABLE_SCQEMU -I${CMAKE_BINARY_DIR}")

  IF(ENABLE_CRACK_CACHE)
#    SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DENABLE_CRACK_CACHE=1")
#    SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DENABLE_CRACK_CACHE=1")
#    SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DENABLE_CRACK_CACHE=1")
#    SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DENABLE_CRACK_CACHE=1")
  ENDIF(ENABLE_CRACK_CACHE)

ENDIF(ENABLE_SCQEMU)

ELSE(ESESC_QEMU_ISA MATCHES "armel")
# If the ISA is SPARC, we assume only the 64 bit option. 
  SET(ESESC_QEMU_ISA_ARMEL 0)
  SET(ESESC_QEMU_ISA_SPARC32 1)

  IF(ENABLE_QEMU_SYSTEM)
    SET(CMAKE_QEMU_LIBS -Wl,--whole-archive ${qemu_BUILD}/sparc-linux-user/libqemu_esesc.a -Wl,--no-whole-archive)
  ELSE(ENABLE_QEMU_SYSTEM)
    SET(CMAKE_QEMU_LIBS 
      -Wl,-T,${qemu_BUILD}/config-host.ld
      -Wl,-T,${qemu_SOURCE}/x86_64.ld
      ${qemu_BUILD}/arm-linux-user/libqemu_esesc.a)
  ENDIF(ENABLE_QEMU_SYSTEM)

  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DESESC_QEMU_ISA_SPARC32=1")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DESESC_QEMU_ISA_SPARC32=1")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DESESC_QEMU_ISA_SPARC32=1")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DESESC_QEMU_ISA_SPARC32=1")
ENDIF(ESESC_QEMU_ISA MATCHES "armel")

SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${CMAKE_THREAD_LIBS_INIT})
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${ZLIB_LIBRARIES})
IF(ENABLE_I386)
  SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} -lncurses)
ELSE(ENABLE_I386)
  #SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${CURSES_LIBRARIES})
  SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} -lncurses)
ENDIF(ENABLE_I386)
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${GNUTLS_LIBRARIES})
IF(ENABLE_CUDA)
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DENABLE_CUDA=1")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DENABLE_CUDA=1")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DENABLE_CUDA=1")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DENABLE_CUDA=1")
ENDIF(ENABLE_CUDA)

IF(ENABLE_PEQ)
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DENABLE_PEQ=1")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DENABLE_PEQ=1")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DENABLE_PEQ=1")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DENABLE_PEQ=1")
ENDIF(ENABLE_PEQ)

IF(CMAKE_HOST_ARCH MATCHES "i386") 
  # We do not have the 32bit SM library (which is not needed anyway)
  SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS}  -lX11 -lXext)
ELSE(CMAKE_HOST_ARCH MATCHES "i386") 
  SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${X11_LIBRARIES})
ENDIF(CMAKE_HOST_ARCH MATCHES "i386") 

INCLUDE_DIRECTORIES(/home/m/moshovos/iatta/glib2/lib)
LINK_DIRECTORIES(/home/m/moshovos/iatta/glib2/lib)

SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${CURL_LIBRARIES})
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${MLIB_LIBRARIES})
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${RT_LIBRARIES})
# Just in case that you want the SDL (maybe for full-system??)
#SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${SDL_LIBRARIES})
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} ${UTIL_LIBRARIES})
SET(CMAKE_QEMU_LIBS ${CMAKE_QEMU_LIBS} -lglib-2.0)

IF(ESESC_FUZE)
  SET(ESESC_FUZE 1)
  SET(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -DESESC_FUZE=1")
  SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -DESESC_FUZE=1")
  SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DESESC_FUZE=1")
  SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DESESC_FUZE=1")
ELSE(ESESC_FUZE)
  SET(ESESC_FUZE 0)
ENDIF(ESESC_FUZE)
